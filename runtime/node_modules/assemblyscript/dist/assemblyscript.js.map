{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/extra/ast.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","STUB_DELIMITER","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","StaticArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","NativeMath","NativeMathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","trace","seed","pow","ipow32","ipow64","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","other","thisRange","otherRange","equals","thisRelatedRange","otherRelatedRange","source","toString","normalizedPath","lineAt","start","columnAt","end","formatDiagnosticContext","useColors","text","len","length","isLineBreak","charCodeAt","sb","substring","push","join","showContext","relatedSource","diagnostics","seen","withRange","has","seenInSource","seenMessagesAtPos","k","set","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","kind","TypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","parameterKind","type","initializer","ParameterNode","args","DecoratorNode","fromNode","commentKind","CommentNode","isQuoted","IdentifierExpression","elementExpressions","ArrayLiteralExpression","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","elementExpression","ElementAccessExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","typeName","NewExpression","NullExpression","names","values","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","patternFlags","RegexpLiteralExpression","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","decorators","flags","typeParameters","implementsTypes","members","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","ExportDefaultStatement","externalName","ExportImportStatement","localName","exportedName","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","declarations","ImportStatement","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","variable","iterable","ForOfStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureNode","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","literalKind","LITERAL","changetype","FLOAT","INTEGER","STRING","NULL","TRUE","FALSE","CALL","PROPERTYACCESS","SUPER","TypeNode","super","typeParameterNodes","NAMEDTYPE","namedTypeNode","next","typeArgumentNodes","hasGenericComponent","identifier","FUNCTIONTYPE","functionTypeNode","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","decoratorKind","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","numTypeArguments","Range","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","sourceKind","SOURCE","debugInfoIndex","exportPaths","lineCache","lineColumn","internalPath","mangleInternalPath","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","off","unchecked","DeclarationStatement","INDEXSIGNATURE","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","indexSignature","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","normalizePath","startsWith","resolvePath","EXPORTDEFAULT","EXPRESSION","parameterIndex","FIELDDECLARATION","FOR","FOROF","ArrowKind","FUNCTIONDECLARATION","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","cur","isTrivialAlphanum","decorator","Token","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","CONST","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","ENUM","EXTENDS","FINALLY","FROM","GET","IMPLEMENTS","IN","INTERFACE","IS","KEYOF","LET","MODULE","NAMESPACE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","SET","STATIC","TYPE","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","debugInfoRef","a","b","Tokenizer","DiagnosticEmitter","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","error","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_new","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PREFIX_INC","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","Program","options","sources","diagnosticsOffset","nextClassId","nextSignatureId","initialized","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","_arrayBufferViewInstance","_arrayBufferInstance","_arrayPrototype","_staticArrayPrototype","_setPrototype","_mapPrototype","_int8ArrayPrototype","_int16ArrayPrototype","_int32ArrayPrototype","_int64ArrayPrototype","_uint8ArrayPrototype","_uint8ClampedArrayPrototype","_uint16ArrayPrototype","_uint32ArrayPrototype","_uint64ArrayPrototype","_float32ArrayPrototype","_float64ArrayPrototype","_stringInstance","_allocInstance","_reallocInstance","_freeInstance","_retainInstance","_releaseInstance","_collectInstance","_visitInstance","_typeinfoInstance","_instanceofInstance","_allocBufferInstance","_allocArrayInstance","nativeDummySignature","nativeSource","Source","nativeFile","File","internalName","parser","Parser","resolver","Resolver","cached","requireClass","CLASS_PROTOTYPE","lookupFunction","requireFunction","buffer","offset","id","payloadSize","writeI32","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamedType","createFunctionDeclaration","createNamespaceDeclaration","parent","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","registerConstantInteger","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","lowMemoryLimit","hasFeature","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","stringInstance","arrayBufferViewInstance","registerWrapperClass","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_final_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","INTERFACE_PROTOTYPE","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","globalAliases","isWasi","BuiltinNames","wasiAbort","wasiTrace","wasiSeed","alias","delete","firstChar","parseInt","_values","Map_values","USER_ENTRY","markModuleExports","thisInstanceMembers","instanceMembers","baseInstanceMembers","thisMember","isAny","baseMember","FUNCTION_PROTOTYPE","thisMethod","baseMethod","visibilityEquals","errorRelated","Overload_signatures_must_all_be_public_private_or_protected","VIRTUAL","overloads","baseMethodInstances","instances","PROPERTY_PROTOTYPE","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","Duplicate_identifier_0","nextPrototype","resolved","resolveClass","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","member","propertyPrototype","PROPERTY","FIELD","staticMembers","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","elements","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","constructorPrototype","AMBIENT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","isLiteralKind","_0_is_not_a_valid_operator","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","initializeFieldAsProperty","typeNode","atEnd","createMethodDeclaration","createParameter","original","Namespace","copyMembers","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","isPublic","vis","declaredElements","DeclaredElement","signatureNode","base","isAssignableTo","selfProperty","selfGetter","getterInstance","selfSetter","setterInstance","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","ensureGlobal","includes","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","inSelf","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","i64_zero","constantFloatValue","INLINED","ENUMVALUE","isImmutable","Local","index","LOCAL","originalName","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","varargsStub","virtualStub","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","createParent","registerConcreteElement","postfix","stub","clone","COMPILED","STUB","locals","sourceMap","setDebugLocation","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","toBound","isUnchecked","lookupOverload","_isInterface","extendees","extends","basePtototype","Class","interfaces","nextMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","implementers","asClass","isBuiltinArray","lengthField","inheritedTypeArguments","baseName","baseType","iface","target","Set_values","uncheckedOverload","overload","fieldName","field","baseOffset","fieldInstance","writeI8","writeI16","writeF32","writeF64","extendedPrototype","arrayPrototype","getTypeArgumentsTo","staticArrayPrototype","abvInstance","float32ArrayPrototype","float64ArrayPrototype","int8ArrayPrototype","int16ArrayPrototype","int32ArrayPrototype","int64ArrayPrototype","uint8ArrayPrototype","uint8ClampedArrayPrototype","uint16ArrayPrototype","uint32ArrayPrototype","uint64ArrayPrototype","acyclic","hasCycle","cyclesTo","except","fieldType","setPrototype","mapPrototype","exceptIfMember","out","extendee","getAllExtendees","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","FeatureFlags","ExpressionId","BinaryOp","SideEffects","None","Unreachable","Funcref","Nullref","Exnref","Auto","UnaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","ExpressionRunnerFlags","Module","hasTemporaryFunction","cachedStrings","lit","binaryen","_malloc","_BinaryenSizeofLiteral","_BinaryenModuleCreate","cArr","allocU8Array","_BinaryenModuleRead","_free","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","getSideEffects","ReadsLocal","ReadsGlobal","drop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPop","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","segment","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","pass","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","passes","cStrs","optimizeLevel","shrinkLevel","debugInfo","usesARC","runPasses","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","binary","BinaryModule","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenExpressionCopy","maxLoopIterations","runner","_ExpressionRunnerCreate","precomp","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","features","All","_BinaryenExpressionGetSideEffects","u8s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","arr","ch","fromCharCodes","defaultIndex","indexOf","labelPostfix","numCases","numValues","labels","local_set","br","EqI32","local_get","defaultLabel","unshift","lastCase","output","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperand","TupleExtract","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","auto","isize64","isize32","usize64","usize32","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","signednessIsImportant","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","otherThisType","thisParameterTypes","otherParameterTypes","numParameters","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cloneParameterTypes","numParameterNames","cloneParameterNames","cachedDefaultParameterNames","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","node","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","variableLikeElement","propertyInstance","resolveProperty","indexedGet","resolvedType","baseInstance","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","Not_implemented_0","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","functionPrototype","maybeInferCall","varType","varElement","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","Interface","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","addInterface","finishResolveClass","unimplemented","ifaceMembers","isCompatibleOverride","This_overload_signature_is_not_compatible_with_its_implementation_signature","identifierAndSignatureRange","baseMembers","instanceMemberPrototypes","properties","fieldPrototype","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pending","dependsOnInstance","_values2","Property","LocalFlags","FlowFlags","ConditionKind","parentFunction","continueLabel","scopedLocals","localFlags","inlineFunction","inlineReturnLabel","resetBreakContext","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","resetTemporaryName","scopedLocal","setTemporaryName","scopedDummy","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","INITIALIZED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","before","after","min","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","retainInstance","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","functionInstance","levels","findUsedLocalsVisit","used","traverse","started","argumentsLength","setArgumentsLength","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_ceil","v128_floor","v128_trunc","v128_nearest","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_ceil","f32x4_floor","f32x4_trunc","f32x4_nearest","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_ceil","f64x2_floor","f64x2_trunc","f64x2_nearest","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","heap_base","rtti_base","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","memory_data","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","compileExpression","unary","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","ensureSmallIntegerWrap","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","currentFlow","temp1","temp2","XorI32","AddI32","local_tee","XorI64","AddI64","ShrI64","nativeSizeType","AbsF32","AbsF64","builtin_max","isNumericLiteral","MaxF32","MaxF64","nativeType","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","numOperands","immOffset","immAlign","evaluateImmediateOffset","evaluateImmediateAlign","builtin_store","contextIsExact","inType","convertExpression","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","runExpression","PreserveSideeffects","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_ceil","CeilF32x4","CeilF64x2","builtin_v128_floor","FloorF32x4","FloorF64x2","builtin_v128_trunc","TruncF32x4","TruncF64x2","builtin_v128_nearest","NearestF32x4","NearestF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","alignLog2","evaluateConstantType","argumentsRange","naturalAlign","_0_must_be_a_power_of_two","feature","Feature_0_is_not_enabled","setCurrentTypeOnError","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","builtins","firstOperand","classMembers","Type_0_has_no_property_1","resultType","ensureStaticString","maybeDropCondition","temp","SubF32","SubF64","makeIsTrueish","host","MemorySize","MemoryGrow","compileFunction","compileCallDirect","valuesOperand","Array_literal_expected","numElements","exprs","makeZero","buf","writeStaticBuffer","byteLength","addMemorySegment","isChangeableTo","Type_0_cannot_be_changed_to_type_1","evaled","Default","makeAbort","if","alreadyUnchecked","unset","compileInstantiate","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","visitInstance","global_get","addFunction","nativeSizeSize","blocks","relooper","outer","addBlockWithSwitch","SubI64","SubI32","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","isStrictlyAssignableTo","fieldOffset","return","addBlock","flatten","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","addGlobal","instanceofInstance","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","exportMemory","importMemory","initialMemory","maximumMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","Constraints","RuntimeFeatures","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","skippedAutoreleases","inlineStack","lazyLibraryFunctions","pendingClassInstanceOf","virtualCalls","pendingElements","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","i32PowInstance","i64PowInstance","setLowMemoryUnused","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","setFeatures","startFunctionInstance","currentBody","compile","initialize","startFunctionBody","files","compileFile","compileExports","startIsEmpty","global_set","funcRef","nativeParams","nativeResults","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileClassInstanceOf","ensureVirtualStub","finalizeVirtualStub","ensureVarargsStub","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","functionTableNames","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","elementName","ensureModuleExport","prefix","functionInstances","fullName","warning","Exported_generic_function_or_class_has_no_concrete_instances","classInstances","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureArgumentsLength","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileProperty","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","ERRORED","initExpr","checkTypeSupported","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","compileInlineConstant","findDecorator","decoratorNodes","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","allocStmts","makeAllocation","makeFieldInitializationInConstructor","firstStmt","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureConstructor","compileField","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","makeRelease","compilePropertyGetter","compilePropertySetter","alignment","MemorySegment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateCondition","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritMutual","valueExpression","constraints","context","tempLocal","tempLocalIndex","breaks","breakIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","newArgs","dropped","numDeclarations","initializers","initAutoreleaseSkipped","dummy","addScopedDummyLocal","freeScopedDummyLocal","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","compileAssignment","AddF32","AddF64","MulI64","MulF32","MulF64","makeCallDirect","namespace","namespaceMembers","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrU64","AndI64","OrI32","OrI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","makeAssignment","thisExpression","Variable_0_used_before_its_declaration","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","fieldParent","makeFieldAssignment","makeAutorelease","thisExpr","nativeReturnType","tempThis","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","thisArg","functionTarget","compileCallIndirect","fn","BuiltinContext","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","relatedReportNode","Operation_is_unsafe","argumentExpressions","checkCallSignature","isCallOnSuper","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","addScopedAlias","initType","originalSignature","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","ofN","switch","Optional_parameter_must_have_an_initializer","theCall","tempIndex","builder","SwitchBuilder","unboundOverloadPrototype","unboundOverloadParent","isProperty","propertyParent","overloadInstance","boundProperty","boundPropertyInstance","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","needsVarargsStub","calledName","addCase","removeFunction","render","releaseInstance","newExpr","newType","oldExpr","oldType","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","Function_0_is_virtual_and_will_not_be_inlined","theOperands","allOptionalsAreConstant","compilesToConst","lastOperand","WritesGlobal","lastOperandType","makeCallIndirect","numExpressions","contextualSignature","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","ref_null","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","bufferAddress","arraySegment","addStaticArrayHeader","arrayAddress","allocArrayInstance","nativeArrayType","dataStartMember","bufferSize","allocBufferInstance","Cannot_create_an_instance_of_an_abstract_class","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","nativeClassType","omittedFields","memberKey","Property_0_is_private_and_only_accessible_within_class_1","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","baseClass","baseCtor","allocExpr","ctor","parentEnum","Object_is_possibly_null","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","supported","v128_zero","ref_is_null","allocInstance","thisLocalIndex","codeLocation","messageArg","abortInstance","filenameArg","Dependee","backlog","seenlog","donelog","currentSource","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","dependee","USER","tn","parseTopLevelStatement","skipStatement","startPos","parseDecorator","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","abstractStart","abstractEnd","reset","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","parameter","notNullStart","notNull","bracketStart","bracketRange","nullable","isSignature","firstParamNameNoType","firstParamKind","paramStart","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","getStart","getEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignature","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignature","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createWildcardImportStatement","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","x","y","sign","isTrueish","apply","parts","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","arguments","console","byteOffset","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","i64_neg_one","fromInt","lo","hi","fromBits","low","high","sub","mul","i64_pow","rightLo","rightHi","eq","shru","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","i64_not","not","i64_eq","i64_ne","ne","gt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","getSource","parseFile","nextFile","getDependee","finish","util","readI32","readI64","valueI64","cloned","v","overrides","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","ASTBuilder","visitNode","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitIndexSignature","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","visitArguments","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","singleQuoted","lastCharPos","isDefault","serializeExternalModifiers","numMembers","serializeAccessModifiers"],"mappings":";;;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,aACR,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,YAAaJ,GACK,iBAAZC,QACdA,QAAwB,eAAID,EAAQG,QAAQ,aAE5CJ,EAAqB,eAAIC,EAAQD,EAAe,UARlD,CASmB,oBAATO,KAAuBA,KAAOC,MAAM,SAASC,GACvD,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUV,QAGnC,IAAIC,EAASO,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHZ,QAAS,IAUV,OANAa,EAAQH,GAAUI,KAAKb,EAAOD,QAASC,EAAQA,EAAOD,QAASS,GAG/DR,EAAOW,GAAI,EAGJX,EAAOD,QA0Df,OArDAS,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASjB,EAASkB,EAAMC,GAC3CV,EAAoBW,EAAEpB,EAASkB,IAClCG,OAAOC,eAAetB,EAASkB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAASzB,GACX,oBAAX0B,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAetB,EAAS0B,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAetB,EAAS,aAAc,CAAE4B,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAASnC,GAChC,IAAIkB,EAASlB,GAAUA,EAAO8B,WAC7B,WAAwB,OAAO9B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAQ,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,I,8SC5ErD,SAAYC,GAEV,mBAKA,uBAEA,uBAEA,yBAEA,qBAEA,kBAEA,wBAEA,4BAEA,6BAEA,yBAEA,2BAEA,gCAEA,oBAEA,oBAEA,oDAKA,6BAEA,6BAEA,6CAEA,gCAEA,sCAEA,0CAEA,2CAKA,iCAEA,iCAEA,+BAEA,gCAEA,8BAEA,0BAEA,iCAEA,iCAKA,+BA1EF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KA8EV,EAAAC,eAAiB,IAEjB,EAAAC,aAAe,KAEf,EAAAC,cAAgB,OAEhB,EAAAC,cAAgB,OAEhB,EAAAC,mBAAqB,IAErB,EAAAC,iBAAmB,IAEnB,EAAAC,gBAAkB,IAElB,EAAAC,cAAgB,OAEhB,EAAAC,eAAiB,EAAAD,cAAgB,EAAAP,eAEjC,EAAAS,aAAe,EAAAT,eAAiB,QAEhC,EAAAU,eAAiB,IAG9B,SAAiBC,GAEF,EAAAC,MAAQ,GAER,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,KAAO,OACP,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,KAAO,OACP,EAAAC,OAAS,SACT,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,OACR,EAAAC,OAAS,SACT,EAAAC,QAAU,UACV,EAAAC,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,QAAU,UACV,EAAAC,QAAU,UACV,EAAAC,SAAW,WAEX,EAAAC,MAAQ,OACR,EAAAC,MAAQ,OACR,EAAAC,OAAS,QAET,EAAAC,MAAQ,OACR,EAAAC,OAAS,QACT,EAAAC,YAAc,cAEd,EAAAC,WAAa,aACb,EAAAC,mBAAqB,qBACrB,EAAAC,cAAgB,gBAChB,EAAAC,gBAAkB,kBAClB,EAAAC,eAAiB,iBACjB,EAAAC,mBAAqB,qBACrB,EAAAC,iBAAmB,mBACnB,EAAAC,qBAAuB,uBACvB,EAAAC,SAAW,WACX,EAAAC,2BAA6B,6BAC7B,EAAAC,4BAA8B,8BAC9B,EAAAC,4BAA8B,8BAC9B,EAAAC,wBAA0B,0BAC1B,EAAAC,iBAAmB,mBACnB,EAAAC,oBAAsB,sBACtB,EAAAC,+BAAiC,iCACjC,EAAAC,uBAAyB,yBACzB,EAAAC,4BAA8B,8BAC9B,EAAAC,wBAA0B,0BAE1B,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,KAAO,OACP,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,KAAO,OACP,EAAAC,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,MAAQ,QACR,EAAAC,YAAc,cACd,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,gBAAkB,kBAClB,EAAAC,YAAc,cACd,EAAAC,KAAO,OACP,EAAAC,MAAQ,QACR,EAAAC,WAAa,aACb,EAAAC,YAAc,cACd,EAAAC,UAAY,YACZ,EAAAC,WAAa,aACb,EAAAC,WAAa,aACb,EAAAC,WAAa,aACb,EAAAC,WAAa,aACb,EAAAC,kBAAoB,oBACpB,EAAAC,YAAc,cACd,EAAAC,YAAc,cACd,EAAAC,YAAc,cACd,EAAAC,aAAe,eACf,EAAAC,aAAe,eACf,EAAAC,MAAQ,QAER,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,KAAO,OACP,EAAAC,IAAM,MACN,EAAAC,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,IAAM,MACN,EAAAC,MAAQ,UACR,EAAAC,QAAU,YACV,EAAAC,KAAO,SACP,EAAAC,OAAS,WACT,EAAAC,QAAU,YACV,EAAAC,QAAU,YACV,EAAAC,SAAW,aACX,EAAAC,YAAc,eACd,EAAAC,MAAQ,UACR,EAAAC,YAAc,gBACd,EAAAC,WAAa,eA1H5B,CAAiB,EAAAnH,cAAA,EAAAA,YAAW,KA8H5B,YAAS,yEAAAoH,WAAS,iFAAAC,mBAClB,YAAS,wEAAAC,UACT,YAAS,0EAAAC,YAAU,+EAAAC,kB,iYCtOnB,WACA,WACA,WACA,WACA,Y,qUCIA,cAKA,OAIA,IAMYC,EANZ,QAkBA,SAAgBC,EAA2BC,GACzC,OAAQA,GACN,KAAKF,EAAmBG,SAAU,MAAO,WACzC,KAAKH,EAAmBI,KAAM,MAAO,OACrC,KAAKJ,EAAmBK,QAAS,MAAO,UACxC,KAAKL,EAAmBM,MAAO,MAAO,QACtC,QAEE,OADAC,QAAO,GACA,IAiBb,SAAgBC,EAA0BN,GACxC,OAAQA,GACN,KAAKF,EAAmBG,SAAU,OAAO,EAAAM,cACzC,KAAKT,EAAmBI,KAAM,OAAO,EAAAM,WACrC,KAAKV,EAAmBK,QAAS,OAAO,EAAAM,aACxC,KAAKX,EAAmBM,MAAO,OAAO,EAAAM,UACtC,QAEE,OADAL,QAAO,GACA,IAlDX,gFAAAM,kBACA,wFAAAC,0BAIF,SAAYd,GAEV,2BAEA,mBAEA,yBAEA,qBARF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAY9B,+BAca,EAAAU,WAAqB,QAErB,EAAAC,aAAuB,QAEvB,EAAAC,UAAoB,QAEpB,EAAAH,cAAwB,QAExB,EAAAM,YAAsB,OAGnC,8BAcA,MAAaC,EAcX,YAAoBC,EAAWf,EAA8BgB,GAL7D,KAAAC,MAAsB,KAEtB,KAAAC,aAA6B,KAI3B9L,KAAK2L,KAAOA,EACZ3L,KAAK4K,SAAWA,EAChB5K,KAAK4L,QAAUA,EAIjB,cACED,EACAf,EACAmB,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB,IAAIL,EAAU,EAAAJ,uBAAuBG,GAIrC,OAHa,OAATI,IAAeH,EAAUA,EAAQM,QAAQ,MAAOH,IACvC,OAATC,IAAeJ,EAAUA,EAAQM,QAAQ,MAAOF,IACvC,OAATC,IAAeL,EAAUA,EAAQM,QAAQ,MAAOD,IAC7C,IAAIP,EAAkBC,EAAMf,EAAUgB,GAI/C,OAAOO,GACL,GAAInM,KAAK2L,MAAQQ,EAAMR,KAAM,OAAO,EACpC,IAAIS,EAAYpM,KAAK6L,MACjBQ,EAAaF,EAAMN,MACvB,GAAIO,GACF,IAAKC,IAAeD,EAAUE,OAAOD,GAAa,OAAO,OACpD,GAAIA,EACT,OAAO,EAET,IAAIE,EAAmBvM,KAAK8L,aACxBU,EAAoBL,EAAML,aAC9B,GAAIS,GACF,IAAKC,IAAsBD,EAAiBD,OAAOE,GAAoB,OAAO,OACzE,GAAIH,EACT,OAAO,EAET,OAAOrM,KAAK4L,SAAWO,EAAMP,QAI/B,UAAUC,GAER,OADA7L,KAAK6L,MAAQA,EACN7L,KAIT,iBAAiB6L,GAEf,OADA7L,KAAK8L,aAAeD,EACb7L,KAIT,WACE,IAAI6L,EAAQ7L,KAAK6L,MACjB,GAAIA,EAAO,CACT,IAAIY,EAASZ,EAAMY,OACnB,OACE9B,EAA2B3K,KAAK4K,UAChC,IACA5K,KAAK2L,KAAKe,WACV,MACA1M,KAAK4L,QACL,QACAa,EAAOE,eACP,IACAF,EAAOG,OAAOf,EAAMgB,OAAOH,WAC3B,IACAD,EAAOK,WAAWJ,WAClB,KACCb,EAAMkB,IAAMlB,EAAMgB,OAAOH,WAC1B,IAGJ,OACE/B,EAA2B3K,KAAK4K,UAChC,IACA5K,KAAK2L,KAAKe,WACV,KACA1M,KAAK4L,SA8DX,SAAgBoB,EAAwBnB,EAAcoB,GAAkB,GAKtE,IAJA,IAAIC,EAAOrB,EAAMY,OAAOS,KACpBC,EAAMD,EAAKE,OACXP,EAAQhB,EAAMgB,MACdE,EAAMlB,EAAMkB,IACTF,EAAQ,IAAM,EAAAQ,YAAYH,EAAKI,WAAWT,EAAQ,KAAKA,IAC9D,KAAOE,EAAMI,IAAQ,EAAAE,YAAYH,EAAKI,WAAWP,KAAOA,IAMxD,IALA,IAAIQ,EAAe,CACjB,MACAL,EAAKM,UAAUX,EAAOE,GACtB,OAEKF,EAAQhB,EAAMgB,OACnBU,EAAGE,KAAK,KACRZ,IAGF,GADII,GAAWM,EAAGE,KAAK,EAAAnC,WACnBO,EAAMgB,OAAShB,EAAMkB,IACvBQ,EAAGE,KAAK,UAER,KAAOZ,IAAUhB,EAAMkB,KAAK,CAC1B,GAAI,EAAAM,YAAYH,EAAKI,WAAWT,IAAS,CACvCU,EAAGE,KAAKZ,GAAShB,EAAMgB,MAAQ,EAAI,IAAM,KACzC,MAEFU,EAAGE,KAAK,KAIZ,OADIR,GAAWM,EAAGE,KAAK,EAAAhC,aAChB8B,EAAGG,KAAK,IAzLjB,sBAoGA,mCACE9B,EACAqB,GAAkB,EAClBU,GAAoB,GAIpB,IAAIJ,EAAe,GACfN,GAAWM,EAAGE,KAAKvC,EAA0BU,EAAQhB,WACzD2C,EAAGE,KAAK9C,EAA2BiB,EAAQhB,WACvCqC,GAAWM,EAAGE,KAAK,EAAAhC,aACvB8B,EAAGE,KAAK7B,EAAQD,KAAO,IAAO,MAAQ,OACtC4B,EAAGE,KAAK7B,EAAQD,KAAKe,YACrBa,EAAGE,KAAK,MACRF,EAAGE,KAAK7B,EAAQA,SAGhB,IAAIC,EAAQD,EAAQC,MACpB,GAAIA,EAAO,CACT,IAAIY,EAASZ,EAAMY,OAGfkB,IACFJ,EAAGE,KAAK,MACRF,EAAGE,KAAKT,EAAwBnB,EAAOoB,KAEzCM,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAKhB,EAAOE,gBACfY,EAAGE,KAAK,KACRF,EAAGE,KAAKhB,EAAOG,OAAOf,EAAMgB,OAAOH,YACnCa,EAAGE,KAAK,KACRF,EAAGE,KAAKhB,EAAOK,WAAWJ,YAC1Ba,EAAGE,KAAK,KAER,IAAI3B,EAAeF,EAAQE,aAC3B,GAAIA,EAAc,CAChB,IAAI8B,EAAgB9B,EAAaW,OAC7BkB,IACFJ,EAAGE,KAAK,MACRF,EAAGE,KAAKT,EAAwBlB,EAAcmB,KAEhDM,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAKG,EAAcjB,gBACtBY,EAAGE,KAAK,KACRF,EAAGE,KAAKG,EAAchB,OAAOd,EAAae,OAAOH,YACjDa,EAAGE,KAAK,KACRF,EAAGE,KAAKG,EAAcd,WAAWJ,YACjCa,EAAGE,KAAK,MAGZ,OAAOF,EAAGG,KAAK,KAIjB,4BAiCA,0BAQE,YAAsBG,EAA0C,MAHxD,KAAAC,KAAiD,IAAI9F,IAItD6F,IAAaA,EAAc,IAAIhG,OACpC7H,KAAK6N,YAAcA,EAIrB,eACElC,EACAf,EACAiB,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB,IAAIL,EAAUF,EAAkB/J,OAAOgK,EAAMf,EAAUmB,EAAMC,EAAMC,GAOnE,GANIJ,IAAOD,EAAUA,EAAQmC,UAAUlC,IACnCC,IAAcF,EAAQE,aAAeA,GAKrCD,EAAO,CACT,IAAIiC,EAAO9N,KAAK8N,KAChB,GAAIA,EAAKE,IAAInC,EAAMY,QAAS,CAC1B,IAAIwB,EAAehD,OAAO6C,EAAK5M,IAAI2K,EAAMY,SACzC,GAAIwB,EAAaD,IAAInC,EAAMgB,OAAQ,CACjC,IAAIqB,EAAoBjD,OAAOgD,EAAa/M,IAAI2K,EAAMgB,QACtD,IAAK,IAAIxM,EAAI,EAAG8N,EAAID,EAAkBd,OAAQ/M,EAAI8N,IAAK9N,EACrD,GAAI6N,EAAkB7N,GAAGiM,OAAOV,GAAU,OAE5CsC,EAAkBT,KAAK7B,QAEvBqC,EAAaG,IAAIvC,EAAMgB,MAAO,CAAEjB,QAE7B,CACL,IAAIqC,EAAe,IAAIjG,IACvBiG,EAAaG,IAAIvC,EAAMgB,MAAO,CAAEjB,IAChCkC,EAAKM,IAAIvC,EAAMY,OAAQwB,IAG3BjO,KAAK6N,YAAYJ,KAAK7B,GAMxB,SACED,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBjM,KAAKqO,eAAe1C,EAAMjB,EAAmBG,SAAUgB,EAAO,KAAME,EAAMC,EAAMC,GAIlF,gBACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBjM,KAAKqO,eAAe1C,EAAMjB,EAAmBG,SAAUgB,EAAOC,EAAcC,EAAMC,EAAMC,GAI1F,KACEN,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBjM,KAAKqO,eAAe1C,EAAMjB,EAAmBI,KAAMe,EAAO,KAAME,EAAMC,EAAMC,GAI9E,YACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBjM,KAAKqO,eAAe1C,EAAMjB,EAAmBI,KAAMe,EAAOC,EAAcC,EAAMC,EAAMC,GAItF,QACEN,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBjM,KAAKqO,eAAe1C,EAAMjB,EAAmBK,QAASc,EAAO,KAAME,EAAMC,EAAMC,GAIjF,eACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBjM,KAAKqO,eAAe1C,EAAMjB,EAAmBK,QAASc,EAAOC,EAAcC,EAAMC,EAAMC,GAIzF,MACEN,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBjM,KAAKqO,eAAe1C,EAAMjB,EAAmBM,MAAOa,EAAO,KAAME,EAAMC,EAAMC,GAI/E,aACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtBjM,KAAKqO,eAAe1C,EAAMjB,EAAmBM,MAAOa,EAAOC,EAAcC,EAAMC,EAAMC,M,wsDC3YzF,aAOA,OAKA,OAQA,IAAYqC,EAq3BAC,EAiJAC,EAibAC,GAv7CZ,SAAYH,GAEV,uBAGA,6BACA,mCACA,2BACA,qCACA,6BAGA,+BACA,6BACA,uBACA,mBACA,sBACA,sBACA,sCACA,sBACA,4BACA,gCACA,0BACA,kBACA,oBACA,sCACA,wCACA,0BACA,sBACA,oBACA,oBACA,kCACA,oCACA,kCAGA,sBACA,sBACA,4BACA,gBACA,sBACA,wBACA,sCACA,oCACA,gCACA,kBACA,sBACA,gBACA,wBACA,wBACA,wBACA,sBACA,kBACA,4BACA,oBACA,sBAGA,4CACA,0CACA,oDACA,4CACA,kDACA,8CACA,oDACA,8CACA,oDACA,0CACA,kDAGA,8BACA,oCACA,gCACA,wCACA,0BA3EF,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KA+EpB,MAAsBI,EACpB,YAESC,EAEA9C,GAFA,KAAA8C,OAEA,KAAA9C,QAKT,4BACEjL,EACAiL,GAEA,OAAO,IAAI+C,EAASF,EAAKG,2BAA2BjO,EAAMiL,GAAQ,KAAMA,GAG1E,uBACEjL,EACAkO,EACAC,EACAlD,GAEA,OAAO,IAAImD,EAAcpO,EAAMkO,EAAeC,EAAYlD,GAG5D,0BACEoD,EACAC,EACAC,EACAJ,EACAlD,GAEA,OAAO,IAAIuD,EAAiBH,EAAYC,EAAYC,EAAkBJ,EAAYlD,GAGpF,yBACEA,GAEA,OAAO,IAAImD,EAAcN,EAAKW,qBAAqB,GAAIxD,GAAQ,MAAM,EAAOA,GAG9E,2BACEjL,EACA0O,EACAC,EACA1D,GAEA,OAAO,IAAI2D,EAAkB5O,EAAM0O,EAAaC,EAAa1D,GAG/D,uBACE4D,EACA7O,EACA8O,EACAC,EACA9D,GAEA,OAAO,IAAI+D,EAAcH,EAAe7O,EAAM8O,EAAMC,EAAa9D,GAKnE,uBACEjL,EACAiP,EACAhE,GAEA,OAAO,IAAIiE,EAAcvB,EAAcwB,SAASnP,GAAOA,EAAMiP,EAAMhE,GAGrE,qBACEmE,EACA9C,EACArB,GAEA,OAAO,IAAIoE,EAAYD,EAAa9C,EAAMrB,GAK5C,kCACEqB,EACArB,EACAqE,GAAiB,GAEjB,OAAO,IAAIC,EAAqBjD,EAAMgD,EAAUrE,GAGlD,uCACEA,GAEA,OAAO,IAAIsE,EAAqB,IAAI,EAAOtE,GAG7C,oCACEuE,EACAvE,GAEA,OAAO,IAAIwE,EAAuBD,EAAoBvE,GAGxD,iCACEyE,EACAC,EACAC,EACA3E,GAEA,OAAO,IAAI4E,EAAoBH,EAAeC,EAAYC,EAAQ3E,GAGpE,8BACE6E,EACAC,EACAC,EACA/E,GAEA,OAAO,IAAIgF,EAAiBH,EAAUC,EAAMC,EAAO/E,GAGrD,4BACE0E,EACAzB,EACAe,EACAhE,GAEA,OAAO,IAAIiF,EAAeP,EAAYzB,EAAee,EAAMhE,GAG7D,6BACEkF,GAEA,OAAO,IAAIC,EAAgBD,GAG7B,6BACEE,EACApF,GAEA,OAAO,IAAIqF,EAAgBD,EAAapF,GAG1C,mCACEA,GAEA,OAAO,IAAIsF,EAAsBtF,GAGnC,qCACE0E,EACAa,EACAvF,GAEA,OAAO,IAAIwF,EAAwBd,EAAYa,EAAmBvF,GAGpE,6BACEA,GAEA,OAAO,IAAIyF,EAAgBzF,GAG7B,oCACEvK,EACAuK,GAEA,OAAO,IAAI0F,EAAuBjQ,EAAOuK,GAG3C,gCACEkF,GAEA,OAAO,IAAIS,EAAmBT,GAGhC,kCACER,EACAkB,EACA5F,GAEA,OAAO,IAAI6F,EAAqBnB,EAAYkB,EAAQ5F,GAGtD,sCACEvK,EACAuK,GAEA,OAAO,IAAI8F,EAAyBrQ,EAAOuK,GAG7C,2BACE+F,EACA9C,EACAe,EACAhE,GAEA,OAAO,IAAIgG,EAAcD,EAAU9C,EAAee,EAAMhE,GAG1D,4BACEA,GAEA,OAAO,IAAIiG,EAAejG,GAG5B,qCACEkG,EACAC,EACAnG,GAEA,OAAO,IAAIoG,EAAwBF,EAAOC,EAAQnG,GAGpD,qCACE0E,EACA1E,GAEA,OAAO,IAAIqG,EAAwB3B,EAAY1E,GAGjD,sCACE0E,EACAvO,EACA6J,GAEA,OAAO,IAAIsG,EAAyB5B,EAAYvO,EAAU6J,GAG5D,qCACEuG,EACAC,EACAxG,GAEA,OAAO,IAAIyG,EAAwBF,EAASC,EAAcxG,GAG5D,+BACE0G,EACAC,EACAC,EACA5G,GAEA,OAAO,IAAI6G,EAAkBH,EAAWC,EAAQC,EAAQ5G,GAG1D,qCACEvK,EACAuK,GAEA,OAAO,IAAI8G,EAAwBrR,EAAOuK,GAG5C,6BACEA,GAEA,OAAO,IAAI+G,EAAgB/G,GAG7B,4BACEA,GAEA,OAAO,IAAIgH,EAAehH,GAG5B,4BACEA,GAEA,OAAO,IAAIiH,EAAejH,GAG5B,oCACE6E,EACAqC,EACAlH,GAEA,OAAO,IAAImH,EAAuBtC,EAAUqC,EAASlH,GAGvD,mCACE6E,EACAqC,EACAlH,GAEA,OAAO,IAAIoH,EAAsBvC,EAAUqC,EAASlH,GAKtD,4BACEqH,EACArH,GAEA,OAAO,IAAIsH,EAAeD,EAAYrH,GAGxC,4BACEuH,EACAvH,GAEA,OAAO,IAAIwH,GAAeD,EAAOvH,GAGnC,8BACEjL,EACA0S,EACAC,EACAC,EACAlE,EACAmE,EACAC,EACA7H,GAEA,OAAO,IAAI8H,GAAiB/S,EAAM0S,EAAYC,EAAOC,EAAgBlE,EAAamE,EAAiBC,EAAS7H,GAG9G,+BACEuH,EACAvH,GAEA,OAAO,IAAI+H,GAAkBR,EAAOvH,GAGtC,yBACEgI,EACAtB,EACA1G,GAEA,OAAO,IAAIiI,GAAYD,EAAWtB,EAAW1G,GAG/C,4BACEA,GAEA,OAAO,IAAIkI,GAAelI,GAG5B,6BACEjL,EACA0S,EACAC,EACAvB,EACAnG,GAEA,OAAO,IAAImI,GAAgBpT,EAAM0S,EAAYC,EAAOvB,EAAQnG,GAG9D,kCACEjL,EACA2S,EACA5D,EACA9D,GAEA,OAAO,IAAIoI,GAAqBrT,EAAM2S,EAAO5D,EAAa9D,GAG5D,6BACE6H,EACAQ,EACAC,EACAtI,GAEA,OAAO,IAAIuI,GAAgBV,EAASQ,EAAMC,EAAWtI,GAGvD,oCACEkF,EACAlF,GAEA,OAAO,IAAIwI,GAAuBtD,EAAalF,GAGjD,mCACEjL,EACA0T,EACAzI,GAEA,OAAO,IAAI0I,GAAsB3T,EAAM0T,EAAczI,GAGvD,0BACE2I,EACAC,EACA5I,GAGA,OADK4I,IAAcA,EAAeD,GAC3B,IAAIE,GAAaF,EAAWC,EAAc5I,GAGnD,iCACE0E,GAEA,OAAO,IAAIoE,GAAoBpE,GAGjC,yBACEgC,EACAqC,EACAC,EACAhJ,GAEA,OAAO,IAAIiJ,GAAYvC,EAAWqC,EAAQC,EAAShJ,GAGrD,6BACEkJ,EACAb,EACArI,GAEA,OAAO,IAAImJ,GAAgBD,EAAc,KAAMb,EAAMrI,GAGvD,qCACEoJ,EACAf,EACArI,GAEA,OAAO,IAAImJ,GAAgB,KAAMC,EAAef,EAAMrI,GAGxD,+BACEqJ,EACAtU,EACAiL,GAGA,OADKjL,IAAMA,EAAOsU,GACX,IAAIC,GAAkBvU,EAAMsU,EAAarJ,GAGlD,kCACEjL,EACA0S,EACAC,EACAC,EACAlE,EACAmE,EACAC,EACA7H,GAEA,OAAO,IAAIuJ,GAAqBxU,EAAM0S,EAAYC,EAAOC,EAAgBlE,EAAamE,EAAiBC,EAAS7H,GAGlH,8BACEjL,EACA0S,EACAC,EACA7D,EACAC,EACA9D,GAEA,OAAO,IAAIwJ,GAAiBzU,EAAM0S,EAAYC,EAAO7D,EAAMC,GAAc,EAAG9D,GAG9E,0BACE8D,EACA4C,EACA+C,EACAzB,EACAhI,GAEA,OAAO,IAAI0J,GAAa5F,EAAa4C,EAAW+C,EAAazB,EAAWhI,GAG1E,4BACE2J,EACAC,EACA5B,EACAhI,GAEA,OAAO,IAAI6J,GAAeF,EAAUC,EAAU5B,EAAWhI,GAG3D,iCACEjL,EACA0S,EACAC,EACAC,EACAmC,EACAC,EACAC,EACAhK,GAEA,OAAO,IAAIiK,GAAoBlV,EAAM0S,EAAYC,EAAOC,EAAgBmC,EAAWC,EAAMC,EAAWhK,GAGtG,4BACEkK,EACAC,EACAzC,EACA1H,GAEA,OAAO,IAAIoK,EAAmBF,EAASC,EAAWzC,EAAO1H,GAG3D,+BACEjL,EACA0S,EACAC,EACAC,EACAmC,EACAC,EACA/J,GAEA,OAAO,IAAIqK,GAAkBtV,EAAM0S,EAAYC,EAAOC,EAAgBmC,EAAWC,EAAM/J,GAGzF,kCACEjL,EACA0S,EACAC,EACAG,EACA7H,GAEA,OAAO,IAAIsK,GAAqBvV,EAAM0S,EAAYC,EAAOG,EAAS7H,GAGpE,6BACEvK,EACAuK,GAEA,OAAO,IAAIuK,GAAgB9U,EAAOuK,GAGpC,6BACE0G,EACA8D,EACAxK,GAEA,OAAO,IAAIyK,GAAgB/D,EAAW8D,EAAOxK,GAG/C,wBACEuH,EACAF,EACArH,GAEA,OAAO,IAAI0K,GAAWnD,EAAOF,EAAYrH,GAG3C,4BACEvK,EACAuK,GAEA,OAAO,IAAI2K,GAAelV,EAAOuK,GAGnC,0BACEqH,EACAuD,EACAC,EACAC,EACA9K,GAEA,OAAO,IAAI+K,GAAa1D,EAAYuD,EAAeC,EAAiBC,EAAmB9K,GAGzF,6BACEjL,EACA0S,EACAC,EACAC,EACA9D,EACA7D,GAEA,OAAO,IAAIgL,GAAgBjW,EAAM0S,EAAYC,EAAOC,EAAgB9D,EAAM7D,GAG5E,+BACEyH,EACAyB,EACAlJ,GAEA,OAAO,IAAIiL,GAAkBxD,EAAYyB,EAAclJ,GAGzD,iCACEjL,EACA0S,EACAC,EACA7D,EACAC,EACA9D,GAEA,OAAO,IAAIkL,GAAoBnW,EAAM0S,EAAYC,EAAO7D,EAAMC,EAAa9D,GAG7E,2BACE0E,EACA1E,GAEA,OAAO,IAAImL,GAAczG,EAAY1E,GAGvC,4BACE0G,EACAsB,EACAhI,GAEA,OAAO,IAAIoL,GAAe1E,EAAWsB,EAAWhI,GAIlD,cAAcqL,GACZ,OAAOlX,KAAK2O,MAAQL,EAAS6I,SACFC,WAAiBpX,MAAOkX,aAAeA,EAIpE,uBACE,GAAIlX,KAAK2O,MAAQL,EAAS6I,QACxB,OAA4BC,WAAiBpX,MAAOkX,aAClD,KAAK1I,EAAY6I,MACjB,KAAK7I,EAAY8I,QAAS,OAAO,EAGrC,OAAO,EAIT,sBACE,OAAQtX,KAAK2O,MACX,KAAKL,EAAS6I,QACZ,OAA4BC,WAAiBpX,MAAOkX,aAClD,KAAK1I,EAAY6I,MACjB,KAAK7I,EAAY8I,QACjB,KAAK9I,EAAY+I,OAAQ,OAAO,EAElC,MAEF,KAAKjJ,EAASkJ,KACd,KAAKlJ,EAASmJ,KACd,KAAKnJ,EAASoJ,MAAO,OAAO,EAE9B,OAAO,EAIT,oBACE,GAAI1X,KAAK2O,MAAQL,EAASqJ,KAAM,OAAO,EACvC,IAAIpH,EAAa6G,WAA2BpX,MAAMuQ,WAClD,OAAIA,EAAW5B,MAAQL,EAASsJ,gBACQrH,EAAYA,WACzC5B,MAAQL,EAASuJ,OAjoBhC,SAwoBA,MAAsBC,UAAiBpJ,EACrC,YAEEC,EAEOI,EAEPlD,GAEAkM,MAAMpJ,EAAM9C,GAJL,KAAAkD,aAQT,oBAAoBiJ,GAClB,GAAIhY,KAAK2O,MAAQL,EAAS2J,UAAW,CACnC,IAAIC,EAA+Bd,WAAqBpX,MACxD,IAAKkY,EAActX,KAAKuX,KAAM,CAC5B,IAAIC,EAAoBF,EAAcpJ,cACtC,GAA0B,OAAtBsJ,GAA8BA,EAAkBhL,OAAS,GAC3D,IAAK,IAAI/M,EAAI,EAAG8N,EAAIiK,EAAkBhL,OAAQ/M,EAAI8N,IAAK9N,EACrD,GAAI+X,EAAkB/X,GAAGgY,oBAAoBL,GAAqB,OAAO,MAEtE,CACL,IAAIpX,EAAOsX,EAActX,KAAK0X,WAAWpL,KACzC,IAAK,IAAI7M,EAAI,EAAG8N,EAAI6J,EAAmB5K,OAAQ/M,EAAI8N,IAAK9N,EACtD,GAAI2X,EAAmB3X,GAAGO,KAAKsM,MAAQtM,EAAM,OAAO,SAIrD,GAAIZ,KAAK2O,MAAQL,EAASiK,aAAc,CAC7C,IAAIC,EAAqCpB,WAAqBpX,MAC1DyY,EAAiBD,EAAiBvJ,WACtC,IAAK,IAAI5O,EAAI,EAAG8N,EAAIsK,EAAerL,OAAQ/M,EAAI8N,IAAK9N,EAClD,GAAIoY,EAAepY,GAAGqP,KAAK2I,oBAAoBL,GAAqB,OAAO,EAE7E,GAAIQ,EAAiBtJ,WAAWmJ,oBAAoBL,GAAqB,OAAO,EAChF,IAAI7I,EAAmBqJ,EAAiBrJ,iBACxC,GAAyB,OAArBA,GAA6BA,EAAiBkJ,oBAAoBL,GAAqB,OAAO,OAElG/M,QAAO,GAET,OAAO,GAzCX,aA8CA,MAAa2D,UAAiBF,EAC5B,YAES4J,EAEAH,EAEPtM,GAEAkM,MAAMzJ,EAASoK,SAAU7M,GANlB,KAAAyM,aAEA,KAAAH,QALX,aAcA,MAAanJ,UAAsB8I,EACjC,YAESlX,EAEAkO,EAEPC,EAEAlD,GAEAkM,MAAMzJ,EAAS2J,UAAWlJ,EAAYlD,GAR/B,KAAAjL,OAEA,KAAAkO,gBAUT,uBACE,IAAIA,EAAgB9O,KAAK8O,cACzB,OAAyB,OAAlBA,GAA0BA,EAAc1B,OAAS,GAjB5D,kBAsBA,MAAagC,UAAyB0I,EACpC,YAES7I,EAEAC,EAEAC,EAEPJ,EAEAlD,GAEAkM,MAAMzJ,EAASiK,aAAcxJ,EAAYlD,GAVlC,KAAAoD,aAEA,KAAAC,aAEA,KAAAC,oBAPX,qBAkBA,MAAaK,UAA0Bd,EACrC,YAES9N,EAEA0O,EAEAC,EAEP1D,GAEAkM,MAAMzJ,EAASqK,cAAe9M,GARvB,KAAAjL,OAEA,KAAA0O,cAEA,KAAAC,eAPX,sBAgBA,SAAYqJ,GAEV,yBAEA,2BAEA,mBANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAUzB,MAAahJ,UAAsBlB,EACjC,YAESe,EAEA7O,EAEA8O,EAEAC,EAEP9D,GAEAkM,MAAMzJ,EAASuK,UAAWhN,GAVnB,KAAA4D,gBAEA,KAAA7O,OAEA,KAAA8O,OAEA,KAAAC,cAQT,KAAAmJ,yBAAoD,KAEpD,KAAAvF,MAAqB,EAAAlR,YAAY0W,KAGjC,GAAGC,GAA2B,OAAQhZ,KAAKuT,MAAQyF,IAASA,EAE5D,MAAMA,GAA2B,OAA8B,IAAtBhZ,KAAKuT,MAAQyF,GAEtD,IAAIA,GAA2BhZ,KAAKuT,OAASyF,GA1B/C,kBAgCA,SAAYzK,GACV,uBACA,uBACA,2BACA,yCACA,yCACA,2CACA,6BACA,qBACA,uBACA,2BACA,0BACA,oBACA,wBAbF,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAgBzB,SAAiBA,GAGC,EAAAwB,SAAhB,SAAyBkJ,GACvB,GAAIA,EAAStK,MAAQL,EAAS4K,WAAY,CACxC,IAAIC,EAAiCF,EAAU/L,KAE/C,OADAjC,OAAOkO,EAAQ/L,QACP+L,EAAQ7L,WAAW,IACzB,KAAK,GACH,GAAe,WAAX6L,EAAsB,OAAO5K,EAAc6K,QAC/C,MAEF,KAAK,IACH,GAAe,YAAXD,EAAuB,OAAO5K,EAAc8K,SAChD,MAEF,KAAK,IACH,GAAe,SAAXF,EAAoB,OAAO5K,EAAc+K,MAC7C,MAEF,KAAK,IACH,GAAe,UAAXH,EAAqB,OAAO5K,EAAcgL,OAC9C,MAEF,KAAK,IACH,GAAe,UAAXJ,EAAqB,OAAO5K,EAAciL,OAC9C,MAEF,KAAK,IACH,GAAe,QAAXL,EAAmB,OAAO5K,EAAckL,KAC5C,MAEF,KAAK,IACH,GAAe,YAAXN,EAAuB,OAAO5K,EAAcmL,SAChD,MAEF,KAAK,IACH,GAAe,aAAXP,EAAwB,OAAO5K,EAAcoL,UACjD,GAAe,UAAXR,EAAqB,OAAO5K,EAAcqL,aAI7C,GAAIX,EAAStK,MAAQL,EAASsJ,eAAgB,CACnD,IAAIiC,EAA+CZ,EAC/C1I,EAAasJ,EAAmBtJ,WACpC,GAAIA,EAAW5B,MAAQL,EAAS4K,WAAY,CAC1C,IAAIC,EAAiC5I,EAAYrD,KACjDjC,OAAOkO,EAAQ/L,QACf,IAAI0M,EAAUD,EAAmB7X,SAASkL,KAE1C,GADAjC,OAAO6O,EAAQ1M,QACA,YAAX+L,EACF,OAAQW,EAAQxM,WAAW,IACzB,KAAK,GACH,GAAe,UAAXwM,EAAqB,OAAOvL,EAAcwL,gBAC9C,MAEF,KAAK,IACH,GAAe,UAAXD,EAAqB,OAAOvL,EAAcyL,gBAC9C,GAAe,WAAXF,EAAsB,OAAOvL,EAAc0L,mBAOzD,OAAO1L,EAAc2L,QAjEzB,CAAiB3L,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAsE9B,MAAauB,UAAsBpB,EACjC,YAESyL,EAEAvZ,EAEAiP,EAEPhE,GAEAkM,MAAMzJ,EAAS8L,UAAWvO,GARnB,KAAAsO,gBAEA,KAAAvZ,OAEA,KAAAiP,QAPX,kBAgBA,SAAYwK,GAEV,mBAEA,uBAEA,qBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAUvB,MAAapK,UAAoBvB,EAC/B,YAESsB,EAEA9C,EAEPrB,GAEAkM,MAAMzJ,EAASgM,QAASzO,GANjB,KAAAmE,cAEA,KAAA9C,QALX,gBAgBA,MAAsBqN,UAAmB7L,GAAzC,eAGA,MAAayB,UAA6BoK,EACxC,YAESrN,EAEAgD,EAEPrE,GAEAkM,MAAMzJ,EAAS4K,WAAYrN,GANpB,KAAAqB,OAEA,KAAAgD,YALX,yBAcA,SAAY1B,GACV,qBACA,yBACA,uBACA,uBACA,qBACA,uBANF,CAAYA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KAUvB,MAAsBgM,UAA0BD,EAC9C,YAESrD,EAEPrL,GAEAkM,MAAMzJ,EAAS6I,QAAStL,GAJjB,KAAAqL,eAHX,sBAYA,MAAa7G,UAA+BmK,EAC1C,YAESpK,EAEPvE,GAEAkM,MAAMvJ,EAAYiM,MAAO5O,GAJlB,KAAAuE,sBAHX,2BAYA,SAAYsK,GAEV,uBAEA,eAEA,yBAEA,qBARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAYzB,MAAajK,UAA4B8J,EACvC,YAESjK,EAEAC,EAEAC,EAEP3E,GAEAkM,MAAMzJ,EAASqM,UAAW9O,GARnB,KAAAyE,gBAEA,KAAAC,aAEA,KAAAC,UAPX,wBAgBA,MAAaK,UAAyB0J,EACpC,YAES7J,EAEAC,EAEAC,EAEP/E,GAEAkM,MAAMzJ,EAASsM,OAAQ/O,GARhB,KAAA6E,WAEA,KAAAC,OAEA,KAAAC,SAPX,qBAgBA,MAAaE,UAAuByJ,EAClC,YAEShK,EAEAzB,EAEAe,EAEPhE,GAEAkM,MAAMzJ,EAASqJ,KAAM9L,GARd,KAAA0E,aAEA,KAAAzB,gBAEA,KAAAe,OAQT,yBACE,IACIgL,EADA/L,EAAgB9O,KAAK8O,cAEzB,OAAIA,IACE+L,EAAmB/L,EAAc1B,QAC5B,EAAA0N,MAAMpN,KAAKoB,EAAc,GAAGjD,MAAOiD,EAAc+L,EAAmB,GAAGhP,OAG3E7L,KAAKuQ,WAAW1E,MAIzB,qBACE,IAAIgE,EAAO7P,KAAK6P,KACZkL,EAAelL,EAAKzC,OACxB,OAAI2N,EACK,EAAAD,MAAMpN,KAAKmC,EAAK,GAAGhE,MAAOgE,EAAKkL,EAAe,GAAGlP,OAEnD7L,KAAKuQ,WAAW1E,OAjC3B,mBAsCA,MAAamF,UAAwBuJ,EACnC,YAESxJ,GAEPgH,MAAMzJ,EAAS0M,MAAOjK,EAAYlF,OAF3B,KAAAkF,eAHX,oBAUA,MAAaG,UAAwBqJ,EACnC,YAEStJ,EAEPpF,GAEAkM,MAAMzJ,EAAS2M,MAAOpP,GAJf,KAAAoF,eAHX,oBAYA,MAAaE,UAA8BhB,EACzC,YAEEtE,GAEAkM,MAAM,eAAe,EAAOlM,GAC5B7L,KAAK2O,KAAOL,EAAS4M,aANzB,0BAWA,MAAa7J,UAAgCkJ,EAC3C,YAEShK,EAEAa,EAEPvF,GAEAkM,MAAMzJ,EAAS6M,cAAetP,GANvB,KAAA0E,aAEA,KAAAa,qBALX,4BAcA,MAAaG,UAA+BiJ,EAC1C,YAESlZ,EAEPuK,GAEAkM,MAAMvJ,EAAY6I,MAAOxL,GAJlB,KAAAvK,SAHX,2BAYA,MAAakQ,UAA2B+I,EACtC,YAESxJ,GAEPgH,MAAMzJ,EAAS8M,SAAUrK,EAAYlF,OAF9B,KAAAkF,eAHX,uBAUA,MAAaW,UAA6B6I,EACxC,YAEShK,EAEAkB,EAEP5F,GAEAkM,MAAMzJ,EAAS+M,WAAYxP,GANpB,KAAA0E,aAEA,KAAAkB,UALX,yBAcA,MAAaE,UAAiC6I,EAC5C,YAESlZ,EAEPuK,GAEAkM,MAAMvJ,EAAY8I,QAASzL,GAJpB,KAAAvK,SAHX,6BAYA,MAAauQ,UAAsB0I,EACjC,YAES3I,EAEA9C,EAEAe,EAEPhE,GAEAkM,MAAMzJ,EAASgN,IAAKzP,GARb,KAAA+F,WAEA,KAAA9C,gBAEA,KAAAe,OAQT,yBACE,IACIgL,EADA/L,EAAgB9O,KAAK8O,cAEzB,OAAsB,OAAlBA,IAA2B+L,EAAmB/L,EAAc1B,QAAU,EACjE,EAAA0N,MAAMpN,KAAKoB,EAAc,GAAGjD,MAAOiD,EAAc+L,EAAmB,GAAGhP,OAEzE7L,KAAK4R,SAAS/F,MAIvB,qBACE,IAAIgE,EAAO7P,KAAK6P,KACZkL,EAAelL,EAAKzC,OACxB,OAAI2N,EACK,EAAAD,MAAMpN,KAAKmC,EAAK,GAAGhE,MAAOgE,EAAKkL,EAAe,GAAGlP,OAEnD7L,KAAK4R,SAAS/F,OA/BzB,kBAoCA,MAAaiG,UAAuB3B,EAClC,YAEEtE,GAEAkM,MAAM,QAAQ,EAAOlM,GACrB7L,KAAK2O,KAAOL,EAASkJ,MANzB,mBAWA,MAAavF,UAAgCuI,EAC3C,YAESzI,EAEAC,EAEPnG,GAEAkM,MAAMvJ,EAAY+M,OAAQ1P,GANnB,KAAAkG,QAEA,KAAAC,UALX,4BAcA,MAAaE,UAAgCqI,EAC3C,YAEShK,EAEP1E,GAEAkM,MAAMzJ,EAASkN,cAAe3P,GAJvB,KAAA0E,cAHX,4BAYA,MAAa4B,UAAiCoI,EAC5C,YAEShK,EAEAvO,EAEP6J,GAEAkM,MAAMzJ,EAASsJ,eAAgB/L,GANxB,KAAA0E,aAEA,KAAAvO,YALX,6BAcA,MAAasQ,UAAgCkI,EAC3C,YAESpI,EAEAC,EAEPxG,GAEAkM,MAAMvJ,EAAYiN,OAAQ5P,GANnB,KAAAuG,UAEA,KAAAC,gBALX,4BAcA,MAAaK,UAA0B6H,EACrC,YAEShI,EAEAC,EAEAC,EAEP5G,GAEAkM,MAAMzJ,EAASoN,QAAS7P,GARjB,KAAA0G,YAEA,KAAAC,SAEA,KAAAC,UAPX,sBAgBA,MAAaE,UAAgC6H,EAC3C,YAESlZ,EAEPuK,GAEAkM,MAAMvJ,EAAY+I,OAAQ1L,GAJnB,KAAAvK,SAHX,4BAYA,MAAasR,UAAwBzC,EACnC,YAEEtE,GAEAkM,MAAM,SAAS,EAAOlM,GACtB7L,KAAK2O,KAAOL,EAASuJ,OANzB,oBAWA,MAAahF,UAAuB1C,EAClC,YAEEtE,GAEAkM,MAAM,QAAQ,EAAOlM,GACrB7L,KAAK2O,KAAOL,EAASqN,MANzB,mBAWA,MAAa7I,UAAuB3C,EAClC,YAEEtE,GAEAkM,MAAM,QAAQ,EAAOlM,GACrB7L,KAAK2O,KAAOL,EAASmJ,MANzB,mBAWA,MAAanG,UAAwBnB,EACnC,YAEEtE,GAEAkM,MAAM,SAAS,EAAOlM,GACtB7L,KAAK2O,KAAOL,EAASoJ,OANzB,oBAWA,MAAsBkE,UAAwBrB,EAC5C,YAEE5L,EAEO+B,EAEAqC,EAEPlH,GAEAkM,MAAMpJ,EAAM9C,GANL,KAAA6E,WAEA,KAAAqC,WAPX,oBAgBA,MAAaC,UAA+B4I,EAC1C,YAEElL,EAEAqC,EAEAlH,GAEAkM,MAAMzJ,EAASuN,aAAcnL,EAAUqC,EAASlH,IATpD,2BAcA,MAAaoH,UAA8B2I,EACzC,YAEElL,EAEAqC,EAEAlH,GAEAkM,MAAMzJ,EAASwN,YAAapL,EAAUqC,EAASlH,IATnD,0BAgBA,MAAsBkQ,UAAkBrN,GAAxC,cAGA,SAAYD,GAEV,mBAEA,+BAEA,yBAEA,qCARF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAYtB,uBAA4BC,EAC1B,YAESsN,EAEArP,EAEAO,GAEP6K,MAAMzJ,EAAS2N,OAAQ7E,WAAkB,IANlC,KAAA4E,aAEA,KAAArP,iBAEA,KAAAO,OAeT,KAAAgG,WAA0B,IAAIrL,MAE9B,KAAAqU,gBAAuB,EAEvB,KAAAC,YAA+B,KAcvB,KAAAC,UAA0B,KAG1B,KAAAC,WAAkB,EAjCxBrc,KAAK6L,MAAQ,IAAI,EAAAiP,MAAM9a,KAAM,EAAGkN,EAAKE,QACrC,IAAIkP,EAAeC,GAAmB5P,GACtC3M,KAAKsc,aAAeA,EACpB,IAAIE,EAAMF,EAAaG,YAAY,EAAAna,gBACnCtC,KAAK0c,WAAaF,GAAO,EAAIF,EAAa9O,UAAUgP,EAAM,GAAKF,EAejE,eACE,OAAOtc,KAAKsc,cAAgB,EAAAzZ,cAI9B,gBACE,IAAI8L,EAAO3O,KAAKgc,WAChB,OAAOrN,GAAQF,EAAWkO,SAAWhO,GAAQF,EAAWmO,cAU1D,OAAOJ,GACLvR,OAAOuR,GAAO,GAAKA,EAAM,YACzB,IAAIJ,EAAYpc,KAAKoc,UACrB,IAAKA,EAAW,CACdpc,KAAKoc,UAAYA,EAAY,CAAC,GAC9B,IAAIlP,EAAOlN,KAAKkN,KACZ2P,EAAM,EACN9P,EAAMG,EAAKE,OACf,KAAOyP,EAAM9P,GACmB,IAA1BG,EAAKI,WAAWuP,MAA6BT,EAAU3O,KAAKoP,GAElET,EAAU3O,KAAK,YAIjB,IAFA,IAAInN,EAAI,EACJa,EAAIib,EAAUhP,OAAS,EACpB9M,EAAIa,GAAG,CACZ,IAAIV,EAAIH,GAAMa,EAAIb,GAAM,GACpB8B,EAAI0a,UAAUV,EAAU3b,IAC5B,GAAI+b,EAAMpa,EAAGjB,EAAIV,MACZ,IAAI+b,EAAMM,UAAUV,EAAU3b,EAAI,IAErC,OADAT,KAAKqc,WAAaG,EAAMpa,EAAI,EACrB3B,EAAI,EAERH,EAAIG,EAAI,GAEf,OAAOwK,OAAO,GAIhB,WACE,OAAOjL,KAAKqc,aAKhB,MAAsBU,UAA6BhB,EACjD,YAEEpN,EAEO/N,EAEA0S,EAEAC,EAEP1H,GAEAkM,MAAMpJ,EAAM9C,GARL,KAAAjL,OAEA,KAAA0S,aAEA,KAAAC,QAQT,GAAGyF,GAA2B,OAAQhZ,KAAKuT,MAAQyF,IAASA,EAE5D,MAAMA,GAA2B,OAA8B,IAAtBhZ,KAAKuT,MAAQyF,GAEtD,IAAIA,GAA2BhZ,KAAKuT,OAASyF,GArB/C,yBAyBA,MAAa/C,UAA2BvH,EACtC,YAESqH,EAEAC,EAEAzC,EAEP1H,GAEAkM,MAAMzJ,EAAS0O,eAAgBnR,GARxB,KAAAkK,UAEA,KAAAC,YAEA,KAAAzC,SAPX,uBAgBA,MAAsB0J,UAAyCF,EAC7D,YAEEpO,EAEA/N,EAEA0S,EAEAC,EAEO7D,EAEAC,EAEP9D,GAEAkM,MAAMpJ,EAAM/N,EAAM0S,EAAYC,EAAO1H,GAN9B,KAAA6D,OAEA,KAAAC,eAbX,qCAsBA,MAAawD,UAAuB4I,EAClC,YAES7I,EAEPrH,GAEAkM,MAAMzJ,EAAS4O,MAAOrR,GAJf,KAAAqH,cAHX,mBAYA,MAAaG,WAAuB0I,EAClC,YAES3I,EAEPvH,GAEAkM,MAAMzJ,EAAS6O,MAAOtR,GAJf,KAAAuH,SAHX,oBAYA,MAAaO,WAAyBoJ,EACpC,YAEEnc,EAEA0S,EAEAC,EAEOC,EAEAlE,EAEAmE,EAEAC,EAEP7H,GAEAkM,MAAMzJ,EAAS8O,iBAAkBxc,EAAM0S,EAAYC,EAAO1H,GAVnD,KAAA2H,iBAEA,KAAAlE,cAEA,KAAAmE,kBAEA,KAAAC,UAQT,KAAA2J,eAA4C,KAE5C,gBACE,IAAI7J,EAAiBxT,KAAKwT,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAepG,OAAS,GA3B7D,sBAgCA,MAAawG,WAA0BmI,EACrC,YAES3I,EAEPvH,GAEAkM,MAAMzJ,EAASgP,SAAUzR,GAJlB,KAAAuH,SAHX,uBAYA,MAAaU,WAAoBiI,EAC/B,YAESlI,EAEAtB,EAEP1G,GAEAkM,MAAMzJ,EAASiP,GAAI1R,GANZ,KAAAgI,YAEA,KAAAtB,aALX,iBAcA,MAAawB,WAAuBgI,EAClC,YAEElQ,GAEAkM,MAAMzJ,EAASpL,MAAO2I,IAL1B,oBAUA,MAAamI,WAAwB+I,EACnC,YAEEnc,EAEA0S,EAEAC,EAEOvB,EAEPnG,GAEAkM,MAAMzJ,EAASkP,gBAAiB5c,EAAM0S,EAAYC,EAAO1H,GAJlD,KAAAmG,UATX,qBAkBA,MAAaiC,WAA6BgJ,EACxC,YAEErc,EAEA2S,EAEA5D,EAEA9D,GAEAkM,MAAMzJ,EAASmP,qBAAsB7c,EAAM,KAAM2S,EAAO,KAAM5D,EAAa9D,IAX/E,0BAgBA,MAAa0I,WAA8BwH,EACzC,YAESnb,EAEA0T,EAEPzI,GAEAkM,MAAMzJ,EAASoP,aAAc7R,GANtB,KAAAjL,OAEA,KAAA0T,gBALX,2BAcA,MAAaI,WAAqBhG,EAChC,YAES8F,EAEAC,EAEP5I,GAEAkM,MAAMzJ,EAASqP,aAAc9R,GANtB,KAAA2I,YAEA,KAAAC,gBALX,kBAcA,MAAaL,WAAwB2H,EACnC,YAESrI,EAEAQ,EAEAC,EAEPtI,GAGA,GADAkM,MAAMzJ,EAASsP,OAAQ/R,GARhB,KAAA6H,UAEA,KAAAQ,OAEA,KAAAC,YAKHD,EAAM,CACR,IAAIvH,EAAiB,EAAAkR,cAAc3J,EAAK5S,OACpC4S,EAAK5S,MAAMwc,WAAW,KACxBnR,EAAiB,EAAAoR,YAAYpR,EAAgBd,EAAMY,OAAO6P,cAErD3P,EAAemR,WAAW,EAAAhb,kBAAiB6J,EAAiB,EAAA7J,eAAiB6J,GAEpF3M,KAAKsc,aAAe3P,OAEpB3M,KAAKsc,aAAe,MArB1B,qBA8BA,MAAajI,WAA+B0H,EAC1C,YAEShL,EAEPlF,GAEAkM,MAAMzJ,EAAS0P,cAAenS,GAJvB,KAAAkF,eAHX,4BAYA,MAAa4D,WAA4BoH,EACvC,YAESxL,GAEPwH,MAAMzJ,EAAS2P,WAAY1N,EAAW1E,OAF/B,KAAA0E,cAHX,yBAUA,MAAa8E,WAAyB4H,EACpC,YAEErc,EAEA0S,EAEAC,EAEA7D,EAEAC,EAEOuO,EAEPrS,GAEAkM,MAAMzJ,EAAS6P,iBAAkBvd,EAAM0S,EAAYC,EAAO7D,EAAMC,EAAa9D,GAJtE,KAAAqS,kBAbX,sBAsBA,MAAa3I,WAAqBwG,EAChC,YAESpM,EAEA4C,EAEA+C,EAEAzB,EAEPhI,GAEAkM,MAAMzJ,EAAS8P,IAAKvS,GAVb,KAAA8D,cAEA,KAAA4C,YAEA,KAAA+C,cAEA,KAAAzB,aATX,kBAkBA,MAAa6B,WAAuBqG,EAClC,YAESvG,EAEAC,EAEA5B,EAEPhI,GAEAkM,MAAMzJ,EAAS+P,MAAOxS,GARf,KAAA2J,WAEA,KAAAC,WAEA,KAAA5B,aAPX,oBAgBA,SAAkByK,GAEhB,mBAEA,iDAEA,mCANF,CAAkB,EAAAA,YAAA,EAAAA,UAAS,KAU3B,MAAaxI,WAA4BiH,EACvC,YAEEnc,EAEA0S,EAEAC,EAEOC,EAEAmC,EAEAC,EAEAC,EAEPhK,GAEAkM,MAAMzJ,EAASiQ,oBAAqB3d,EAAM0S,EAAYC,EAAO1H,GAVtD,KAAA2H,iBAEA,KAAAmC,YAEA,KAAAC,OAEA,KAAAC,YAQT,gBACE,IAAIrC,EAAiBxT,KAAKwT,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAepG,OAAS,EAI3D,QACE,OAAO,IAAI0I,GACT9V,KAAKY,KACLZ,KAAKsT,WACLtT,KAAKuT,MACLvT,KAAKwT,eACLxT,KAAK2V,UACL3V,KAAK4V,KACL5V,KAAK6V,UACL7V,KAAK6L,QAtCX,yBA4CA,MAAaiJ,WAAoBiH,EAC/B,YAESxJ,EAEAqC,EAEAC,EAEPhJ,GAEAkM,MAAMzJ,EAASkQ,GAAI3S,GARZ,KAAA0G,YAEA,KAAAqC,SAEA,KAAAC,WAPX,iBAgBA,MAAaM,WAA0B4H,EACrC,YAEEnc,EAEOsU,EAEPrJ,GAEAkM,MAAMzJ,EAASmQ,kBAAmB7d,EAAM,KAAM,EAAAyB,YAAY0W,KAAMlN,GAJzD,KAAAqJ,eALX,uBAcA,MAAaF,WAAwB+G,EACnC,YAEShH,EAEAE,EAEAf,EAEPrI,GAEAkM,MAAMzJ,EAASoQ,OAAQ7S,GARhB,KAAAkJ,eAEA,KAAAE,gBAEA,KAAAf,OAKP,IAAIvH,EAAiB,EAAAkR,cAAc3J,EAAK5S,OACpC4S,EAAK5S,MAAMwc,WAAW,KACxBnR,EAAiB,EAAAoR,YAAYpR,EAAgBd,EAAMY,OAAO6P,cAErD3P,EAAemR,WAAW,EAAAhb,kBAAiB6J,EAAiB,EAAA7J,eAAiB6J,GAEpF3M,KAAKsc,aAAe3P,GAlBxB,qBA0BA,MAAayI,WAA6BzB,GACxC,YAEE/S,EAEA0S,EAEAC,EAEAC,EAEAlE,EAEAmE,EAEAC,EAEA7H,GAEAkM,MAAMnX,EAAM0S,EAAYC,EAAOC,EAAgBlE,EAAamE,EAAiBC,EAAS7H,GACtF7L,KAAK2O,KAAOL,EAASqQ,sBApBzB,0BAyBA,MAAazI,WAA0BJ,GACrC,YAEElV,EAEA0S,EAEAC,EAEAC,EAEAmC,EAEAC,EAEA/J,GAEAkM,MAAMnX,EAAM0S,EAAYC,EAAOC,EAAgBmC,EAAWC,EAAM,EAAgB/J,GAChF7L,KAAK2O,KAAOL,EAASsQ,mBAlBzB,uBAuBA,MAAazI,WAA6B4G,EACxC,YAEEnc,EAEA0S,EAEAC,EAEOG,EAEP7H,GAEAkM,MAAMzJ,EAASuQ,qBAAsBje,EAAM0S,EAAYC,EAAO1H,GAJvD,KAAA6H,WATX,0BAkBA,MAAa0C,WAAwB2F,EACnC,YAESza,EAEPuK,GAEAkM,MAAMzJ,EAASwQ,OAAQjT,GAJhB,KAAAvK,SAHX,qBAYA,MAAaiV,WAAmB7H,EAC9B,YAES0E,EAEAF,EAEPrH,GAEAkM,MAAMzJ,EAASyQ,WAAYlT,GANpB,KAAAuH,QAEA,KAAAF,cALX,gBAcA,MAAaoD,WAAwByF,EACnC,YAESxJ,EAEA8D,EAEPxK,GAEAkM,MAAMzJ,EAAS0Q,OAAQnT,GANhB,KAAA0G,YAEA,KAAA8D,SALX,qBAcA,MAAaG,WAAuBuF,EAClC,YAESza,EAEPuK,GAEAkM,MAAMzJ,EAAS2Q,MAAOpT,GAJf,KAAAvK,SAHX,oBAYA,MAAasV,WAAqBmF,EAChC,YAES7I,EAEAuD,EAEAC,EAEAC,EAEP9K,GAEAkM,MAAMzJ,EAAS4Q,IAAKrT,GAVb,KAAAqH,aAEA,KAAAuD,gBAEA,KAAAC,kBAEA,KAAAC,qBATX,kBAkBA,MAAaE,WAAwBkG,EACnC,YAEEnc,EAEA0S,EAEAC,EAEOC,EAEA9D,EAEP7D,GAEAkM,MAAMzJ,EAAS6Q,gBAAiBve,EAAM0S,EAAYC,EAAO1H,GANlD,KAAA2H,iBAEA,KAAA9D,QAXX,qBAoBA,MAAaqH,WAA4BkG,EACvC,YAEErc,EAEA0S,EAEAC,EAEA7D,EAEAC,EAEA9D,GAEAkM,MAAMzJ,EAAS8Q,oBAAqBxe,EAAM0S,EAAYC,EAAO7D,EAAMC,EAAa9D,IAfpF,yBAoBA,MAAaiL,WAA0BiF,EACrC,YAESzI,EAEAyB,EAEPlJ,GAEAkM,MAAMzJ,EAAS+Q,SAAUxT,GANlB,KAAAyH,aAEA,KAAAyB,gBALX,uBAcA,MAAaiC,WAAsB+E,EACjC,YAESxL,EAEP1E,GAEAkM,MAAMzJ,EAASgR,KAAMzT,GAJd,KAAA0E,cAHX,mBAYA,MAAa0G,WAAuB8E,EAClC,YAESxJ,EAEAsB,EAEPhI,GAEAkM,MAAMzJ,EAASiR,MAAO1T,GANf,KAAA0G,YAEA,KAAAsB,aAoBX,SAAgB0I,GAAmBrI,GACjC,IAAIsI,EAAMtI,EAAKuI,YAAY,KACvBtP,EAAM+G,EAAK9G,OACf,GAAIoP,GAAO,GAAKrP,EAAMqP,GAAO,EAAG,CAC9B,IAAIgD,EAAMhD,EACV,OAASgD,EAAMrS,GACb,IAAK,EAAAsS,kBAAkBvL,EAAK5G,WAAWkS,IAErC,OADAvU,QAAO,GACAiJ,EAGX,OAAOA,EAAK1G,UAAU,EAAGgP,GAG3B,OADAvR,QAAO,GACAiJ,EAvCT,oBAcA,yBAA8BvF,EAAqB2E,GACjD,GAAIA,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACjD,IAAIqf,EAAYpM,EAAWjT,GAC3B,GAAIqf,EAAUvF,eAAiBxL,EAAM,OAAO+Q,EAGhD,OAAO,MAIT,wBAkBA,yBAA8BhQ,GAC5B,GAAIA,EAAKf,MAAQL,EAAS2J,UAAW,CACnC,IAAIrX,EAAuB8O,EAAM9O,KACjC,QAAuB,OAAdA,EAAKuX,MAAiBvX,EAAK0X,WAAWpL,KAAKE,OAAS,GAE/D,OAAO,I,+OCxtET,aAMA,OAKA,OAYA,IAAYuS,EAwIAC,EAMZ,SAAgBC,EAAiB3S,GAE/B,OADAjC,OAAOiC,EAAKE,QACJF,EAAKI,WAAW,IACtB,KAAK,GACH,GAAY,YAARJ,EAAoB,OAAOyS,EAAMG,SACrC,GAAY,MAAR5S,EAAc,OAAOyS,EAAMI,GAC/B,GAAY,SAAR7S,EAAiB,OAAOyS,EAAMK,MAClC,GAAY,SAAR9S,EAAiB,OAAOyS,EAAMM,MAClC,MAEF,KAAK,GACH,GAAY,SAAR/S,EAAiB,OAAOyS,EAAMxC,MAClC,MAEF,KAAK,GACH,GAAY,QAARjQ,EAAgB,OAAOyS,EAAMO,KACjC,GAAY,SAARhT,EAAiB,OAAOyS,EAAMQ,MAClC,GAAY,SAARjT,EAAiB,OAAOyS,EAAM3E,MAClC,GAAY,YAAR9N,EAAoB,OAAOyS,EAAMrC,SACrC,GAAY,SAARpQ,EAAiB,OAAOyS,EAAMS,MAClC,GAAY,eAARlT,EAAuB,OAAOyS,EAAMzE,YACxC,MAEF,KAAK,IACH,GAAY,YAARhO,EAAoB,OAAOyS,EAAMU,SACrC,GAAY,WAARnT,EAAmB,OAAOyS,EAAMW,QACpC,GAAY,WAARpT,EAAmB,OAAOyS,EAAMY,QACpC,GAAY,UAARrT,EAAkB,OAAOyS,EAAMa,OACnC,GAAY,MAARtT,EAAc,OAAOyS,EAAMpC,GAC/B,MAEF,KAAK,IACH,GAAY,QAARrQ,EAAgB,OAAOyS,EAAMc,KACjC,GAAY,QAARvT,EAAgB,OAAOyS,EAAMe,KACjC,GAAY,UAARxT,EAAkB,OAAOyS,EAAM/B,OACnC,GAAY,WAAR1Q,EAAmB,OAAOyS,EAAMgB,QACpC,MAEF,KAAK,IACH,GAAY,SAARzT,EAAiB,OAAOyS,EAAMjI,MAClC,GAAY,WAARxK,EAAmB,OAAOyS,EAAMiB,QACpC,GAAY,OAAR1T,EAAe,OAAOyS,EAAMvB,IAChC,GAAY,QAARlR,EAAgB,OAAOyS,EAAMkB,KACjC,GAAY,YAAR3T,EAAoB,OAAOyS,EAAMvE,SACrC,MAEF,KAAK,IACH,GAAY,OAARlO,EAAe,OAAOyS,EAAMmB,IAChC,MAEF,KAAK,IACH,GAAY,MAAR5T,EAAc,OAAOyS,EAAMnB,GAC/B,GAAY,cAARtR,EAAsB,OAAOyS,EAAMoB,WACvC,GAAY,UAAR7T,EAAkB,OAAOyS,EAAMjB,OACnC,GAAY,MAARxR,EAAc,OAAOyS,EAAMqB,GAC/B,GAAY,cAAR9T,EAAsB,OAAOyS,EAAMtE,WACvC,GAAY,aAARnO,EAAqB,OAAOyS,EAAMsB,UACtC,GAAY,MAAR/T,EAAc,OAAOyS,EAAMuB,GAC/B,MAEF,KAAK,IACH,GAAY,SAARhU,EAAiB,OAAOyS,EAAMwB,MAClC,MAEF,KAAK,IACH,GAAY,OAARjU,EAAe,OAAOyS,EAAMyB,IAChC,MAEF,KAAK,IACH,GAAY,UAARlU,EAAkB,OAAOyS,EAAM0B,OACnC,MAEF,KAAK,IACH,GAAY,aAARnU,EAAqB,OAAOyS,EAAM2B,UACtC,GAAY,OAARpU,EAAe,OAAOyS,EAAMrE,IAChC,GAAY,QAARpO,EAAgB,OAAOyS,EAAMnI,KACjC,MAEF,KAAK,IACH,GAAY,MAARtK,EAAc,OAAOyS,EAAM4B,GAC/B,MAEF,KAAK,IACH,GAAY,WAARrU,EAAmB,OAAOyS,EAAM6B,QACpC,GAAY,WAARtU,EAAmB,OAAOyS,EAAM8B,QACpC,GAAY,aAARvU,EAAqB,OAAOyS,EAAM+B,UACtC,GAAY,UAARxU,EAAkB,OAAOyS,EAAMgC,OACnC,MAEF,KAAK,IACH,GAAY,YAARzU,EAAoB,OAAOyS,EAAMiC,SACrC,GAAY,UAAR1U,EAAkB,OAAOyS,EAAMb,OACnC,MAEF,KAAK,IACH,GAAY,OAAR5R,EAAe,OAAOyS,EAAMkC,IAChC,GAAY,UAAR3U,EAAkB,OAAOyS,EAAMmC,OACnC,GAAY,SAAR5U,EAAiB,OAAOyS,EAAM9H,MAClC,GAAY,UAAR3K,EAAkB,OAAOyS,EAAMX,OACnC,MAEF,KAAK,IACH,GAAY,QAAR9R,EAAgB,OAAOyS,EAAMhE,KACjC,GAAY,SAARzO,EAAiB,OAAOyS,EAAMV,MAClC,GAAY,QAAR/R,EAAgB,OAAOyS,EAAMlI,KACjC,GAAY,OAARvK,EAAe,OAAOyS,EAAMT,IAChC,GAAY,QAARhS,EAAgB,OAAOyS,EAAMoC,KACjC,GAAY,UAAR7U,EAAkB,OAAOyS,EAAMqC,OACnC,MAEF,KAAK,IACH,GAAY,OAAR9U,EAAe,OAAOyS,EAAMsC,IAChC,GAAY,QAAR/U,EAAgB,OAAOyS,EAAML,KACjC,MAEF,KAAK,IACH,GAAY,SAARpS,EAAiB,OAAOyS,EAAMJ,MAClC,GAAY,QAARrS,EAAgB,OAAOyS,EAAMuC,KACjC,MAEF,KAAK,IACH,GAAY,SAARhV,EAAiB,OAAOyS,EAAMwC,MAItC,OAAOxC,EAAMyC,QAGf,SAAgBC,EAAsBC,GACpC,OAAQA,GACN,KAAK3C,EAAMG,SACX,KAAKH,EAAMI,GACX,KAAKJ,EAAMzE,YACX,KAAKyE,EAAMW,QACX,KAAKX,EAAMa,OACX,KAAKb,EAAMkB,KACX,KAAKlB,EAAMvB,IACX,KAAKuB,EAAMmB,IACX,KAAKnB,EAAMtE,WACX,KAAKsE,EAAMuB,GACX,KAAKvB,EAAMwB,MACX,KAAKxB,EAAM0B,OACX,KAAK1B,EAAM2B,UACX,KAAK3B,EAAMnI,KACX,KAAKmI,EAAMiC,SACX,KAAKjC,EAAMkC,IACX,KAAKlC,EAAMoC,KACX,KAAKpC,EAAML,KAAM,OAAO,EACxB,QAAS,OAAO,IAlSpB,SAAYK,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYC,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAgIA,0BAwBA,uCAA4Chf,GAE1C,OADAqK,OAAOrK,EAAKwM,QACJxM,EAAK0M,WAAW,IACtB,KAAK,IAAY,MAAe,UAAR1M,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsC0hB,GACpC,OAAQA,GACN,KAAK3C,EAAMa,OAAQ,MAAO,SAC1B,KAAKb,EAAMqB,GAAI,MAAO,KACtB,KAAKrB,EAAMtE,WAAY,MAAO,aAC9B,KAAKsE,EAAMrE,IAAK,MAAO,MACvB,KAAKqE,EAAMqC,OAAQ,MAAO,SAC1B,KAAKrC,EAAML,KAAM,MAAO,OACxB,KAAKK,EAAMwC,MAAO,MAAO,QACzB,KAAKxC,EAAM4C,YAAa,MAAO,MAC/B,KAAK5C,EAAM1E,MAAO,MAAO,IACzB,KAAK0E,EAAM6C,SAAU,MAAO,IAC5B,KAAK7C,EAAM8C,YAAa,MAAO,IAC/B,KAAK9C,EAAM+C,gBAAiB,MAAO,KACnC,KAAK/C,EAAMgD,mBAAoB,MAAO,KACtC,KAAKhD,EAAMiD,cAAe,MAAO,KACjC,KAAKjD,EAAMkD,mBAAoB,MAAO,KACtC,KAAKlD,EAAMmD,qBAAsB,MAAO,MACxC,KAAKnD,EAAMoD,0BAA2B,MAAO,MAC7C,KAAKpD,EAAMqD,KAAM,MAAO,IACxB,KAAKrD,EAAMsD,MAAO,MAAO,IACzB,KAAKtD,EAAMuD,kBAAmB,MAAO,KACrC,KAAKvD,EAAMwD,SAAU,MAAO,IAC5B,KAAKxD,EAAMyD,MAAO,MAAO,IACzB,KAAKzD,EAAM0D,QAAS,MAAO,IAC3B,KAAK1D,EAAM2D,UAAW,MAAO,KAC7B,KAAK3D,EAAM4D,YAAa,MAAO,KAC/B,KAAK5D,EAAM6D,kBAAmB,MAAO,KACrC,KAAK7D,EAAM8D,wBAAyB,MAAO,KAC3C,KAAK9D,EAAM+D,oCAAqC,MAAO,MACvD,KAAK/D,EAAMgE,UAAW,MAAO,IAC7B,KAAKhE,EAAMiE,IAAK,MAAO,IACvB,KAAKjE,EAAMkE,MAAO,MAAO,IACzB,KAAKlE,EAAMmE,YAAa,MAAO,IAC/B,KAAKnE,EAAMoE,MAAO,MAAO,IACzB,KAAKpE,EAAMqE,oBAAqB,MAAO,KACvC,KAAKrE,EAAMsE,QAAS,MAAO,KAC3B,KAAKtE,EAAMuE,OAAQ,MAAO,IAC1B,KAAKvE,EAAMwE,YAAa,MAAO,KAC/B,KAAKxE,EAAMyE,aAAc,MAAO,KAChC,KAAKzE,EAAM0E,gBAAiB,MAAO,KACnC,KAAK1E,EAAM2E,yBAA0B,MAAO,MAC5C,KAAK3E,EAAM4E,aAAc,MAAO,KAChC,KAAK5E,EAAM6E,eAAgB,MAAO,KAClC,KAAK7E,EAAM8E,yBAA0B,MAAO,MAC5C,KAAK9E,EAAM+E,+BAAgC,MAAO,MAClD,KAAK/E,EAAMgF,2CAA4C,MAAO,OAC9D,KAAKhF,EAAMiF,iBAAkB,MAAO,KACpC,KAAKjF,EAAMkF,WAAY,MAAO,KAC9B,KAAKlF,EAAMmF,aAAc,MAAO,KAChC,QAEE,OADA7Z,QAAO,GACA,KAKb,MAAa6P,EAOX,YAAYrO,EAAgBI,EAAYE,GAFxC,KAAAgY,aAAsB,EAGpB/kB,KAAKyM,OAASA,EACdzM,KAAK6M,MAAQA,EACb7M,KAAK+M,IAAMA,EAGb,YAAYiY,EAAUC,GACpB,GAAID,EAAEvY,QAAUwY,EAAExY,OAAQ,MAAM,IAAIvD,MAAM,mBAC1C,OAAO,IAAI4R,EAAMkK,EAAEvY,OACjBuY,EAAEnY,MAAQoY,EAAEpY,MAAQmY,EAAEnY,MAAQoY,EAAEpY,MAChCmY,EAAEjY,IAAMkY,EAAElY,IAAMiY,EAAEjY,IAAMkY,EAAElY,KAI9B,OAAOZ,GACL,OAAOnM,KAAKyM,QAAUN,EAAMM,QAAUzM,KAAK6M,OAASV,EAAMU,OAAS7M,KAAK+M,KAAOZ,EAAMY,IAGvF,cACE,OAAO,IAAI+N,EAAM9a,KAAKyM,OAAQzM,KAAK6M,MAAO7M,KAAK6M,OAGjD,YACE,OAAO,IAAIiO,EAAM9a,KAAKyM,OAAQzM,KAAK+M,IAAK/M,KAAK+M,KAG/C,WACE,OAAO/M,KAAKyM,OAAOS,KAAKM,UAAUxN,KAAK6M,MAAO7M,KAAK+M,MAlCvD,UA0CA,MAAamY,UAAkB,EAAAC,kBAgB7B,YAAY1Y,EAAgBoB,EAA0C,MACpEkK,MAAMlK,GAdR,KAAAd,IAAW,EAEX,KAAAyP,IAAW,EACX,KAAA8F,OAAgB,EAChB,KAAA8C,SAAgB,EAEhB,KAAAC,WAAoB,EACpB,KAAAC,aAAoB,EACpB,KAAAC,oBAA2B,EAE3B,KAAAC,UAAmC,KAMjCxlB,KAAKyM,OAASA,EACdzM,KAAKwc,IAAM,EACXxc,KAAK+M,IAAMN,EAAOS,KAAKE,OAClBS,IAAaA,EAAc,IAChC7N,KAAK6N,YAAcA,EAEnB,IAAId,EAAM/M,KAAK+M,IACXG,EAAOT,EAAOS,KAWlB,GAPElN,KAAKwc,IAAMzP,GACkB,OAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IAKPxc,KAAKwc,IAAM,EAAIzP,GACc,IAA7BG,EAAKI,WAAWtN,KAAKwc,MACY,IAAjCtP,EAAKI,WAAWtN,KAAKwc,IAAM,GAG3B,IADAxc,KAAKwc,KAAO,EAEVxc,KAAKwc,IAAMzP,GACkB,IAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IAMb,KAAKiJ,EAAyC7F,EAAmBW,SAE/D,IAAI+B,EADJtiB,KAAKqlB,WAAa,EAElB,GAAG/C,EAAQtiB,KAAK0lB,WAAWD,SACpBnD,GAAS3C,EAAMyC,SAEtB,OADApiB,KAAKsiB,MAAQA,EACNA,EAGD,WACNmD,EAAyC7F,EAAmBW,QAC5DoF,EAAsBtiB,IAAIuiB,WAI1B,IAFA,IAAI7Y,EAAM/M,KAAK+M,IACXG,EAAOlN,KAAKyM,OAAOS,KAChBlN,KAAKwc,IAAMzP,GAAK,CACrB/M,KAAKolB,SAAWplB,KAAKwc,IACrB,IAAI9b,EAAIwM,EAAKI,WAAWtN,KAAKwc,KAC7B,OAAQ9b,GACN,KAAK,GACH,OACIV,KAAKwc,IAAMzP,GACgB,IAA7BG,EAAKI,WAAWtN,KAAKwc,MACpB,MAGL,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,KACDxc,KAAKwc,IACP,MAEF,KAAK,GAEH,QADExc,KAAKwc,IAELmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,GACJ,IAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IAELmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,GACJ,IAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IACAmD,EAAMoD,2BAERpD,EAAMkD,oBAERlD,EAAMmE,YAEf,KAAK,GACL,KAAK,GACL,KAAK,GACH,OAAOnE,EAAMkG,cAEf,KAAK,GAEH,QADE7lB,KAAKwc,IAELmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,GACJ,IAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IACAmD,EAAM6E,gBAER7E,EAAM0D,QAEf,KAAK,GAEH,KADErjB,KAAKwc,IACHmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,EAAK,CACxC,IAAI+Y,EAAM5Y,EAAKI,WAAWtN,KAAKwc,KAC/B,GAAW,IAAPsJ,EAEF,QADE9lB,KAAKwc,IACAmD,EAAMqE,oBAEf,GAAW,IAAP8B,EAEF,QADE9lB,KAAKwc,IACAmD,EAAMiF,iBAGjB,OAAOjF,EAAMgE,UAEf,KAAK,GAEH,QADE3jB,KAAKwc,IACAmD,EAAMoG,UAEf,KAAK,GAEH,QADE/lB,KAAKwc,IACAmD,EAAMqG,WAEf,KAAK,GAEH,KADEhmB,KAAKwc,IACHmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,EAAK,CACxC,IAAI+Y,EAAM5Y,EAAKI,WAAWtN,KAAKwc,KAC/B,GAAW,IAAPsJ,EAEF,QADE9lB,KAAKwc,IACAmD,EAAM0E,gBAEf,GAAW,IAAPyB,EAEF,QADE9lB,KAAKwc,IAELmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,GACJ,IAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IACAmD,EAAM2E,0BAER3E,EAAMuD,kBAGjB,OAAOvD,EAAMwD,SAEf,KAAK,GAEH,KADEnjB,KAAKwc,IACHmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,EAAK,CACxC,IAAI+Y,EAAM5Y,EAAKI,WAAWtN,KAAKwc,KAC/B,GAAW,IAAPsJ,EAEF,QADE9lB,KAAKwc,IACAmD,EAAM2D,UAEf,GAAW,IAAPwC,EAEF,QADE9lB,KAAKwc,IACAmD,EAAMwE,YAGjB,OAAOxE,EAAMqD,KAEf,KAAK,GAEH,QADEhjB,KAAKwc,IACAmD,EAAM1E,MAEf,KAAK,GAEH,KADEjb,KAAKwc,IACHmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,EAAK,CACxC,IAAI+Y,EAAM5Y,EAAKI,WAAWtN,KAAKwc,KAC/B,GAAW,IAAPsJ,EAEF,QADE9lB,KAAKwc,IACAmD,EAAM4D,YAEf,GAAW,IAAPuC,EAEF,QADE9lB,KAAKwc,IACAmD,EAAMyE,aAGjB,OAAOzE,EAAMsD,MAEf,KAAK,GAEH,KADEjjB,KAAKwc,IACHmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,EAAK,CACxC,IAAI+Y,EAAM5Y,EAAKI,WAAWtN,KAAKwc,KAC/B,GAAI,EAAAyJ,eAAeH,GAEjB,QADE9lB,KAAKwc,IACAmD,EAAMuG,aAEf,GACEP,EAAiB,GAAK3lB,KAAKwc,IAAM,EAAIzP,GAC9B,IAAP+Y,GACiC,IAAjC5Y,EAAKI,WAAWtN,KAAKwc,IAAM,GAG3B,OADAxc,KAAKwc,KAAO,EACLmD,EAAM4C,YAGjB,OAAO5C,EAAMwG,IAEf,KAAK,GAAgB,CACnB,IAAIC,EAAkBpmB,KAAKwc,IAE3B,KADExc,KAAKwc,IACHmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,EAAK,CACxC,IAAI+Y,EAAM5Y,EAAKI,WAAWtN,KAAKwc,KAC/B,GAAW,IAAPsJ,EAAuB,CACzB,IAAI9V,EAAc,EAAAqK,YAAYgM,KAQ9B,IANErmB,KAAKwc,IAAM,EAAIzP,GACkB,IAAjCG,EAAKI,WAAWtN,KAAKwc,IAAM,OAEzBxc,KAAKwc,IACPxM,EAAc,EAAAqK,YAAYiM,UAEnBtmB,KAAKwc,IAAMzP,GAClB,GAAiC,IAA7BG,EAAKI,WAAWtN,KAAKwc,KAA2B,GAChDxc,KAAKwc,IACP,MAGAxc,KAAKwlB,WACPxlB,KAAKwlB,UACHxV,EACA9C,EAAKM,UAAU4Y,EAAiBpmB,KAAKwc,KACrCxc,KAAK6L,MAAMua,EAAiBpmB,KAAKwc,MAGrC,MAEF,GAAW,IAAPsJ,EAA0B,CAC5B,IAAIS,GAAS,EACb,OAASvmB,KAAKwc,IAAMzP,GAElB,GADArM,EAAIwM,EAAKI,WAAWtN,KAAKwc,KAElB,IAAL9b,GACAV,KAAKwc,IAAM,EAAIzP,GACkB,IAAjCG,EAAKI,WAAWtN,KAAKwc,IAAM,GAC3B,CACAxc,KAAKwc,KAAO,EACZ+J,GAAS,EACT,MAGCA,EAKMvmB,KAAKwlB,WACdxlB,KAAKwlB,UACH,EAAAnL,YAAY6C,MACZhQ,EAAKM,UAAU4Y,EAAiBpmB,KAAKwc,KACrCxc,KAAK6L,MAAMua,EAAiBpmB,KAAKwc,MARnCxc,KAAKwmB,MACH,EAAAjb,eAAekb,YACfzmB,KAAK6L,MAAM7L,KAAKwc,KAAM,MAS1B,MAEF,GAAW,IAAPsJ,EAEF,QADE9lB,KAAKwc,IACAmD,EAAM4E,aAGjB,OAAO5E,EAAMyD,MAEf,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACH,OAAOpjB,KAAK0mB,cACR/G,EAAMgH,eACNhH,EAAMuG,aAEZ,KAAK,GAEH,QADElmB,KAAKwc,IACAmD,EAAMiH,MAEf,KAAK,GAEH,QADE5mB,KAAKwc,IACAmD,EAAMkH,UAEf,KAAK,GAEH,KADE7mB,KAAKwc,IACHmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,EAAK,CACxC,IAAI+Y,EAAM5Y,EAAKI,WAAWtN,KAAKwc,KAC/B,GAAW,IAAPsJ,EAEF,QADE9lB,KAAKwc,IAELmJ,EAAiB,GACjB3lB,KAAKwc,IAAMzP,GACkB,IAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IACAmD,EAAM8E,0BAER9E,EAAM6D,kBAEf,GAAW,IAAPsC,EAEF,QADE9lB,KAAKwc,IACAmD,EAAM+C,gBAGjB,OAAO/C,EAAM6C,SAEf,KAAK,GAEH,KADExiB,KAAKwc,IACHmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,EAAK,CACxC,IAAI+Y,EAAM5Y,EAAKI,WAAWtN,KAAKwc,KAC/B,GAAW,IAAPsJ,EAEF,QADE9lB,KAAKwc,IAELmJ,EAAiB,GACjB3lB,KAAKwc,IAAMzP,GACkB,IAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IACAmD,EAAMmD,sBAERnD,EAAMiD,cAEf,GAAW,IAAPkD,EAEF,QADE9lB,KAAKwc,IACAmD,EAAMmH,mBAGjB,OAAOnH,EAAMuE,OAEf,KAAK,GAEH,KADElkB,KAAKwc,IACHmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,EAAK,CACxC,IAAI+Y,EAAM5Y,EAAKI,WAAWtN,KAAKwc,KAC/B,GAAW,IAAPsJ,EAA6B,CAE/B,KADE9lB,KAAKwc,IACHmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,EAAK,CAExC,GADA+Y,EAAM5Y,EAAKI,WAAWtN,KAAKwc,KAChB,IAAPsJ,EAEF,QADE9lB,KAAKwc,IAELmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,GACJ,IAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IACAmD,EAAMgF,4CAERhF,EAAM+D,oCAEf,GAAW,IAAPoC,EAEF,QADE9lB,KAAKwc,IACAmD,EAAM+E,+BAGjB,OAAO/E,EAAM8D,wBAEf,GAAW,IAAPqC,EAEF,QADE9lB,KAAKwc,IACAmD,EAAMgD,mBAGjB,OAAOhD,EAAM8C,YAEf,KAAK,GAEH,QADEziB,KAAKwc,IACAmD,EAAMoH,SAEf,KAAK,GAEH,QADE/mB,KAAKwc,IACAmD,EAAMqH,YAEf,KAAK,GAEH,QADEhnB,KAAKwc,IACAmD,EAAMsH,aAEf,KAAK,GAEH,QADEjnB,KAAKwc,IAELmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,GACJ,IAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IACAmD,EAAMmF,cAERnF,EAAMkE,MAEf,KAAK,IAEH,QADE7jB,KAAKwc,IACAmD,EAAMuH,UAEf,KAAK,IAEH,KADElnB,KAAKwc,IACHmJ,EAAiB,GAAK3lB,KAAKwc,IAAMzP,EAAK,CACxC,IAAI+Y,EAAM5Y,EAAKI,WAAWtN,KAAKwc,KAC/B,GAAW,KAAPsJ,EAEF,QADE9lB,KAAKwc,IACAmD,EAAMsE,QAEf,GAAW,IAAP6B,EAEF,QADE9lB,KAAKwc,IACAmD,EAAMkF,WAGjB,OAAOlF,EAAMiE,IAEf,KAAK,IAEH,QADE5jB,KAAKwc,IACAmD,EAAMwH,WAEf,KAAK,IAEH,QADEnnB,KAAKwc,IACAmD,EAAMoE,MAEf,KAAK,GAEH,QADE/jB,KAAKwc,IACAmD,EAAMyH,GAEf,QAAS,CACP,GAAI,EAAAC,kBAAkB3mB,GAAI,CACxB,GAAI,EAAA4mB,mBAAmB5mB,GAAI,CACzB,IAAI6mB,EAAYvnB,KAAKwc,IACrB,OACIxc,KAAKwc,IAAMzP,GACb,EAAAya,iBAAiB9mB,EAAIwM,EAAKI,WAAWtN,KAAKwc,OAE1C,IAAK,EAAA8K,mBAAmB5mB,GAEtB,OADAV,KAAKwc,IAAM+K,EACJ5H,EAAMzG,WAGjB,IACIuO,EAAe5H,EADD3S,EAAKM,UAAU+Z,EAAWvnB,KAAKwc,MAEjD,GACEiL,IAAiB9H,EAAMyC,SACvBqD,IAAuB7F,EAAmB8H,SAExCjC,IAAuB7F,EAAmB+H,SAC1CtF,EAAsBoF,IAGxB,OAAOA,EAETznB,KAAKwc,IAAM+K,EAEb,OAAO5H,EAAMzG,WACR,GAAI,EAAA0O,aAAalnB,GAAI,GACxBV,KAAKwc,IACP,MAEF,IAAI3P,EAAQ7M,KAAKwc,MASjB,OAPkB,QAAX,MAAJ9b,IAAyBV,KAAKwc,IAAMxc,KAAK+M,KACA,QAAX,MAA7BG,EAAKI,WAAWtN,KAAKwc,SACrBxc,KAAKwc,IACTxc,KAAKwmB,MACH,EAAAjb,eAAesc,kBACf7nB,KAAK6L,MAAMgB,EAAO7M,KAAKwc,MAElBmD,EAAMyC,UAInB,OAAOzC,EAAMmI,UAGf,KACEC,GAAuB,EACvBtC,EAAyC7F,EAAmBW,QAC5DyH,EAAyB3kB,IAAIuiB,WAE7B,IAAI1Y,EAAOlN,KAAKyM,OAAOS,KACvB,GAAIlN,KAAKqlB,UAAY,EAAG,CACtB,IAGIA,EAHAkC,EAAYvnB,KAAKwc,IACjByL,EAAcjoB,KAAKsiB,MACnB4F,EAAiBloB,KAAKolB,SAE1B,GAAGC,EAAYrlB,KAAK0lB,WAAWD,EAAoBuC,SAC5C3C,GAAa1F,EAAMyC,SAG1B,GAFApiB,KAAKqlB,UAAYA,EACjBrlB,KAAKslB,aAAetlB,KAAKolB,SACrB2C,EAAgB,CAClB/nB,KAAKulB,oBAAqB,EAC1B,IAAK,IAAI/I,EAAM+K,EAAWxa,EAAM/M,KAAKslB,aAAc9I,EAAMzP,IAAOyP,EAC9D,GAAI,EAAAnP,YAAYH,EAAKI,WAAWkP,IAAO,CACrCxc,KAAKulB,oBAAqB,EAC1B,OAINvlB,KAAKwc,IAAM+K,EACXvnB,KAAKsiB,MAAQ2F,EACbjoB,KAAKolB,SAAW8C,EAElB,OAAOloB,KAAKqlB,UAGd,eAAeI,EAAyC7F,EAAmB+H,QACzE,OAAO3nB,KAAKmoB,KAAKxI,EAAMzG,WAAYuM,GAGrC,KAAKnD,EAAcmD,EAAyC7F,EAAmBW,SAC7E,IAUI8E,EAVAkC,EAAYvnB,KAAKwc,IACjByL,EAAcjoB,KAAKsiB,MACnB4F,EAAiBloB,KAAKolB,SACtB4C,EAAoB3kB,IAAIuiB,UAC5B,OAAQtD,GACN,KAAK3C,EAAM8C,YACTuF,EAAoB,EAKxB,GAAG3C,EAAYrlB,KAAK0lB,WAAWD,EAAoBuC,SAC5C3C,GAAa1F,EAAMyC,SAC1B,OAAIiD,GAAa/C,GACftiB,KAAKsiB,MAAQA,EACbtiB,KAAKqlB,WAAa,GACX,IAEPrlB,KAAKwc,IAAM+K,EACXvnB,KAAKsiB,MAAQ2F,EACbjoB,KAAKolB,SAAW8C,GACT,GAIX,OACE,IAAIE,EAAQC,EASZ,OARID,GACFC,EAAgB,KAChBD,EAAM5L,IAAMxc,KAAKwc,IACjB4L,EAAM9F,MAAQtiB,KAAKsiB,MACnB8F,EAAMhD,SAAWplB,KAAKolB,UAEtBgD,EAAQ,IAAIE,EAAMtoB,KAAKwc,IAAKxc,KAAKsiB,MAAOtiB,KAAKolB,UAExCgD,EAGT,QAAQA,GACNC,EAAgBD,EAGlB,MAAMA,GACJpoB,KAAKwc,IAAM4L,EAAM5L,IACjBxc,KAAKsiB,MAAQ8F,EAAM9F,MACnBtiB,KAAKolB,SAAWgD,EAAMhD,SACtBplB,KAAKqlB,WAAa,EAGpB,MAAMxY,GAAa,EAAIE,GAAW,GAOhC,OANIF,EAAQ,GACVA,EAAQ7M,KAAKolB,SACbrY,EAAM/M,KAAKwc,KACFzP,EAAM,IACfA,EAAMF,GAED,IAAIiO,EAAM9a,KAAKyM,OAAQI,EAAOE,GAGvC,iBAIE,IAHA,IAAIG,EAAOlN,KAAKyM,OAAOS,KACnBL,EAAQ7M,KAAKwc,IACbzP,EAAM/M,KAAK+M,MAEX/M,KAAKwc,IAAMzP,GACb,EAAAya,iBAAiBta,EAAKI,WAAWtN,KAAKwc,QAExC,OAAOtP,EAAKM,UAAUX,EAAO7M,KAAKwc,KAGpC,aAME,IALA,IAAItP,EAAOlN,KAAKyM,OAAOS,KACnBqb,EAAQrb,EAAKI,WAAWtN,KAAKwc,OAC7B3P,EAAQ7M,KAAKwc,IACbzP,EAAM/M,KAAK+M,IACXyb,EAAS,KACA,CACX,GAAIxoB,KAAKwc,KAAOzP,EAAK,CACnByb,GAAUtb,EAAKM,UAAUX,EAAO7M,KAAKwc,KACrCxc,KAAKwmB,MACH,EAAAjb,eAAekd,4BACfzoB,KAAK6L,MAAMgB,EAAQ,EAAGE,IAExB,MAEF,IAAIrM,EAAIwM,EAAKI,WAAWtN,KAAKwc,KAC7B,GAAI9b,GAAK6nB,EAAO,CACdC,GAAUtb,EAAKM,UAAUX,EAAO7M,KAAKwc,OACrC,MAEF,GAAS,IAAL9b,EAAJ,CAMA,GAAI,EAAA2M,YAAY3M,IAAe,IAAT6nB,EAA4B,CAChDC,GAAUtb,EAAKM,UAAUX,EAAO7M,KAAKwc,KACrCxc,KAAKwmB,MACH,EAAAjb,eAAekd,4BACfzoB,KAAK6L,MAAMgB,EAAQ,EAAG7M,KAAKwc,MAE7B,QAEAxc,KAAKwc,SAbLgM,GAAUtb,EAAKM,UAAUX,EAAO7M,KAAKwc,KACrCgM,GAAUxoB,KAAK0oB,qBACf7b,EAAQ7M,KAAKwc,IAajB,OAAOgM,EAGT,qBACE,IAAIzb,EAAM/M,KAAK+M,IACf,KAAM/M,KAAKwc,KAAOzP,EAKhB,OAJA/M,KAAKwmB,MACH,EAAAjb,eAAeod,uBACf3oB,KAAK6L,MAAMkB,IAEN,GAGT,IAAIG,EAAOlN,KAAKyM,OAAOS,KACnBxM,EAAIwM,EAAKI,WAAWtN,KAAKwc,OAC7B,OAAQ9b,GACN,KAAK,GAAa,MAAO,KACzB,KAAK,GAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,GAAsB,MAAO,IAClC,KAAK,GAAsB,MAAO,IAClC,KAAK,IACH,OACEV,KAAKwc,IAAMzP,GACkB,KAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IACAxc,KAAK4oB,6BAEP5oB,KAAK6oB,oBAEd,KAAK,IACH,OAAO7oB,KAAK8oB,wBAEd,KAAK,GAED9oB,KAAKwc,IAAMzP,GACkB,IAA7BG,EAAKI,WAAWtN,KAAKwc,QAEnBxc,KAAKwc,IAIX,KAAK,GACL,KAAK,KACL,KAAK,KAA6B,MAAO,GACzC,QAAS,OAAO5U,OAAOmhB,aAAaroB,IAIxC,oBAKE,IAJA,IAAIwM,EAAOlN,KAAKyM,OAAOS,KACnBL,EAAQ7M,KAAKwc,IACbzP,EAAM/M,KAAK+M,IACXic,GAAU,IACD,CACX,GAAIhpB,KAAKwc,KAAOzP,EAAK,CACnB/M,KAAKwmB,MACH,EAAAjb,eAAe0d,wCACfjpB,KAAK6L,MAAMgB,EAAOE,IAEpB,MAEF,GAAiC,IAA7BG,EAAKI,WAAWtN,KAAKwc,KAA4B,GACjDxc,KAAKwc,IACPwM,GAAU,EACV,SAEF,IAAItoB,EAAIwM,EAAKI,WAAWtN,KAAKwc,KAC7B,IAAKwM,GAAgB,IAALtoB,EAAqB,MACrC,GAAI,EAAA2M,YAAY3M,GAAI,CAClBV,KAAKwmB,MACH,EAAAjb,eAAe0d,wCACfjpB,KAAK6L,MAAMgB,EAAO7M,KAAKwc,MAEzB,QAEAxc,KAAKwc,IACPwM,GAAU,EAEZ,OAAO9b,EAAKM,UAAUX,EAAO7M,KAAKwc,KAGpC,kBAKE,IAJA,IAAItP,EAAOlN,KAAKyM,OAAOS,KACnBL,EAAQ7M,KAAKwc,IACbzP,EAAM/M,KAAK+M,IACXwG,EAAQ,EACLvT,KAAKwc,IAAMzP,GAAK,CACrB,IAAIrM,EAASwM,EAAKI,WAAWtN,KAAKwc,KAClC,IAAK,EAAAgL,iBAAiB9mB,GAAI,MAI1B,SAHEV,KAAKwc,IAGC9b,GACN,KAAK,IACH6S,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,KAAK,IACHA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,KAAK,IACHA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACFvT,KAAKwmB,MACH,EAAAjb,eAAe2d,iCACflpB,KAAK6L,MAAMgB,EAAO7M,KAAKwc,MAGpBtP,EAAKM,UAAUX,EAAO7M,KAAKwc,KAGpC,cACE,IAAIzP,EAAM/M,KAAK+M,IACXG,EAAOlN,KAAKyM,OAAOS,KACnBsP,EAAMxc,KAAKwc,IACf,GAAIA,EAAM,EAAIzP,GAA+B,IAAxBG,EAAKI,WAAWkP,GACnC,OAAmC,GAA3BtP,EAAKI,WAAWkP,EAAM,IAC5B,KAAK,IACL,KAAK,GACL,KAAK,IAAY,OAAO,EAG5B,KAAOA,EAAMzP,GAAK,CAChB,IAAIrM,EAAIwM,EAAKI,WAAWkP,GACxB,GAAS,IAAL9b,GAAiC,MAAP,GAAJA,GAAuB,OAAO,EACxD,GAAS,IAALA,IAAoBA,EAAI,IAAeA,EAAI,IAAc,MAE7D8b,IAEF,OAAO,EAGT,cACE,IAAItP,EAAOlN,KAAKyM,OAAOS,KACvB,GAAIlN,KAAKwc,IAAM,EAAIxc,KAAK+M,KAAoC,IAA7BG,EAAKI,WAAWtN,KAAKwc,KAAqB,CACvE,OAAwC,GAAhCtP,EAAKI,WAAWtN,KAAKwc,IAAM,IACjC,KAAK,IAEH,OADAxc,KAAKwc,KAAO,EACLxc,KAAKmpB,iBAEd,KAAK,GAEH,OADAnpB,KAAKwc,KAAO,EACLxc,KAAKopB,oBAEd,KAAK,IAEH,OADAppB,KAAKwc,KAAO,EACLxc,KAAKqpB,mBAGhB,GAAI,EAAAC,aAAapc,EAAKI,WAAWtN,KAAKwc,IAAM,IAAK,CAC/C,IAAI3P,EAAQ7M,KAAKwc,MACfxc,KAAKwc,IACP,IAAIlb,EAAQtB,KAAKqpB,mBAKjB,OAJArpB,KAAKwmB,MACH,EAAAjb,eAAege,8CACfvpB,KAAK6L,MAAMgB,EAAO7M,KAAKwc,MAElBlb,GAGX,OAAOtB,KAAKwpB,qBAGd,iBAOE,IANA,IAAItc,EAAOlN,KAAKyM,OAAOS,KACnBL,EAAQ7M,KAAKwc,IACblb,EAAQmoB,QAAQ,GAChBC,EAAQD,QAAQ,GAChBE,EAAS9c,EACTE,EAAM/M,KAAK+M,IACR/M,KAAKwc,IAAMzP,GAAK,CACrB,IAAIyP,EAAMxc,KAAKwc,IACX9b,EAAIwM,EAAKI,WAAWkP,GACxB,GAAI9b,GAAK,IAAeA,GAAK,GAE3BY,EAAQsoB,QACNC,QAAQvoB,EAAOooB,GACfD,QAAQ/oB,EAAI,UAET,GAAIA,GAAK,IAAcA,GAAK,GAEjCY,EAAQsoB,QACNC,QAAQvoB,EAAOooB,GACfD,QAAQ,GAAK/oB,EAAI,UAEd,GAAIA,GAAK,IAAcA,GAAK,IAEjCY,EAAQsoB,QACNC,QAAQvoB,EAAOooB,GACfD,QAAQ,GAAK/oB,EAAI,SAEd,IAAS,IAALA,EAWT,MAVIipB,GAAUnN,GACZxc,KAAKwmB,MACHmD,GAAU9c,EACN,EAAAtB,eAAeue,wCACf,EAAAve,eAAewe,0DACnB/pB,KAAK6L,MAAM2Q,IAGfmN,EAASnN,EAAM,EAIjBxc,KAAKwc,IAAMA,EAAM,EAanB,OAXIxc,KAAKwc,KAAO3P,EACd7M,KAAKwmB,MACH,EAAAjb,eAAeye,2BACfhqB,KAAK6L,MAAMgB,IAEJ8c,GAAU3pB,KAAKwc,KACxBxc,KAAKwmB,MACH,EAAAjb,eAAeue,wCACf9pB,KAAK6L,MAAM8d,EAAS,IAGjBroB,EAGT,qBAOE,IANA,IAAI4L,EAAOlN,KAAKyM,OAAOS,KACnBL,EAAQ7M,KAAKwc,IACbzP,EAAM/M,KAAK+M,IACXzL,EAAQmoB,QAAQ,GAChBQ,EAASR,QAAQ,IACjBE,EAAS9c,EACN7M,KAAKwc,IAAMzP,GAAK,CACrB,IAAIyP,EAAMxc,KAAKwc,IACX9b,EAAIwM,EAAKI,WAAWkP,GACxB,GAAI9b,GAAK,IAAeA,GAAK,GAE3BY,EAAQsoB,QACNM,QAAQ5oB,EAAO2oB,GACfR,QAAQ/oB,EAAI,SAET,IAAS,IAALA,EAWT,MAVIipB,GAAUnN,GACZxc,KAAKwmB,MACHmD,GAAU9c,EACN,EAAAtB,eAAeue,wCACf,EAAAve,eAAewe,0DACnB/pB,KAAK6L,MAAM2Q,IAGfmN,EAASnN,EAAM,EAIjBxc,KAAKwc,IAAMA,EAAM,EAanB,OAXIxc,KAAKwc,KAAO3P,EACd7M,KAAKwmB,MACH,EAAAjb,eAAe4e,eACfnqB,KAAK6L,MAAMgB,IAEJ8c,GAAU3pB,KAAKwc,KACxBxc,KAAKwmB,MACH,EAAAjb,eAAeue,wCACf9pB,KAAK6L,MAAM8d,EAAS,IAGjBroB,EAGT,mBAOE,IANA,IAAI4L,EAAOlN,KAAKyM,OAAOS,KACnBL,EAAQ7M,KAAKwc,IACblb,EAAQmoB,QAAQ,GAChBW,EAAQX,QAAQ,GAChBE,EAAS9c,EACTE,EAAM/M,KAAK+M,IACR/M,KAAKwc,IAAMzP,GAAK,CACrB,IAAIyP,EAAMxc,KAAKwc,IACX9b,EAAIwM,EAAKI,WAAWkP,GACxB,GAAI9b,GAAK,IAAeA,GAAK,GAE3BY,EAAQsoB,QACNC,QAAQvoB,EAAO8oB,GACfX,QAAQ/oB,EAAI,SAET,IAAS,IAALA,EAWT,MAVIipB,GAAUnN,GACZxc,KAAKwmB,MACHmD,GAAU9c,EACN,EAAAtB,eAAeue,wCACf,EAAAve,eAAewe,0DACnB/pB,KAAK6L,MAAM2Q,IAGfmN,EAASnN,EAAM,IAIfxc,KAAKwc,IAaT,OAXIxc,KAAKwc,KAAO3P,EACd7M,KAAKwmB,MACH,EAAAjb,eAAe8e,qBACfrqB,KAAK6L,MAAMgB,IAEJ8c,GAAU3pB,KAAKwc,KACxBxc,KAAKwmB,MACH,EAAAjb,eAAeue,wCACf9pB,KAAK6L,MAAM8d,EAAS,IAGjBroB,EAGT,oBAOE,IANA,IAAI4L,EAAOlN,KAAKyM,OAAOS,KACnBL,EAAQ7M,KAAKwc,IACblb,EAAQmoB,QAAQ,GAChBa,EAAQb,QAAQ,GAChBE,EAAS9c,EACTE,EAAM/M,KAAK+M,IACR/M,KAAKwc,IAAMzP,GAAK,CACrB,IAAIyP,EAAMxc,KAAKwc,IACX9b,EAAIwM,EAAKI,WAAWkP,GACxB,GAAS,IAAL9b,EAEFY,EAAQuoB,QAAQvoB,EAAOgpB,QAClB,GAAS,IAAL5pB,EAETY,EAAQsoB,QACNC,QAAQvoB,EAAOgpB,GACfA,OAEG,IAAS,IAAL5pB,EAWT,MAVIipB,GAAUnN,GACZxc,KAAKwmB,MACHmD,GAAU9c,EACN,EAAAtB,eAAeue,wCACf,EAAAve,eAAewe,0DACnB/pB,KAAK6L,MAAM2Q,IAGfmN,EAASnN,EAAM,EAIjBxc,KAAKwc,IAAMA,EAAM,EAanB,OAXIxc,KAAKwc,KAAO3P,EACd7M,KAAKwmB,MACH,EAAAjb,eAAegf,sBACfvqB,KAAK6L,MAAMgB,IAEJ8c,GAAU3pB,KAAKwc,KACxBxc,KAAKwmB,MACH,EAAAjb,eAAeue,wCACf9pB,KAAK6L,MAAM8d,EAAS,IAGjBroB,EAGT,YAWE,OAAOtB,KAAKwqB,mBAGd,mBAKE,IAHA,IAAI3d,EAAQ7M,KAAKwc,IACbzP,EAAM/M,KAAK+M,IACXG,EAAOlN,KAAKyM,OAAOS,KAChBlN,KAAKwc,IAAMzP,GAAO,EAAAkZ,eAAe/Y,EAAKI,WAAWtN,KAAKwc,SACzDxc,KAAKwc,IAET,GAAIxc,KAAKwc,IAAMzP,GAAoC,IAA7BG,EAAKI,WAAWtN,KAAKwc,KAEzC,MADExc,KAAKwc,IACAxc,KAAKwc,IAAMzP,GAAO,EAAAkZ,eAAe/Y,EAAKI,WAAWtN,KAAKwc,SACzDxc,KAAKwc,IAGX,GAAIxc,KAAKwc,IAAMzP,EAAK,CAClB,IAAIrM,EAAIwM,EAAKI,WAAWtN,KAAKwc,KAC7B,GAAgB,MAAP,GAAJ9b,GAQH,OANIV,KAAKwc,IAAMzP,GACsB,KAAlCrM,EAAIwM,EAAKI,WAAWtN,KAAKwc,OAAgC,IAAL9b,GACrD,EAAAulB,eAAe/Y,EAAKI,WAAWtN,KAAKwc,IAAM,QAExCxc,KAAKwc,IAEFxc,KAAKwc,IAAMzP,GAAO,EAAAkZ,eAAe/Y,EAAKI,WAAWtN,KAAKwc,SACzDxc,KAAKwc,IAIb,OAAOiO,WAAWvd,EAAKM,UAAUX,EAAO7M,KAAKwc,MAG/C,eACE,MAAM,IAAItT,MAAM,mBAGlB,sBAAsBwhB,EAAc,GAIlC,IAHA,IAAIppB,EAAQ,EACRyL,EAAM/M,KAAK+M,IACXG,EAAOlN,KAAKyM,OAAOS,KAChBlN,KAAKwc,IAAMzP,GAAK,CACrB,IAAIrM,EAAIwM,EAAKI,WAAWtN,KAAKwc,OAC7B,GAAI9b,GAAK,IAAeA,GAAK,GAC3BY,GAASA,GAAS,GAAKZ,EAAI,QACtB,GAAIA,GAAK,IAAcA,GAAK,GACjCY,GAASA,GAAS,GAAKZ,GAAI,OACtB,MAAIA,GAAK,IAAcA,GAAK,KAOjC,OAJAV,KAAKwmB,MACH,EAAAjb,eAAeye,2BACfhqB,KAAK6L,MAAM7L,KAAKwc,IAAM,EAAGxc,KAAKwc,MAEzB,GANPlb,GAASA,GAAS,GAAKZ,GAAI,GAQ7B,GAAgB,KAAVgqB,EAAa,MAErB,OAAIA,GACF1qB,KAAKwmB,MACH,EAAAjb,eAAeod,uBACf3oB,KAAK6L,MAAM7L,KAAKwc,MAEX,IAEF5U,OAAOmhB,aAAaznB,GAG7B,oBACE,OAAOtB,KAAK8oB,sBAAsB,GAG5B,4BACN,IAAIjc,EAAQ7M,KAAKwc,IACblb,EAAQtB,KAAKmpB,iBACbwB,EAAUC,QAAQtpB,GAClBupB,GAAU,EAEd5f,QAAQ6f,SAASxpB,IACbqpB,EAAU,UACZ3qB,KAAKwmB,MACH,EAAAjb,eAAewf,4EACf/qB,KAAK6L,MAAMgB,EAAO7M,KAAKwc,MAEzBqO,GAAU,GAGZ,IAAI9d,EAAM/M,KAAK+M,IACXG,EAAOlN,KAAKyM,OAAOS,KAiBvB,OAhBIlN,KAAKwc,KAAOzP,GACd/M,KAAKwmB,MACH,EAAAjb,eAAeod,uBACf3oB,KAAK6L,MAAMgB,EAAOE,IAEpB8d,GAAU,GAC4B,KAA7B3d,EAAKI,WAAWtN,KAAKwc,OAC5Bxc,KAAKwc,KAEPxc,KAAKwmB,MACH,EAAAjb,eAAeyf,qCACfhrB,KAAK6L,MAAMgB,EAAO7M,KAAKwc,MAEzBqO,GAAU,GAGRA,EAAgB,GACbF,EAAU,MACb/iB,OAAOmhB,aAAa4B,GACpB/iB,OAAOmhB,aACL4B,EAAU,QAAa,GAAM,MAC7BA,EAAU,MAAW,KAAQ,QApmCvC,cA0mCA,MAAarC,EACX,YAES9L,EAEA8F,EAEA8C,GAJA,KAAA5I,MAEA,KAAA8F,QAEA,KAAA8C,YAPX,UAYA,IAAIiD,EAA8B,M,miBCxgDlC,aAoBA,OAMA,OAOA,OAKA,OA6CA,OASA,OAIA,QAIA,QAIA,QAKA,MAAM4C,EACJ,YAESC,EAEAC,EAEAC,EAEAC,EAEAC,GARA,KAAAJ,YAEA,KAAAC,kBAEA,KAAAC,oBAEA,KAAAC,cAEA,KAAAC,kBAKX,MAAMC,EACJ,YAESJ,EAEAC,EAEAC,EAEAC,GANA,KAAAH,kBAEA,KAAAC,oBAEA,KAAAC,cAEA,KAAAC,kBAKX,MAAME,EAEJ,YAESH,EAEAC,EAEAG,GAJA,KAAAJ,cAEA,KAAAC,iBAEA,KAAAG,eAKX,IAAYC,EA4wEAC,EA0CAC,GAtzEZ,SAAYF,GACV,yBAGA,iCACA,iCACA,qDACA,qDAGA,iBACA,iBACA,iBACA,iBACA,iBACA,kBACA,kCACA,gCACA,kCACA,kCACA,kCACA,sCACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAGA,oBACA,sBACA,kBACA,kCACA,gCACA,gCAGA,kCACA,kCAvCF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KA+CxB,SAAiBA,GAGC,EAAAG,cAAhB,SAA8B1R,EAA8B2R,GAE1D,OADA7gB,OAAO6gB,EAAI1e,QACH+M,GACN,KAAK,EAAA5L,cAAcmL,SACnB,KAAK,EAAAnL,cAAcwL,gBACjB,OAAQ+R,EAAIxe,WAAW,IACrB,KAAK,GACH,GAAW,MAAPwe,EAAa,OAAOJ,EAAaK,YACrC,GAAW,OAAPD,EAAc,OAAOJ,EAAaM,YACtC,MAEF,KAAK,IACH,GAAW,MAAPF,EAAa,OAAOJ,EAAaO,sBACrC,GAAW,OAAPH,EAAc,OAAOJ,EAAaQ,sBACtC,MAEF,KAAK,GACH,GAAW,KAAPJ,EAAY,OAAOJ,EAAaS,IACpC,MAEF,KAAK,GACH,GAAW,KAAPL,EAAY,OAAOJ,EAAaU,IACpC,MAEF,KAAK,GACH,GAAW,KAAPN,EAAY,OAAOJ,EAAaW,IACpC,GAAW,MAAPP,EAAa,OAAOJ,EAAaY,IACrC,MAEF,KAAK,GACH,GAAW,KAAPR,EAAY,OAAOJ,EAAaa,IACpC,MAEF,KAAK,GACH,GAAW,KAAPT,EAAY,OAAOJ,EAAac,IACpC,MAEF,KAAK,GACH,GAAW,KAAPV,EAAY,OAAOJ,EAAae,YACpC,MAEF,KAAK,IACH,GAAW,KAAPX,EAAY,OAAOJ,EAAagB,WACpC,MAEF,KAAK,GACH,GAAW,KAAPZ,EAAY,OAAOJ,EAAaiB,YACpC,MAEF,KAAK,GACH,GAAW,MAAPb,EAAa,OAAOJ,EAAakB,GACrC,MAEF,KAAK,GACH,GAAW,MAAPd,EAAa,OAAOJ,EAAamB,GACrC,MAEF,KAAK,GACH,GAAW,KAAPf,EAAY,OAAOJ,EAAaoB,GACpC,GAAW,MAAPhB,EAAa,OAAOJ,EAAaqB,GACrC,GAAW,MAAPjB,EAAa,OAAOJ,EAAasB,YACrC,GAAW,OAAPlB,EAAc,OAAOJ,EAAauB,cACtC,MAEF,KAAK,GACH,GAAW,KAAPnB,EAAY,OAAOJ,EAAawB,GACpC,GAAW,MAAPpB,EAAa,OAAOJ,EAAayB,GACrC,GAAW,MAAPrB,EAAa,OAAOJ,EAAa0B,YAIzC,MAEF,KAAK,EAAA7e,cAAcyL,gBACjB,OAAQ8R,EAAIxe,WAAW,IACrB,KAAK,GACH,GAAW,KAAPwe,EAAY,OAAOJ,EAAa1I,KACpC,GAAW,MAAP8I,EAAa,OAAOJ,EAAa2B,WACrC,MAEF,KAAK,GACH,GAAW,KAAPvB,EAAY,OAAOJ,EAAazI,MACpC,GAAW,MAAP6I,EAAa,OAAOJ,EAAa4B,WACrC,MAEF,KAAK,GACH,GAAW,KAAPxB,EAAY,OAAOJ,EAAa6B,IACpC,MAEF,KAAK,IACH,GAAW,KAAPzB,EAAY,OAAOJ,EAAa8B,YAIxC,MAEF,KAAK,EAAAjf,cAAc0L,iBACjB,OAAQ6R,EAAIxe,WAAW,IACrB,KAAK,GACH,GAAW,MAAPwe,EAAa,OAAOJ,EAAa+B,YACrC,MAEF,KAAK,GACH,GAAW,MAAP3B,EAAa,OAAOJ,EAAagC,aAO7C,OAAOhC,EAAatJ,SAIN,EAAAuL,gBAAhB,SAAgCrL,GAC9B,OAAQA,GACN,KAAK,EAAA3C,MAAMqD,KACX,KAAK,EAAArD,MAAMwE,YAAa,OAAOuH,EAAaS,IAC5C,KAAK,EAAAxM,MAAMsD,MACX,KAAK,EAAAtD,MAAMyE,aAAc,OAAOsH,EAAaU,IAC7C,KAAK,EAAAzM,MAAMwD,SACX,KAAK,EAAAxD,MAAM0E,gBAAiB,OAAOqH,EAAaW,IAChD,KAAK,EAAA1M,MAAMyD,MACX,KAAK,EAAAzD,MAAM4E,aAAc,OAAOmH,EAAaa,IAC7C,KAAK,EAAA5M,MAAM0D,QACX,KAAK,EAAA1D,MAAM6E,eAAgB,OAAOkH,EAAac,IAC/C,KAAK,EAAA7M,MAAMuD,kBACX,KAAK,EAAAvD,MAAM2E,yBAA0B,OAAOoH,EAAaY,IACzD,KAAK,EAAA3M,MAAMgE,UACX,KAAK,EAAAhE,MAAMiF,iBAAkB,OAAO8G,EAAae,YACjD,KAAK,EAAA9M,MAAMiE,IACX,KAAK,EAAAjE,MAAMkF,WAAY,OAAO6G,EAAagB,WAC3C,KAAK,EAAA/M,MAAMkE,MACX,KAAK,EAAAlE,MAAMmF,aAAc,OAAO4G,EAAaiB,YAC7C,KAAK,EAAAhN,MAAM6D,kBACX,KAAK,EAAA7D,MAAM8E,yBAA0B,OAAOiH,EAAa0B,YACzD,KAAK,EAAAzN,MAAM8D,wBACX,KAAK,EAAA9D,MAAM+E,+BAAgC,OAAOgH,EAAasB,YAC/D,KAAK,EAAArN,MAAM+D,oCACX,KAAK,EAAA/D,MAAMgF,2CAA4C,OAAO+G,EAAauB,cAC3E,KAAK,EAAAtN,MAAMiD,cAAe,OAAO8I,EAAakB,GAC9C,KAAK,EAAAjN,MAAMkD,mBAAoB,OAAO6I,EAAamB,GACnD,KAAK,EAAAlN,MAAM8C,YAAa,OAAOiJ,EAAaoB,GAC5C,KAAK,EAAAnN,MAAMgD,mBAAoB,OAAO+I,EAAaqB,GACnD,KAAK,EAAApN,MAAM6C,SAAU,OAAOkJ,EAAawB,GACzC,KAAK,EAAAvN,MAAM+C,gBAAiB,OAAOgJ,EAAayB,GAElD,OAAOzB,EAAatJ,SAIN,EAAAwL,qBAAhB,SAAqCtL,GACnC,OAAQA,GACN,KAAK,EAAA3C,MAAMqD,KAAM,OAAO0I,EAAa1I,KACrC,KAAK,EAAArD,MAAMsD,MAAO,OAAOyI,EAAazI,MACtC,KAAK,EAAAtD,MAAMmE,YAAa,OAAO4H,EAAa6B,IAC5C,KAAK,EAAA5N,MAAMoE,MAAO,OAAO2H,EAAa8B,YACtC,KAAK,EAAA7N,MAAM2D,UAAW,OAAOoI,EAAa2B,WAC1C,KAAK,EAAA1N,MAAM4D,YAAa,OAAOmI,EAAa4B,WAE9C,OAAO5B,EAAatJ,SAIN,EAAAyL,sBAAhB,SAAsCvL,GACpC,OAAQA,GACN,KAAK,EAAA3C,MAAM2D,UAAW,OAAOoI,EAAa+B,YAC1C,KAAK,EAAA9N,MAAM4D,YAAa,OAAOmI,EAAagC,YAE9C,OAAOhC,EAAatJ,SA5KxB,CAAiBsJ,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAiL7B,MAAaoC,UAAgB,EAAA3I,kBAG3B,YAES4I,EAEPlgB,EAA0C,MAE1CkK,MAAMlK,GAJC,KAAAkgB,UAmBT,KAAAC,QAAoB,GAEpB,KAAAC,kBAAyB,EAMzB,KAAAC,YAAmB,EAEnB,KAAAC,gBAAuB,EAEvB,KAAAC,aAAoB,EAKpB,KAAAC,YAAgC,IAAIrmB,IAEpC,KAAAsmB,eAAsC,IAAItmB,IAE1C,KAAAumB,sBAAmE,IAAIvmB,IAEvE,KAAAwmB,gBAAuC,IAAIxmB,IAE3C,KAAAymB,eAAkC,IAAIzmB,IAEtC,KAAA0mB,eAAiC,IAAI1mB,IAErC,KAAA2mB,iBAAgC,IAAI9mB,MAAiB,GAU7C,KAAA+mB,yBAAyC,KAQzC,KAAAC,qBAAqC,KAQrC,KAAAC,gBAAyC,KAQzC,KAAAC,sBAA+C,KAQ/C,KAAAC,cAAuC,KAQvC,KAAAC,cAAuC,KAQvC,KAAAC,oBAA6C,KAQ7C,KAAAC,qBAA8C,KAQ9C,KAAAC,qBAA8C,KAQ9C,KAAAC,qBAA8C,KAQ9C,KAAAC,qBAA8C,KAQ9C,KAAAC,4BAAqD,KAQrD,KAAAC,sBAA+C,KAQ/C,KAAAC,sBAA+C,KAQ/C,KAAAC,sBAA+C,KAQ/C,KAAAC,uBAAgD,KAQhD,KAAAC,uBAAgD,KAQhD,KAAAC,gBAAgC,KAehC,KAAAC,eAAkC,KAQlC,KAAAC,iBAAoC,KAQpC,KAAAC,cAAiC,KAQjC,KAAAC,gBAAmC,KAQnC,KAAAC,iBAAoC,KAQpC,KAAAC,iBAAoC,KAQpC,KAAAC,eAAkC,KAQlC,KAAAC,kBAAqC,KAQrC,KAAAC,oBAAuC,KAQvC,KAAAC,qBAAwC,KAQxC,KAAAC,oBAAuC,KAuEvC,KAAAC,qBAAgD,KAnWtD,IAAIC,EAAe,IAAI,EAAAC,OAAO,EAAAliB,WAAWmO,cAAe,EAAA/Z,cAAgB,QAAS,iBACjF7C,KAAK0wB,aAAeA,EACpB,IAAIE,EAAa,IAAIC,EAAK7wB,KAAM0wB,GAChC1wB,KAAK4wB,WAAaA,EAClB5wB,KAAKquB,YAAYjgB,IAAIwiB,EAAWE,aAAcF,GAC9C5wB,KAAK+wB,OAAS,IAAI,EAAAC,OAAOhxB,KAAK6N,YAAa7N,KAAKguB,SAChDhuB,KAAKixB,SAAW,IAAI,EAAAC,SAASlxB,MA0C/B,8BACE,IAAImxB,EAASnxB,KAAK4uB,yBAElB,OADKuC,IAAQnxB,KAAK4uB,yBAA2BuC,EAASnxB,KAAKoxB,aAAa,EAAAnuB,YAAYgF,kBAC7EkpB,EAKT,0BACE,IAAIA,EAASnxB,KAAK6uB,qBAElB,OADKsC,IAAQnxB,KAAK6uB,qBAAuBsC,EAASnxB,KAAKoxB,aAAa,EAAAnuB,YAAYiF,cACzEipB,EAKT,qBACE,IAAIA,EAASnxB,KAAK8uB,gBAElB,OADKqC,IAAQnxB,KAAK8uB,gBAAkBqC,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAY4E,MAAO8jB,EAAY0F,kBAClGF,EAKT,2BACE,IAAIA,EAASnxB,KAAK+uB,sBAElB,OADKoC,IAAQnxB,KAAK+uB,sBAAwBoC,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAY6E,YAAa6jB,EAAY0F,kBAC9GF,EAKT,mBACE,IAAIA,EAASnxB,KAAKgvB,cAElB,OADKmC,IAAQnxB,KAAKgvB,cAAgBmC,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAY8E,IAAK4jB,EAAY0F,kBAC9FF,EAKT,mBACE,IAAIA,EAASnxB,KAAKivB,cAElB,OADKkC,IAAQnxB,KAAKivB,cAAgBkC,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAY+E,IAAK2jB,EAAY0F,kBAC9FF,EAKT,yBACE,IAAIA,EAASnxB,KAAKkvB,oBAElB,OADKiC,IAAQnxB,KAAKkvB,oBAAsBiC,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAYsF,UAAWojB,EAAY0F,kBAC1GF,EAKT,0BACE,IAAIA,EAASnxB,KAAKmvB,qBAElB,OADKgC,IAAQnxB,KAAKmvB,qBAAuBgC,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAYuF,WAAYmjB,EAAY0F,kBAC5GF,EAKT,0BACE,IAAIA,EAASnxB,KAAKovB,qBAElB,OADK+B,IAAQnxB,KAAKovB,qBAAuB+B,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAYwF,WAAYkjB,EAAY0F,kBAC5GF,EAKT,0BACE,IAAIA,EAASnxB,KAAKqvB,qBAElB,OADK8B,IAAQnxB,KAAKqvB,qBAAuB8B,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAYyF,WAAYijB,EAAY0F,kBAC5GF,EAKT,0BACE,IAAIA,EAASnxB,KAAKsvB,qBAElB,OADK6B,IAAQnxB,KAAKsvB,qBAAuB6B,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAY0F,WAAYgjB,EAAY0F,kBAC5GF,EAKT,iCACE,IAAIA,EAASnxB,KAAKuvB,4BAElB,OADK4B,IAAQnxB,KAAKuvB,4BAA8B4B,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAY2F,kBAAmB+iB,EAAY0F,kBAC1HF,EAKT,2BACE,IAAIA,EAASnxB,KAAKwvB,sBAElB,OADK2B,IAAQnxB,KAAKwvB,sBAAwB2B,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAY4F,YAAa8iB,EAAY0F,kBAC9GF,EAKT,2BACE,IAAIA,EAASnxB,KAAKyvB,sBAElB,OADK0B,IAAQnxB,KAAKyvB,sBAAwB0B,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAY6F,YAAa6iB,EAAY0F,kBAC9GF,EAKT,2BACE,IAAIA,EAASnxB,KAAK0vB,sBAElB,OADKyB,IAAQnxB,KAAK0vB,sBAAwByB,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAY8F,YAAa4iB,EAAY0F,kBAC9GF,EAKT,4BACE,IAAIA,EAASnxB,KAAK2vB,uBAElB,OADKwB,IAAQnxB,KAAK2vB,uBAAyBwB,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAY+F,aAAc2iB,EAAY0F,kBAChHF,EAKT,4BACE,IAAIA,EAASnxB,KAAK4vB,uBAElB,OADKuB,IAAQnxB,KAAK4vB,uBAAyBuB,EAAyBnxB,KAAKJ,QAAQ,EAAAqD,YAAYgG,aAAc0iB,EAAY0F,kBAChHF,EAKT,qBACE,IAAIA,EAASnxB,KAAK6vB,gBAElB,OADKsB,IAAQnxB,KAAK6vB,gBAAkBsB,EAASnxB,KAAKoxB,aAAa,EAAAnuB,YAAY2E,SACpEupB,EAKT,oBACE,OAAOnxB,KAAKsxB,eAAe,EAAAruB,YAAYkG,OAMzC,oBACE,IAAIgoB,EAASnxB,KAAK8vB,eAElB,OADKqB,IAAQnxB,KAAK8vB,eAAiBqB,EAASnxB,KAAKuxB,gBAAgB,EAAAtuB,YAAYyG,QACtEynB,EAKT,sBACE,IAAIA,EAASnxB,KAAK+vB,iBAElB,OADKoB,IAAQnxB,KAAK+vB,iBAAmBoB,EAASnxB,KAAKuxB,gBAAgB,EAAAtuB,YAAY0G,UACxEwnB,EAKT,mBACE,IAAIA,EAASnxB,KAAKgwB,cAElB,OADKmB,IAAQnxB,KAAKgwB,cAAgBmB,EAASnxB,KAAKuxB,gBAAgB,EAAAtuB,YAAY2G,OACrEunB,EAKT,qBACE,IAAIA,EAASnxB,KAAKiwB,gBAElB,OADKkB,IAAQnxB,KAAKiwB,gBAAkBkB,EAASnxB,KAAKuxB,gBAAgB,EAAAtuB,YAAY4G,SACvEsnB,EAKT,sBACE,IAAIA,EAASnxB,KAAKkwB,iBAElB,OADKiB,IAAQnxB,KAAKkwB,iBAAmBiB,EAASnxB,KAAKuxB,gBAAgB,EAAAtuB,YAAY6G,UACxEqnB,EAKT,sBACE,IAAIA,EAASnxB,KAAKmwB,iBAElB,OADKgB,IAAQnxB,KAAKmwB,iBAAmBgB,EAASnxB,KAAKuxB,gBAAgB,EAAAtuB,YAAY8G,UACxEonB,EAKT,oBACE,IAAIA,EAASnxB,KAAKowB,eAElB,OADKe,IAAQnxB,KAAKowB,eAAiBe,EAASnxB,KAAKuxB,gBAAgB,EAAAtuB,YAAYiH,QACtEinB,EAKT,uBACE,IAAIA,EAASnxB,KAAKqwB,kBAElB,OADKc,IAAQnxB,KAAKqwB,kBAAoBc,EAASnxB,KAAKuxB,gBAAgB,EAAAtuB,YAAY+G,WACzEmnB,EAKT,yBACE,IAAIA,EAASnxB,KAAKswB,oBAElB,OADKa,IAAQnxB,KAAKswB,oBAAsBa,EAASnxB,KAAKuxB,gBAAgB,EAAAtuB,YAAYgH,cAC3EknB,EAKT,0BACE,IAAIA,EAASnxB,KAAKuwB,qBAElB,OADKY,IAAQnxB,KAAKuwB,qBAAuBY,EAASnxB,KAAKuxB,gBAAgB,EAAAtuB,YAAYkH,cAC5EgnB,EAKT,yBACE,IAAIA,EAASnxB,KAAKwwB,oBAElB,OADKW,IAAQnxB,KAAKwwB,oBAAsBW,EAASnxB,KAAKuxB,gBAAgB,EAAAtuB,YAAYmH,aAC3E+mB,EAOT,aACE,OAAOnxB,KAAKsuB,eAAetgB,IAAI,EAAA/K,YAAYiD,UAI7C,UAAUoW,GACR,IAAI0R,EAAUhuB,KAAKguB,QACnB,IAAK,IAAI3tB,EAAI,EAAGA,EAAI2tB,EAAQ5gB,SAAU/M,EAAG,CACvC,IAAIoM,EAASuhB,EAAQ3tB,GACrB,GAAIoM,EAAO6P,cAAgBA,EAAc,OAAO7P,EAAOS,KAEzD,OAAO,KAIT,mBAAmBskB,EAAoBC,EAAaC,EAASC,GAO3D1mB,OAAO0mB,EAAe,GAAK,IAC3B,EAAAC,SAASD,EAAaH,EAAQC,GAC9B,EAAAG,SAAS,EAAGJ,EAAQC,EAAS,GAC7B,EAAAG,SAASF,EAAIF,EAAQC,EAAS,GAC9B,EAAAG,SAASD,EAAaH,EAAQC,EAAS,IAIzC,wBACE,OAAO,GAIT,8BAEE7wB,EAEA2S,EAAqB,EAAAlR,YAAY0W,MAEjC,IAAIlN,EAAQ7L,KAAK0wB,aAAa7kB,MAC9B,OAAO,EAAA6C,KAAKmjB,0BACV,EAAAnjB,KAAKG,2BAA2BjO,EAAMiL,GACtC,KAAM0H,EAAO,KAAM,KAAM1H,GAK7B,0BAEEjL,EAEA2S,EAAqB,EAAAlR,YAAY0W,MAEjC,IAAIlN,EAAQ7L,KAAK0wB,aAAa7kB,MAC1ByM,EAAa,EAAA5J,KAAKG,2BAA2BjO,EAAMiL,GACvD,OAAO,EAAA6C,KAAKojB,sBACVxZ,EACA,KAAM/E,EAAO,KACb,EAAA7E,KAAKqjB,kBAAkBlmB,GACvBA,GAQJ,8BAEEjL,EAEA2S,EAAqB,EAAAlR,YAAY0W,MAEjC,IAAIlN,EAAQ7L,KAAK0wB,aAAa7kB,MAC1B8J,EAAY3V,KAAKywB,qBAUrB,OATK9a,IACH3V,KAAKywB,qBAAuB9a,EAAY,EAAAjH,KAAKsjB,mBAAmB,GAC9D,EAAAtjB,KAAKujB,gBACH,EAAAvjB,KAAKW,qBAAqB,EAAApM,YAAY2B,MAAOiH,GAC7C,MAAM,EAAOA,GAEf,MAAM,EAAOA,IAGV,EAAA6C,KAAKwjB,0BACV,EAAAxjB,KAAKG,2BAA2BjO,EAAMiL,GACtC,KAAM0H,EAAO,KAAMoC,EAAW,KAAM,EAAgB9J,GAKxD,+BAEEjL,EAEA2S,EAAqB,EAAAlR,YAAY0W,MAEjC,IAAIlN,EAAQ7L,KAAK0wB,aAAa7kB,MAC9B,OAAO,EAAA6C,KAAKyjB,2BACV,EAAAzjB,KAAKG,2BAA2BjO,EAAMiL,GACtC,KAAM0H,EAAO,GAAI1H,GAKrB,mBAEEjL,EAEA+U,EAEAyc,EAAkBpyB,KAAK4wB,WAEvBrd,EAAqB,EAAAlR,YAAY0W,KAEjCsZ,EAAiCzG,EAAe7S,MAEhD,OAAO,IAAIuZ,EACT1xB,EACA,IAAI2xB,EACF3xB,EACAwxB,EACApyB,KAAKwyB,8BAA8B5xB,EAAM2S,GACzC8e,GAEF,KACA1c,GAKJ,wBAAwB5E,GACtB,IAAIwd,EAAwBvuB,KAAKuuB,sBACjC,OAAOA,EAAsBvgB,IAAI+C,GAC7B9F,OAAOsjB,EAAsBrtB,IAAI6P,IACjC,KAIN,aACE,IAAI/Q,KAAKouB,YAAT,CACApuB,KAAKouB,aAAc,EAEnB,IAAIL,EAAU/tB,KAAK+tB,QAGnB/tB,KAAKyyB,mBAAmB,EAAAxvB,YAAYE,GAAI,EAAAuvB,KAAKvvB,IAC7CnD,KAAKyyB,mBAAmB,EAAAxvB,YAAYG,IAAK,EAAAsvB,KAAKtvB,KAC9CpD,KAAKyyB,mBAAmB,EAAAxvB,YAAYI,IAAK,EAAAqvB,KAAKrvB,KAC9CrD,KAAKyyB,mBAAmB,EAAAxvB,YAAYK,IAAK,EAAAovB,KAAKpvB,KAC9CtD,KAAKyyB,mBAAmB,EAAAxvB,YAAYM,MAAOwqB,EAAQ4E,WACnD3yB,KAAKyyB,mBAAmB,EAAAxvB,YAAYO,GAAI,EAAAkvB,KAAKlvB,IAC7CxD,KAAKyyB,mBAAmB,EAAAxvB,YAAYQ,IAAK,EAAAivB,KAAKjvB,KAC9CzD,KAAKyyB,mBAAmB,EAAAxvB,YAAYS,IAAK,EAAAgvB,KAAKhvB,KAC9C1D,KAAKyyB,mBAAmB,EAAAxvB,YAAYU,IAAK,EAAA+uB,KAAK/uB,KAC9C3D,KAAKyyB,mBAAmB,EAAAxvB,YAAYW,MAAOmqB,EAAQ6E,WACnD5yB,KAAKyyB,mBAAmB,EAAAxvB,YAAYY,KAAM,EAAA6uB,KAAK7uB,MAC/C7D,KAAKyyB,mBAAmB,EAAAxvB,YAAYa,IAAK,EAAA4uB,KAAK5uB,KAC9C9D,KAAKyyB,mBAAmB,EAAAxvB,YAAYc,IAAK,EAAA2uB,KAAK3uB,KAC9C/D,KAAKyyB,mBAAmB,EAAAxvB,YAAY2B,MAAO,EAAA8tB,KAAKG,MAChD7yB,KAAKyyB,mBAAmB,EAAAxvB,YAAY4B,OAAQ,EAAA6tB,KAAK3uB,KACjD/D,KAAKyyB,mBAAmB,EAAAxvB,YAAY6B,QAAS,EAAA4tB,KAAK7uB,MAClD7D,KAAK4wB,WAAWkC,IAAI,EAAA7vB,YAAY+B,OAAQ,IAAI+tB,EAC1C,EAAA9vB,YAAY+B,OACZhF,KAAK4wB,WACL5wB,KAAKgzB,0BAA0B,EAAA/vB,YAAY+B,OAAQ,EAAA3C,YAAYub,OAAS,EAAAvb,YAAY4wB,SACpFrH,EAAexS,UAEjBpZ,KAAK4wB,WAAWkC,IAAI,EAAA7vB,YAAYgC,QAAS,IAAI8tB,EAC3C,EAAA9vB,YAAYgC,QACZjF,KAAK4wB,WACL5wB,KAAKgzB,0BAA0B,EAAA/vB,YAAYgC,QAAS,EAAA5C,YAAYub,OAAS,EAAAvb,YAAY4wB,SACrFrH,EAAexS,UAEjBpZ,KAAK4wB,WAAWkC,IAAI,EAAA7vB,YAAYiC,QAAS,IAAI6tB,EAC3C,EAAA9vB,YAAYiC,QACZlF,KAAK4wB,WACL5wB,KAAKgzB,0BAA0B,EAAA/vB,YAAYiC,QAAS,EAAA7C,YAAYub,OAAS,EAAAvb,YAAY4wB,SACrFrH,EAAexS,UAEjBpZ,KAAK4wB,WAAWkC,IAAI,EAAA7vB,YAAYkC,SAAU,IAAI4tB,EAC5C,EAAA9vB,YAAYkC,SACZnF,KAAK4wB,WACL5wB,KAAKgzB,0BAA0B,EAAA/vB,YAAYkC,SAAU,EAAA9C,YAAYub,OAAS,EAAAvb,YAAY4wB,SACtFrH,EAAexS,UAMjBpZ,KAAKyyB,mBAAmB,EAAAxvB,YAAYe,KAAM,EAAA0uB,KAAK1uB,MAC/ChE,KAAKyyB,mBAAmB,EAAAxvB,YAAYgB,OAAQ,EAAAyuB,KAAKzuB,QAGjDjE,KAAKkzB,wBAAwB,EAAAjwB,YAAYyC,WAAY,EAAAgtB,KAAKrvB,IACxDomB,QAAQsE,EAAQoF,SAAW,EAAA5oB,OAAO6oB,OAAS,EAAA7oB,OAAO8oB,SACpDrzB,KAAKkzB,wBAAwB,EAAAjwB,YAAY2C,cAAe,EAAA8sB,KAAK7uB,KAC3D4lB,QAAQsE,EAAQuF,SAAW,EAAI,EAAG,IACpCtzB,KAAKkzB,wBAAwB,EAAAjwB,YAAY4C,gBAAiB,EAAA6sB,KAAKrvB,IAC7DomB,QAAQsE,EAAQwF,WAAY,IAC9BvzB,KAAKkzB,wBAAwB,EAAAjwB,YAAY6C,eAAgB,EAAA4sB,KAAKrvB,IAC5DomB,QAAQsE,EAAQyF,UAAW,IAC7BxzB,KAAKkzB,wBAAwB,EAAAjwB,YAAY8C,mBAAoB,EAAA2sB,KAAKrvB,IAChEomB,QAAQsE,EAAQ0F,kBAAmB,IACrCzzB,KAAKkzB,wBAAwB,EAAAjwB,YAAY+C,iBAAkB,EAAA0sB,KAAKrvB,IAC9DomB,QAAQsE,EAAQ2F,gBAAiB,IACnC1zB,KAAKkzB,wBAAwB,EAAAjwB,YAAYgD,qBAAsB,EAAAysB,KAAKrvB,IAClEomB,QAAQsE,EAAQ4F,eAAgB,IAGlC3zB,KAAKkzB,wBAAwB,EAAAjwB,YAAYkD,2BAA4B,EAAAusB,KAAK7uB,KACxE4lB,QAAQsE,EAAQ6F,WAAW,GAA0B,EAAI,EAAG,IAC9D5zB,KAAKkzB,wBAAwB,EAAAjwB,YAAYmD,4BAA6B,EAAAssB,KAAK7uB,KACzE4lB,QAAQsE,EAAQ6F,WAAW,GAA2B,EAAI,EAAG,IAC/D5zB,KAAKkzB,wBAAwB,EAAAjwB,YAAYoD,4BAA6B,EAAAqsB,KAAK7uB,KACzE4lB,QAAQsE,EAAQ6F,WAAW,GAA2B,EAAI,EAAG,IAC/D5zB,KAAKkzB,wBAAwB,EAAAjwB,YAAYqD,wBAAyB,EAAAosB,KAAK7uB,KACrE4lB,QAAQsE,EAAQ6F,WAAW,GAAuB,EAAI,EAAG,IAC3D5zB,KAAKkzB,wBAAwB,EAAAjwB,YAAYsD,iBAAkB,EAAAmsB,KAAK7uB,KAC9D4lB,QAAQsE,EAAQ6F,WAAW,IAAgB,EAAI,EAAG,IACpD5zB,KAAKkzB,wBAAwB,EAAAjwB,YAAYuD,oBAAqB,EAAAksB,KAAK7uB,KACjE4lB,QAAQsE,EAAQ6F,WAAW,IAAmB,EAAI,EAAG,IACvD5zB,KAAKkzB,wBAAwB,EAAAjwB,YAAYwD,+BAAgC,EAAAisB,KAAK7uB,KAC5E4lB,QAAQsE,EAAQ6F,WAAW,IAA8B,EAAI,EAAG,IAClE5zB,KAAKkzB,wBAAwB,EAAAjwB,YAAYyD,uBAAwB,EAAAgsB,KAAK7uB,KACpE4lB,QAAQsE,EAAQ6F,WAAW,KAAsB,EAAI,EAAG,IAC1D5zB,KAAKkzB,wBAAwB,EAAAjwB,YAAY0D,4BAA6B,EAAA+rB,KAAK7uB,KACzE4lB,QAAQsE,EAAQ6F,WAAW,KAA2B,EAAI,EAAG,IAC/D5zB,KAAKkzB,wBAAwB,EAAAjwB,YAAY2D,wBAAyB,EAAA8rB,KAAK7uB,KACrE4lB,QAAQsE,EAAQ6F,WAAW,KAAuB,EAAI,EAAG,IAG3D,IAAIC,EAAgB,IAAIhsB,MACpBisB,EAAgB,IAAI9rB,IACpB+rB,EAAoB,IAAI/rB,IACxBgsB,EAAgB,IAAInsB,MACpBosB,EAAmB,IAAIpsB,MAG3B,IAAK,IAAIxH,EAAI,EAAG8N,EAAInO,KAAKguB,QAAQ5gB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACnD,IAAIoM,EAASzM,KAAKguB,QAAQ3tB,GACtB6zB,EAAO,IAAIrD,EAAK7wB,KAAMyM,GAC1BzM,KAAKquB,YAAYjgB,IAAI8lB,EAAKpD,aAAcoD,GACxC,IAAIhhB,EAAazG,EAAOyG,WACxB,IAAK,IAAIihB,EAAI,EAAG7zB,EAAI4S,EAAW9F,OAAQ+mB,EAAI7zB,IAAK6zB,EAAG,CACjD,IAAItgB,EAAYX,EAAWihB,GAC3B,OAAQtgB,EAAUlF,MAChB,KAAK,EAAAL,SAASsP,OACZ5d,KAAKo0B,kBAAmCvgB,EAAWqgB,EAAMJ,EAAeC,GACxE,MAEF,KAAK,EAAAzlB,SAAS0P,cACZhe,KAAKq0B,wBAAgDxgB,EAAWqgB,EAAMF,EAAeC,GACrF,MAEF,KAAK,EAAA3lB,SAASoQ,OACZ1e,KAAKs0B,kBAAmCzgB,EAAWqgB,EAAML,EAAeC,GACxE,MAEF,KAAK,EAAAxlB,SAAS+Q,SACZrf,KAAKu0B,oBAAuC1gB,EAAWqgB,GACvD,MAEF,KAAK,EAAA5lB,SAAS8O,iBACZpd,KAAKw0B,gBAAkC3gB,EAAWqgB,EAAMF,EAAeC,GACvE,MAEF,KAAK,EAAA3lB,SAASkP,gBACZxd,KAAKy0B,eAAgC5gB,EAAWqgB,GAChD,MAEF,KAAK,EAAA5lB,SAASiQ,oBACZve,KAAK00B,mBAAwC7gB,EAAWqgB,GACxD,MAEF,KAAK,EAAA5lB,SAASqQ,qBACZ3e,KAAK20B,oBAA0C9gB,EAAWqgB,EAAMF,GAChE,MAEF,KAAK,EAAA1lB,SAASuQ,qBACZ7e,KAAK40B,oBAA0C/gB,EAAWqgB,EAAMF,EAAeC,GAC/E,MAEF,KAAK,EAAA3lB,SAAS6Q,gBACZnf,KAAK60B,yBAA0ChhB,EAAWqgB,KASlE,IAAK,IAAIY,EAAQC,SAAShB,GAAoB1zB,EAAI,EAAG8N,EAAI2mB,EAAM1nB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACjF,IAAI6zB,EAAOY,EAAMz0B,GACb20B,EAAc/pB,OAAO8oB,EAAkB7yB,IAAIgzB,IAC/C,IAAK,IAAIC,EAAI,EAAG7zB,EAAI00B,EAAY5nB,OAAQ+mB,EAAI7zB,IAAK6zB,EAAG,CAClD,IAAIc,EAAanY,UAAUkY,EAAYb,IACnCe,EAAcl1B,KAAKm1B,kBAAkBF,EAAW5J,YAAa4J,EAAW3J,gBACvE4J,EAOLhB,EAAKkB,iBAAiBF,GANpBl1B,KAAKwmB,MACH,EAAAjb,eAAe8pB,iBACfJ,EAAWxJ,YAAY5f,MAAOopB,EAAWxJ,YAAYnqB,QAS7D,IAAK,IAAIjB,EAAI,EAAG8N,EAAI0lB,EAAczmB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACpD,IAAIi1B,EAAezB,EAAcxzB,GAC7B8qB,EAAkBmK,EAAanK,gBAC/BC,EAAoBkK,EAAalK,kBACrC,GAAIA,EAAmB,CACrB,IAAImK,EAAUv1B,KAAKw1B,cACjBpK,EAAkBle,KAClBooB,EAAajK,YACbiK,EAAahK,eACbwI,GAEEyB,EACFD,EAAapK,UAAU4H,IACrB3H,EAAgBje,KAChBqoB,EACApK,GAIFnrB,KAAKwmB,MACH,EAAAjb,eAAekqB,kCACfrK,EAAkBvf,MAAOypB,EAAajK,YAAaD,EAAkBle,UAGpE,CACL,IAAIgoB,EAAcl1B,KAAKm1B,kBAAkBG,EAAajK,YAAaiK,EAAahK,gBAChF,GAAI4J,EAAa,CACf,IAAIhK,EAAYoK,EAAapK,UACzB1W,EAAY2W,EAAgBje,KAChCge,EAAU4H,IACRte,EACA0gB,EAAYQ,oBACVlhB,EACA0W,EACAC,GAEFA,QAGFlgB,QAAO,IAOb,IAAK,IAAI6pB,EAAQC,SAASjB,GAAgBzzB,EAAI,EAAG8N,EAAI2mB,EAAM1nB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC7E,IAAI6zB,EAAOpX,UAAUgY,EAAMz0B,IACvBX,EAAUuL,OAAO6oB,EAAc5yB,IAAIgzB,IAEvC,IAAK,IAAIyB,EAAcZ,SAASr1B,GAAUy0B,EAAI,EAAG7zB,EAAIq1B,EAAYvoB,OAAQ+mB,EAAI7zB,IAAK6zB,EAAG,CACnF,IAAIyB,EAAa9Y,UAAU6Y,EAAYxB,IACnC0B,EAAe5qB,OAAOvL,EAAQwB,IAAI00B,IAClCphB,EAAYqhB,EAAa1K,gBAAgBje,KACzCme,EAAcwK,EAAaxK,YAC/B,GAAIA,EAAa,CACf,IAAIkK,EAAUv1B,KAAKw1B,cACjBhhB,EACA6W,EACApgB,OAAO4qB,EAAavK,gBACpBwI,GAEEyB,EACFrB,EAAK4B,aAAaF,EAAYL,GAE9Bv1B,KAAKwmB,MACH,EAAAjb,eAAekqB,kCACfI,EAAa1K,gBAAgBtf,MAC7Bwf,EAAa7W,OAGZ,CACL,IAAI+gB,EAAUrB,EAAK6B,aAAavhB,GAChC,GAAI+gB,EACFrB,EAAK4B,aAAaF,EAAYL,OACzB,CACL,IAAIS,EAAgBh2B,KAAKi2B,aAAazhB,GAChB,OAAlBwhB,GAA0BE,EAAkBF,EAAcrnB,MAC5DulB,EAAK4B,aAAaF,EAA6BI,GAE/Ch2B,KAAKwmB,MACH,EAAAjb,eAAekqB,kCACfI,EAAazK,kBAAkBvf,MAC/BqoB,EAAKpD,aAAc+E,EAAazK,kBAAkBle,SAS9DjC,OAAsC,GAA/BjL,KAAKm2B,oBAAoBzE,IAChCzmB,OAAiC,GAA1BjL,KAAKo2B,eAAe1E,IAC3BzmB,OAA0C,GAAnCjL,KAAKq2B,wBAAwB3E,IAGpC1xB,KAAKs2B,qBAAqB,EAAA5D,KAAKvvB,GAAI,EAAAF,YAAY4D,IAC/C7G,KAAKs2B,qBAAqB,EAAA5D,KAAKtvB,IAAK,EAAAH,YAAY6D,KAChD9G,KAAKs2B,qBAAqB,EAAA5D,KAAKrvB,IAAK,EAAAJ,YAAY8D,KAChD/G,KAAKs2B,qBAAqB,EAAA5D,KAAKpvB,IAAK,EAAAL,YAAY+D,KAChDhH,KAAKs2B,qBAAqBvI,EAAQ4E,UAAW,EAAA1vB,YAAYgE,OACzDjH,KAAKs2B,qBAAqB,EAAA5D,KAAKlvB,GAAI,EAAAP,YAAYiE,IAC/ClH,KAAKs2B,qBAAqB,EAAA5D,KAAKjvB,IAAK,EAAAR,YAAYkE,KAChDnH,KAAKs2B,qBAAqB,EAAA5D,KAAKhvB,IAAK,EAAAT,YAAYmE,KAChDpH,KAAKs2B,qBAAqB,EAAA5D,KAAK/uB,IAAK,EAAAV,YAAYoE,KAChDrH,KAAKs2B,qBAAqBvI,EAAQ6E,UAAW,EAAA3vB,YAAYqE,OACzDtH,KAAKs2B,qBAAqB,EAAA5D,KAAK7uB,KAAM,EAAAZ,YAAYsE,MACjDvH,KAAKs2B,qBAAqB,EAAA5D,KAAK5uB,IAAK,EAAAb,YAAYuE,KAChDxH,KAAKs2B,qBAAqB,EAAA5D,KAAK3uB,IAAK,EAAAd,YAAYwE,KAC5CsmB,EAAQ6F,WAAW,KAAe5zB,KAAKs2B,qBAAqB,EAAA5D,KAAK1uB,KAAM,EAAAf,YAAYyE,MACnFqmB,EAAQ6F,WAAW,MAA0B5zB,KAAKs2B,qBAAqB,EAAA5D,KAAKzuB,OAAQ,EAAAhB,YAAY0E,QAGpG,IAAIspB,EAAWjxB,KAAKixB,SACpB,IAAK,IAAI5wB,EAAI,EAAG8N,EAAI6lB,EAAc5mB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACpD,IAAIk2B,EAAgBvC,EAAc3zB,GAC9Bm2B,EAAcvrB,OAAOsrB,EAAcC,aACnCC,EAAcxF,EAASyF,gBAAgBF,EAAY51B,KAAM21B,EAAcnE,QAC3E,GAAKqE,EACL,GAAIF,EAAc5nB,MAAQgd,EAAY0F,gBACpC,GAAIoF,EAAY9nB,MAAQgd,EAAY0F,gBAAiB,CACnD,IAAIsF,EAAgCF,EAChCE,EAAcC,aAAahL,EAAetS,QAC5CtZ,KAAKwmB,MACH,EAAAjb,eAAesrB,wCACfL,EAAY3qB,MAAO8qB,EAAcG,eAAe5pB,MAIlDypB,EAAcC,aAAahL,EAAejS,YAC1C4c,EAAcK,aAAahL,EAAejS,YAE1C3Z,KAAKwmB,MACH,EAAAjb,eAAewrB,+DACf,EAAAjc,MAAMpN,KAAK6oB,EAAcO,eAAejrB,MAAO2qB,EAAY3qB,QAG/D0qB,EAAcI,cAAgBA,OAE9B32B,KAAKwmB,MACH,EAAAjb,eAAeyrB,sCACfR,EAAY3qB,YAGP0qB,EAAc5nB,MAAQgd,EAAYsL,sBACvCR,EAAY9nB,MAAQgd,EAAYsL,oBAClCV,EAAcI,cAAoCF,EAElDz2B,KAAKwmB,MACH,EAAAjb,eAAe2rB,0CACfV,EAAY3qB,QAOpB,IAAK,IAAIxL,EAAI,EAAG8N,EAAI8lB,EAAiB7mB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACvD,IAAIk2B,EAAgBtC,EAAiB5zB,GACjC82B,EAAkBlsB,OAAOsrB,EAAcY,iBAC3C,IAAK,IAAIhD,EAAI,EAAG7zB,EAAI62B,EAAgB/pB,OAAQ+mB,EAAI7zB,IAAK6zB,EAAG,CACtD,IAAIiD,EAAiBD,EAAgBhD,GACjCkD,EAAmBpG,EAASyF,gBAAgBU,EAAex2B,KAAM21B,EAAcnE,QACnF,GAAKiF,EACL,GAAIA,EAAiB1oB,MAAQgd,EAAYsL,oBAAqB,CAC5D,IAAIK,EAAyCD,EACzCE,EAAsBhB,EAAcgB,oBACnCA,IAAqBhB,EAAcgB,oBAAsBA,EAAsB,IAAI1vB,OACxF0vB,EAAoB9pB,KAAK6pB,QAEzBt3B,KAAKwmB,MACH,EAAAjb,eAAeisB,wCACfJ,EAAevrB,QAOvB,IAAK,IAAIxL,EAAI,EAAG8N,EAAI6lB,EAAc5mB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACpD,IAAIk2B,EAAgBvC,EAAc3zB,GAC9Bs2B,EAAgBJ,EAAcI,cAC9BA,GACF32B,KAAKy3B,aAAalB,EAAeI,GAGrC,IAAK,IAAIt2B,EAAI,EAAG8N,EAAI8lB,EAAiB7mB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACvD,IAAIk2B,EAAgBtC,EAAiB5zB,GACjCs2B,EAAgBJ,EAAcI,cAC9BY,EAAsBhB,EAAcgB,oBAKxC,GAJIZ,IACF1rB,QAAQssB,GACRv3B,KAAKy3B,aAAalB,EAAeI,IAE/BY,EAAqB,CACvBtsB,QAAQ0rB,GACR,IAAK,IAAIxC,EAAI,EAAG7zB,EAAIi3B,EAAoBnqB,OAAQ+mB,EAAI7zB,IAAK6zB,EACvDn0B,KAAKy3B,aAAalB,EAAegB,EAAoBpD,KAM3D,CACE,IAAIuD,EAAgB3J,EAAQ2J,cACvBA,IAAeA,EAAgB,IAAI1vB,KACxC,IAAI2vB,EAAS33B,KAAK23B,OACbD,EAAc1pB,IAAI,EAAA/K,YAAYkG,QACjCuuB,EAActpB,IAAI,EAAAnL,YAAYkG,MAC5BwuB,EACI,EAAAC,aAAaC,UACb,EAAAD,aAAazuB,OAGhBuuB,EAAc1pB,IAAI,EAAA/K,YAAYmG,QACjCsuB,EAActpB,IAAI,EAAAnL,YAAYmG,MAC5BuuB,EACI,EAAAC,aAAaE,UACb,EAAAF,aAAaxuB,OAGhBsuB,EAAc1pB,IAAI,EAAA/K,YAAYoG,OACjCquB,EAActpB,IAAI,EAAAnL,YAAYoG,KAC5BsuB,EACI,EAAAC,aAAaG,SACb,EAAAH,aAAavuB,MAGhBquB,EAAc1pB,IAAI,EAAA/K,YAAYkF,OACjCuvB,EAActpB,IAAI,EAAAnL,YAAYkF,KAAM,EAAAlF,YAAYoF,YAE7CqvB,EAAc1pB,IAAI,EAAA/K,YAAYmF,QACjCsvB,EAActpB,IAAI,EAAAnL,YAAYmF,MAAO,EAAAnF,YAAYqF,aAGnD,IAAK,IAAIwsB,EAAQC,SAAS2C,GAAgBr3B,EAAI,EAAG8N,EAAI2mB,EAAM1nB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC7E,IAAI23B,EAAQlb,UAAUgY,EAAMz0B,IACxBO,EAAOwW,WAAmBsgB,EAAcx2B,IAAI82B,IAEhD,GADA/sB,OAAe,MAARrK,IACFA,EAAKwM,OAAQ,CAChBpN,KAAKsuB,eAAe2J,OAAOD,GAC3B,SAEF,IAAIE,EAAYt3B,EAAK0M,WAAW,GAChC,GAAI4qB,GAAa,IAAeA,GAAa,GAC3Cl4B,KAAKkzB,wBAAwB8E,EAAO,EAAAtF,KAAKrvB,IAAKomB,QAAa0O,SAASv3B,EAAM,UACrE,CACL,IAAI0tB,EAAiBtuB,KAAKsuB,eAC1B,IAAIA,EAAetgB,IAAIpN,GAGrB,MAAM,IAAIsI,MAAM,2BAA6BtI,GAF7C0tB,EAAelgB,IAAI4pB,EAAO/sB,OAAOqjB,EAAeptB,IAAIN,OAU5D,IAAK,IAAIw3B,EAAUC,WAAWr4B,KAAKquB,aAAchuB,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACtF,IAAI6zB,EAAOpX,UAAUsb,EAAQ/3B,IACzB6zB,EAAKznB,OAAOuP,YAAc,EAAAvN,WAAW6pB,YACvCt4B,KAAKu4B,kBAAkBrE,KAMrB,aAAaqC,EAA+BI,GAElD,IAAI6B,EAAsBjC,EAAckC,gBACxC,GAAID,EACF,OAAG,CACD,IAAIE,EAAsB/B,EAAc8B,gBACxC,GAAIC,EACF,IAAK,IAAIN,EAAUC,WAAWG,GAAsBrE,EAAI,EAAG7zB,EAAI83B,EAAQhrB,OAAQ+mB,EAAI7zB,IAAK6zB,EAAG,CACzF,IAAIwE,EAAaP,EAAQjE,GACzB,IACGwE,EAAWC,MAAM,EAAAv2B,YAAY6Y,YAAc,EAAA7Y,YAAYof,UACxDiX,EAAoB1qB,IAAI2qB,EAAW/3B,MACnC,CACA,IAAIi4B,EAAa5tB,OAAOytB,EAAoBx3B,IAAIy3B,EAAW/3B,OAC3D,GACE+3B,EAAWhqB,MAAQgd,EAAYmN,oBAC/BD,EAAWlqB,MAAQgd,EAAYmN,mBAC/B,CACA,IAAIC,EAAgCJ,EAChCK,EAAgCH,EAC/BE,EAAWE,iBAAiBD,IAC/Bh5B,KAAKk5B,aACH,EAAA3tB,eAAe4tB,4DACfJ,EAAWjC,eAAejrB,MAAOmtB,EAAWlC,eAAejrB,OAG/DgtB,EAAWzqB,IAAI,EAAA/L,YAAY+2B,SAC3B,IAAIC,EAAYL,EAAWK,UACtBA,IAAWL,EAAWK,UAAYA,EAAY,IAAItxB,KACvDsxB,EAAUvG,IAAuB6F,GACjC,IAAIW,EAAsBN,EAAWO,UACrC,GAAID,EACF,IAAK,IAAIlB,EAAUC,WAAWiB,GAAsBtU,EAAI,EAAGC,EAAImT,EAAQhrB,OAAQ4X,EAAIC,IAAKD,EAAG,CAChEoT,EAAQpT,GACd5W,IAAI,EAAA/L,YAAY+2B,eAGlC,GACLT,EAAWhqB,MAAQgd,EAAY6N,oBAC/BX,EAAWlqB,MAAQgd,EAAY6N,mBAC/B,CACA,IAAIC,EAAkCd,EAClCe,EAAkCb,EACjCY,EAAaR,iBAAiBS,IACjC15B,KAAKk5B,aACH,EAAA3tB,eAAe4tB,4DACfM,EAAa3C,eAAejrB,MAAO6tB,EAAa5C,eAAejrB,OAGnE6tB,EAAatrB,IAAI,EAAA/L,YAAY+2B,SAC7B,IAAIO,EAAaD,EAAaE,gBAC9B,GAAID,EAAY,CACdA,EAAWvrB,IAAI,EAAA/L,YAAY+2B,SAC3B,IAAIS,EAAaJ,EAAaG,gBAC9B,GAAIC,EAAY,CACd,IAAIR,EAAYM,EAAWN,UACtBA,IAAWM,EAAWN,UAAYA,EAAY,IAAItxB,KACvDsxB,EAAUvG,IAAI+G,GAEhB,IAAIC,EAAsBH,EAAWJ,UACrC,GAAIO,EACF,IAAK,IAAI1B,EAAUC,WAAWyB,GAAsB9U,EAAI,EAAGC,EAAImT,EAAQhrB,OAAQ4X,EAAIC,IAAKD,EAAG,CAChEoT,EAAQpT,GACd5W,IAAI,EAAA/L,YAAY+2B,UAIzC,IAAIW,EAAaL,EAAaM,gBAC9B,GAAmB,OAAfD,GAAwD,OAAjCN,EAAaO,gBAA0B,CAChED,EAAW3rB,IAAI,EAAA/L,YAAY+2B,SAC3B,IAAIa,EAAaR,EAAaO,gBAC9B,GAAIC,EAAY,CACd,IAAIZ,EAAYU,EAAWV,UACtBA,IAAWU,EAAWV,UAAYA,EAAY,IAAItxB,KACvDsxB,EAAUvG,IAAImH,GAEhB,IAAIC,EAAsBH,EAAWR,UACrC,GAAIW,EACF,IAAK,IAAI9B,EAAUC,WAAW6B,GAAsBlV,EAAI,EAAGC,EAAImT,EAAQhrB,OAAQ4X,EAAIC,IAAKD,EAAG,CAChEoT,EAAQpT,GACd5W,IAAI,EAAA/L,YAAY+2B,gBAKzCp5B,KAAKk5B,aACH,EAAA3tB,eAAe4uB,uBACfxB,EAAW7B,eAAejrB,MAC1BgtB,EAAW/B,eAAejrB,QAMpC,IAAIuuB,EAAgBzD,EAAcA,cAClC,IAAKyD,EAAe,MACpBzD,EAAgByD,GAMd,QAAQx5B,EAAc+N,GAC5B,IAAI4mB,EAAUv1B,KAAKi2B,aAAar1B,GAChC,IAAK20B,EAAS,MAAM,IAAIrsB,MAAM,uCAAyCtI,GACvE,GAAI20B,EAAQ5mB,MAAQA,EAAM,MAAMzF,MAAM,uCAAyCtI,GAC/E,OAAO20B,EAID,aAAa30B,GACnB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAM+qB,EAAY0F,iBAC3CgJ,EAAWr6B,KAAKixB,SAASqJ,aAA6Br4B,EAAW,MACrE,IAAKo4B,EAAU,MAAM,IAAInxB,MAAM,mCAAqCtI,GACpE,OAAOy5B,EAID,eAAez5B,GACrB,IAAIqB,EAAYjC,KAAKi2B,aAAar1B,GAClC,OAAKqB,GAAaA,EAAU0M,MAAQgd,EAAYmN,mBACzC94B,KAAKixB,SAASsJ,gBAAmCt4B,EAAW,MADQ,KAKrE,gBAAgBrB,EAAckO,EAA+B,MACnE,IAAI7M,EAA+BjC,KAAKJ,QAAQgB,EAAM+qB,EAAYmN,oBAC9DuB,EAAWr6B,KAAKixB,SAASsJ,gBAAgBt4B,EAAW6M,GACxD,IAAKurB,EAAU,MAAM,IAAInxB,MAAM,sCAAwCtI,GACvE,OAAOy5B,EAID,kBAAkBnG,GACxB,IAAIx0B,EAAUw0B,EAAKx0B,QACnB,GAAIA,EAEF,IAAK,IAAI04B,EAAUC,WAAW34B,GAAUy0B,EAAI,EAAG7zB,EAAI83B,EAAQhrB,OAAQ+mB,EAAI7zB,IAAK6zB,EAAG,CAC7E,IAAIoB,EAAUzY,UAAUsb,EAAQjE,IAChCn0B,KAAKw6B,iBAAiBjF,GAG1B,IAAIkF,EAAcvG,EAAKuG,YACvB,GAAIA,EACF,IAAK,IAAIp6B,EAAI,EAAG8N,EAAIssB,EAAYrtB,OAAQ/M,EAAI8N,IAAK9N,EAC/CL,KAAKu4B,kBAAkBkC,EAAYp6B,IAMjC,iBAAiBk1B,GAEvB,OADAA,EAAQnnB,IAAI,EAAA/L,YAAYq4B,eAChBnF,EAAQ5mB,MACd,KAAKgd,EAAY0F,gBAAiB,CAChC,IAAIoH,EAAmClD,EAASkD,gBAChD,GAAIA,EAEF,IAAK,IAAIL,EAAUC,WAAWI,GAAkBp4B,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACrF,IAAIs6B,EAAS7d,UAAUsb,EAAQ/3B,IAC/BL,KAAKw6B,iBAAiBG,GAG1B,MAEF,KAAKhP,EAAY6N,mBAAoB,CACnC,IAAIoB,EAAuCrF,EACvCqE,EAAkBgB,EAAkBhB,gBACpCA,GAAiB55B,KAAKw6B,iBAAiBZ,GAC3C,IAAII,EAAkBY,EAAkBZ,gBACpCA,GAAiBh6B,KAAKw6B,iBAAiBR,GAC3C,MAEF,KAAKrO,EAAYkP,SACjB,KAAKlP,EAAYvQ,SACjB,KAAKuQ,EAAYmP,MACjB,KAAKnP,EAAY3Q,MAAO/P,QAAO,GAEjC,IAAI8vB,EAAgBxF,EAAQ7hB,QAC5B,GAAIqnB,EAEF,IAAK,IAAI3C,EAAUC,WAAW0C,GAAgB16B,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACnF,IAAIs6B,EAAS7d,UAAUsb,EAAQ/3B,IAC/BL,KAAKw6B,iBAAiBG,IAMpB,mBAAmB/5B,EAAc8O,GACvC,IAAI6lB,EAAU,IAAIxC,EAChBnyB,EACAZ,KAAK4wB,WACL5wB,KAAKgzB,0BAA0BpyB,EAAM,EAAAyB,YAAYub,QACjDgO,EAAexS,SAEjBmc,EAAQyF,QAAQtrB,GAChB1P,KAAK4wB,WAAWkC,IAAIlyB,EAAM20B,GAIpB,qBAAqB7lB,EAAYurB,GACvC,IAAIxM,EAAiBzuB,KAAKyuB,eAC1BxjB,QAAQyE,EAAKwrB,iBAAmBzM,EAAezgB,IAAI0B,IACnD,IAAI6lB,EAAUv1B,KAAKi2B,aAAagF,GAChC,GAAK1F,EAAL,CACAtqB,OAAOsqB,EAAQ5mB,MAAQgd,EAAY0F,iBACnC,IAAI8J,EAAen7B,KAAKixB,SAASqJ,aAA6B/E,EAAS,MAClE4F,IACLA,EAAaC,YAAc1rB,EAC3B+e,EAAergB,IAAIsB,EAAMyrB,KAI3B,wBAAwBv6B,EAAc8O,EAAYpO,GAChD2J,OAAOyE,EAAK2rB,GAAG,IACf,IAAIC,EAAS,IAAIC,EACf36B,EACAZ,KAAK4wB,WACLhF,EAAe7S,KACf/Y,KAAKw7B,8BAA8B56B,EAAM,EAAAyB,YAAY+d,MAAQ,EAAA/d,YAAYub,SAE3E0d,EAAOG,wBAAwBn6B,EAAOoO,GACtC1P,KAAK4wB,WAAWkC,IAAIlyB,EAAM06B,GAIpB,sBAAsB16B,EAAc8O,EAAYpO,GACtD2J,OAAOyE,EAAK2rB,GAAG,IACf,IAAIC,EAAS,IAAIC,EACf36B,EACAZ,KAAK4wB,WACLhF,EAAe7S,KACf/Y,KAAKw7B,8BAA8B56B,EAAM,EAAAyB,YAAY+d,MAAQ,EAAA/d,YAAYub,SAE3E0d,EAAOI,sBAAsBp6B,EAAOoO,GACpC1P,KAAK4wB,WAAWkC,IAAIlyB,EAAM06B,GAI5B,aAAa16B,EAAc20B,GACzB,IAAIjH,EAAiBtuB,KAAKsuB,eAC1B,GAAIA,EAAetgB,IAAIpN,GAAO,CAC5B,IAAI+6B,EAAW1wB,OAAOqjB,EAAeptB,IAAIN,IAMzC,GAAI+6B,IAAapG,EAAS,CACxB,IAAIqG,EAASC,EAASF,EAAUpG,GAChC,IAAKqG,EAcH,OAbI1F,EAAkByF,EAAShtB,MAC7B3O,KAAKk5B,aACH,EAAA3tB,eAAe4uB,uBACf5E,EAAQuB,eAAejrB,MACL8vB,EAAU5qB,YAAYnQ,KAAKiL,MAC7CjL,GAGFZ,KAAKwmB,MACH,EAAAjb,eAAe4uB,uBACf5E,EAAQuB,eAAejrB,MAAOjL,GAG3B20B,EAETA,EAAUqG,GAId,OADAtN,EAAelgB,IAAIxN,EAAM20B,GAClBA,EAIT,aAAa30B,GACX,IAAIk7B,EAAW97B,KAAKsuB,eACpB,OAAIwN,EAAS9tB,IAAIpN,GAAcqK,OAAO6wB,EAAS56B,IAAIN,IAC5C,KAIT,cAAcA,GACZ,IAAIk7B,EAAW97B,KAAKsuB,eACpB,GAAIwN,EAAS9tB,IAAIpN,GAAO,OAAOqK,OAAO6wB,EAAS56B,IAAIN,IACnD,MAAM,IAAIsI,MAAM,kBAIV,kBAENmiB,EAEAC,GAEA,IAAI+C,EAAcruB,KAAKquB,YACvB,OAAOA,EAAYrgB,IAAIqd,GACnBpgB,OAAOojB,EAAYntB,IAAImqB,IACvBgD,EAAYrgB,IAAIsd,GACdrgB,OAAOojB,EAAYntB,IAAIoqB,IACvB,KAIA,cAENpW,EAEAmW,EAEAC,EAEAwI,GAEA,OAAG,CACD,IAAIoB,EAAcl1B,KAAKm1B,kBAAkB9J,EAAaC,GACtD,IAAK4J,EAAa,OAAO,KAGzB,IAAIK,EAAUL,EAAY6G,aAAa7mB,GACvC,GAAIqgB,EAAS,OAAOA,EAGpB,GAAIzB,EAAc9lB,IAAIknB,GAAc,CAClC,IAAI8G,EAAoB/wB,OAAO6oB,EAAc5yB,IAAIg0B,IACjD,GAAI8G,EAAkBhuB,IAAIkH,GAAc,CACtC,IAAI2gB,EAAe5qB,OAAO+wB,EAAkB96B,IAAIgU,IAC5C+mB,EAA0BpG,EAAaxK,YAC3C,GAAI4Q,EAAyB,CAC3B/mB,EAAc2gB,EAAa1K,gBAAgBje,KAC3Cme,EAAc4Q,EACd3Q,EAAiBrgB,OAAO4qB,EAAavK,gBACrC,SAGA,GADAiK,EAAUL,EAAYa,aAAaF,EAAa1K,gBAAgBje,MAC5DqoB,EAAS,OAAOA,GAI1B,MAEF,OAAO,KAID,gBAENjiB,EAEA4oB,GAEA,IAAI3oB,EAAQqY,EAAe7S,KAC3B,GAAIzF,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACjD,IAAIqf,EAAYpM,EAAWjT,GACvBsO,EAAO,EAAAJ,cAAcwB,SAAS2P,EAAU9e,MACxCoY,EAAO4S,EAAeuQ,SAASxtB,GAC/BqK,IACEA,GAAQ4S,EAAexS,QACnB8iB,EAAgBljB,GAAU0G,EAAU7T,MAAMY,OAAO2vB,UAMrD7oB,GAASyF,EALThZ,KAAKwmB,MACH,EAAAjb,eAAe8wB,8BACf3c,EAAU7T,MAAO6T,EAAU9e,KAAKiL,MAAMa,YAK/BwvB,EAAgBljB,EAKlBzF,EAAQyF,EACjBhZ,KAAKwmB,MACH,EAAAjb,eAAe+wB,oBACf5c,EAAU7T,OAGZ0H,GAASyF,EAVThZ,KAAKwmB,MACH,EAAAjb,eAAe8wB,8BACf3c,EAAU7T,MAAO6T,EAAU9e,KAAKiL,MAAMa,aAahD,OAAO6G,EAID,gBAENxC,EAEAqhB,EAEA4B,EAEAC,GAEA,IAAIrzB,EAAOmQ,EAAYnQ,KAAKsM,KACxBqoB,EAAU,IAAIgH,EAChB37B,EACAwxB,EACArhB,EACA/Q,KAAKw8B,gBAAgBzrB,EAAYuC,WAC/BsY,EAAerS,OACfqS,EAAetS,MACfsS,EAAejS,YAGnB,IAAKyY,EAAOU,IAAIlyB,EAAM20B,GAAU,OAAO,KAGvC,IAAI9hB,EAAkB1C,EAAY0C,gBAClC,GAAIA,EAAiB,CACnB,IAAIgpB,EAAqBhpB,EAAgBrG,OACrCqvB,IAEElH,EAAQqB,aAAahL,EAAejS,WACtC3Z,KAAKwmB,MACH,EAAAjb,eAAemxB,8CACf,EAAA5hB,MAAMpN,KACJqD,EAAYnQ,KAAKiL,MACjB4H,EAAgBgpB,EAAqB,GAAG5wB,QAI5CooB,EAAiBxmB,KAAK8nB,IAMxBxkB,EAAYzB,aAAa0kB,EAAcvmB,KAAK8nB,GAGhD,IAAIoH,EAAqB5rB,EAAY2C,QACrC,IAAK,IAAIrT,EAAI,EAAG8N,EAAIwuB,EAAmBvvB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACzD,IAAIu8B,EAAoBD,EAAmBt8B,GAC3C,OAAQu8B,EAAkBjuB,MACxB,KAAK,EAAAL,SAAS6P,iBACZne,KAAK68B,gBAAkCD,EAAmBrH,GAC1D,MAEF,KAAK,EAAAjnB,SAASsQ,kBAAmB,CAC/B,IAAIke,EAAuCF,EAC3C,GAAIA,EAAkBhE,MAAM,EAAAv2B,YAAYye,IAAM,EAAAze,YAAYwf,KACxD7hB,KAAK+8B,mBAAmBD,EAAmBvH,OACtC,CACL,IAAIyH,EAASh9B,KAAKi9B,iBAAiBH,EAAmBvH,GACvC,OAAXyH,GAAmBF,EAAkBl8B,KAAK+N,MAAQ,EAAAL,SAAS4M,cAC7Dqa,EAAQ2H,qBAAuBF,GAGnC,MAEF,KAAK,EAAA1uB,SAAS0O,eAAgB,MAC9B,QAAS/R,QAAO,IAGpB,OAAOsqB,EAID,gBAENxkB,EAEAqhB,GAEA,IAEImD,EAFA30B,EAAOmQ,EAAYnQ,KAAKsM,KACxBoG,EAAavC,EAAYuC,WAEzB4oB,EAAgCtQ,EAAehS,OAInD,GAHIwY,EAAOiJ,GAAG,EAAAh5B,YAAY86B,WACxBjB,GAAiBtQ,EAAevS,UAE9BtI,EAAYsqB,GAAG,EAAAh5B,YAAYyf,SAY7B,GAXA7W,OAAOmnB,EAAOzjB,MAAQgd,EAAYsL,qBAClCiF,GAAiBtQ,EAAenS,KAC5B1I,EAAYsqB,GAAG,EAAAh5B,YAAYuf,YAC7Bsa,GAAiBtQ,EAAepS,QAElC+b,EAAU,IAAIgG,EACZ36B,EACAwxB,EACApyB,KAAKw8B,gBAAgBlpB,EAAY4oB,GACjCnrB,IAEGqhB,EAAOU,IAAIlyB,EAAM20B,GAAU,YAShC,GAPAtqB,QAAQ8F,EAAY6nB,MAAM,EAAAv2B,YAAYyd,SAAW,EAAAzd,YAAYye,IAAM,EAAAze,YAAYwf,MAC/E0T,EAAU,IAAI6H,EACZx8B,EACAwxB,EACArhB,EACA/Q,KAAKw8B,gBAAgBlpB,EAAY4oB,KAE9B9J,EAAOiL,YAAYz8B,EAAM20B,GAAU,OAKpC,iBAENxkB,EAEAqhB,GAEA,IAAIxxB,EAAOmQ,EAAYnQ,KAAKsM,KACxBowB,EAAWvsB,EAAYsqB,GAAG,EAAAh5B,YAAYyf,QACtCoa,EAAgBtQ,EAAepS,OAASoS,EAAehS,OACtD7I,EAAYsqB,GAAG,EAAAh5B,YAAY4wB,WAC9BiJ,GAAiBtQ,EAAe7R,gBACf6R,EAAe5R,gBACf4R,EAAe3R,kBAE9BmY,EAAOiJ,GAAG,EAAAh5B,YAAY86B,WACxBjB,GAAiBtQ,EAAevS,UAElC,IAAIkc,EAAU,IAAIhD,EAChB3xB,EACAwxB,EACArhB,EACA/Q,KAAKw8B,gBAAgBzrB,EAAYuC,WAAY4oB,IAE/C,GAAIoB,GAEF,GADAryB,OAAO8F,EAAYnQ,KAAK+N,MAAQ,EAAAL,SAAS4M,cACpCkX,EAAOU,IAAIlyB,EAAM20B,GAAU,OAAO,UAEvC,IAAKnD,EAAOiL,YAAYz8B,EAAM20B,GAAU,OAAO,KAGjD,OADAv1B,KAAKu9B,uBAAuBxsB,EAAYuC,WAAYiiB,EAASnD,GACtDmD,EAID,uBAENjiB,EAEArR,EAEAu7B,GAEA,GAAIlqB,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACjD,IAAIqf,EAA2BpM,EAAWjT,GAC1C,OAAQqf,EAAUvF,eAChB,KAAK,EAAA5L,cAAcmL,SACnB,KAAK,EAAAnL,cAAcwL,gBACnB,KAAK,EAAAxL,cAAcyL,gBACnB,KAAK,EAAAzL,cAAc0L,iBAAkB,CACnC,IAAIpK,EAAO6P,EAAU7P,KACjB4tB,EAAU5tB,EAAOA,EAAKzC,OAAS,EACnC,GAAe,GAAXqwB,EAAc,CAChB,IAAIC,EAA0Bhe,EAAU7P,KAAM,GAC9C,GAAI6tB,EAASC,cAAc,EAAAnvB,YAAY+I,QAAS,CAC9C,IAAIrK,EAAiCwwB,EAAUp8B,MAC3CqN,EAAO+c,EAAaG,cAAcnM,EAAUvF,cAAejN,GAC/D,GAAIyB,GAAQ+c,EAAatJ,QACvBpiB,KAAKwmB,MACH,EAAAjb,eAAeqyB,2BACfF,EAAS7xB,MAAOqB,OAEb,CACL,IAAImsB,EAAYmE,EAAeK,mBAC3BxE,EAAUrrB,IAAIW,GAChB3O,KAAKwmB,MACH,EAAAjb,eAAeuyB,kCACfJ,EAAS7xB,QAGX5J,EAAU87B,aAAepvB,EACzB0qB,EAAUjrB,IAAIO,EAAM1M,UAIxBjC,KAAKwmB,MACH,EAAAjb,eAAeyyB,wBACfN,EAAS7xB,YAIb7L,KAAKwmB,MACH,EAAAjb,eAAe0yB,+BACfve,EAAU7T,MAAO,IAAK4xB,EAAQ/wB,eAUpC,eAENqE,EAEAqhB,GAEA,IAAIxxB,EAAOmQ,EAAYnQ,KAAKsM,KAC5B,GAAI6D,EAAYsqB,GAAG,EAAAh5B,YAAYyf,QAAS,CACtC,IAAIoc,EAAgB9L,EAAO1e,QAC3B,GAAsB,OAAlBwqB,IAA0BA,EAAclwB,IAAIpN,GAGzC,CACL,IAAI20B,EAAU,IAAI4I,EAAkBv9B,EAAMwxB,EAAQrhB,GAClD,OAAKqhB,EAAOU,IAAIlyB,EAAM20B,GACfA,EADgC,KALc,CACrD,IAAIA,EAAUtqB,OAAOizB,EAAch9B,IAAIN,IACvC,GAAI20B,EAAQ5mB,MAAQgd,EAAY6N,mBAAoB,OAA0BjE,OAM3E,CACL,IAAI2I,EAAgB9L,EAAOqG,gBAC3B,GAAsB,OAAlByF,IAA0BA,EAAclwB,IAAIpN,GAGzC,CACL,IAAI20B,EAAU,IAAI4I,EAAkBv9B,EAAMwxB,EAAQrhB,GAClD,OAAKqhB,EAAOiL,YAAYz8B,EAAM20B,GACvBA,EADwC,KALM,CACrD,IAAIA,EAAUtqB,OAAOizB,EAAch9B,IAAIN,IACvC,GAAI20B,EAAQ5mB,MAAQgd,EAAY6N,mBAAoB,OAA0BjE,GAWlF,OAJAv1B,KAAKwmB,MACH,EAAAjb,eAAe6yB,qBACfrtB,EAAYnQ,KAAKiL,MAAOjL,GAEnB,KAID,mBAENmQ,EAEAqhB,GAEA,IAAIpwB,EAAWhC,KAAKq+B,eAAettB,EAAaqhB,GAChD,GAAKpwB,EAAL,CACA,IAAIpB,EAAOmQ,EAAYnQ,KAAKsM,KACxBoxB,EAAWvtB,EAAYsqB,GAAG,EAAAh5B,YAAYye,KAC1C,GAAIwd,GACF,GAAIt8B,EAAS43B,gBAKX,YAJA55B,KAAKwmB,MACH,EAAAjb,eAAe6yB,qBACfrtB,EAAYnQ,KAAKiL,MAAOjL,QAK5B,GAAIoB,EAASg4B,gBAKX,YAJAh6B,KAAKwmB,MACH,EAAAjb,eAAe6yB,qBACfrtB,EAAYnQ,KAAKiL,MAAOjL,GAK9B,IAAI20B,EAAU,IAAIhD,GACf+L,EAAW,EAAA97B,cAAgB,EAAAC,eAAiB7B,EAC7CoB,EACA+O,EACA/Q,KAAKw8B,gBAAgBzrB,EAAYuC,WAC/BsY,EAAepS,OAASoS,EAAehS,SAGvC0kB,EACFt8B,EAAS43B,gBAAkBrE,EAE3BvzB,EAASg4B,gBAAkBzE,GAKvB,eAENxkB,EAEAqhB,GAEA,IAAIxxB,EAAOmQ,EAAYnQ,KAAKsM,KACxBqoB,EAAU,IAAIgJ,EAChB39B,EACAwxB,EACArhB,EACA/Q,KAAKw8B,gBAAgBzrB,EAAYuC,WAC/BsY,EAAerS,OACfqS,EAAepS,OACfoS,EAAenS,OAGnB,IAAK2Y,EAAOU,IAAIlyB,EAAM20B,GAAU,OAAO,KACvC,IAAIvjB,EAASjB,EAAYiB,OACzB,IAAK,IAAI3R,EAAI,EAAG8N,EAAI6D,EAAO5E,OAAQ/M,EAAI8N,IAAK9N,EAC1CL,KAAKw+B,oBAAoBxsB,EAAO3R,GAAIk1B,GAEtC,OAAOA,EAID,oBAENxkB,EAEAqhB,GAEA,IAAIxxB,EAAOmQ,EAAYnQ,KAAKsM,KACxBqoB,EAAU,IAAIkJ,EAChB79B,EACAwxB,EACArhB,EACA/Q,KAAKw8B,gBAAgBzrB,EAAYuC,WAC/BsY,EAAe7S,OAGdqZ,EAAOU,IAAIlyB,EAAM20B,GAIhB,kBAEN1hB,EAEAue,EAEA0B,EAEAC,GAEA,IAAIrgB,EAAUG,EAAUH,QACxB,GAAIA,EACF,IAAK,IAAIrT,EAAI,EAAG8N,EAAIuF,EAAQtG,OAAQ/M,EAAI8N,IAAK9N,EAC3CL,KAAK0+B,iBAAiBhrB,EAAQrT,GAAI+xB,EAAQve,EAAUyI,aAAcwX,OAE/D,CACL,IAAI6K,EACA5K,EAAkB/lB,IAAIokB,GAASuM,EAAS1zB,OAAO8oB,EAAkB7yB,IAAIkxB,IACpE2B,EAAkB3lB,IAAIgkB,EAAQuM,EAAS,IAC5C,IAAItT,EAAcxX,EAAUyI,aAC5BqiB,EAAOlxB,KAAK,IAAI+d,EACdH,EACAA,EAAYuT,SAAS,EAAA77B,cACjBsoB,EAAY7d,UAAU,EAAG6d,EAAYje,OAAS,EAAArK,aAAaqK,QAC3Die,EAAc,EAAAtoB,aAClBkI,OAAO4I,EAAUK,SAMf,iBAENymB,EAEAzP,EAEAG,EAEAyI,GAEA,IAAItf,EAAYmmB,EAAOnmB,UAAUtH,KAC7BgI,EAAcylB,EAAOlmB,aAAavH,KAGlCqoB,EAAUrK,EAAU6Q,aAAa7mB,GACrC,GAAIqgB,EACFv1B,KAAKwmB,MACH,EAAAjb,eAAeszB,4DACflE,EAAOlmB,aAAa5I,MAAOqJ,QAK/B,GAAoB,OAAhBmW,EAGF,GAAIkK,EAAUrK,EAAU6K,aAAavhB,GACnC0W,EAAU4K,aAAa5gB,EAAaqgB,OAG/B,CACL,IAAIoJ,EACA7K,EAAc9lB,IAAIkd,GAAYyT,EAAS1zB,OAAO6oB,EAAc5yB,IAAIgqB,IAC/D4I,EAAc1lB,IAAI8c,EAAWyT,EAAS,IAAI32B,KAC/C22B,EAAOvwB,IAAI8G,EAAa,IAAIqW,EAC1BoP,EAAOnmB,UACPmmB,EAAOlmB,aACP,KAAM,WAKL,CACL,IAAIkqB,EACA7K,EAAc9lB,IAAIkd,GAAYyT,EAAS1zB,OAAO6oB,EAAc5yB,IAAIgqB,IAC/D4I,EAAc1lB,IAAI8c,EAAWyT,EAAS,IAAI32B,KAC/C22B,EAAOvwB,IAAI8G,EAAa,IAAIqW,EAC1BoP,EAAOnmB,UACPmmB,EAAOlmB,aACP4W,EACAA,EAAYuT,SAAS,EAAA77B,cACjBsoB,EAAY7d,UAAU,EAAG6d,EAAYje,OAAS,EAAArK,aAAaqK,QAC3Die,EAAc,EAAAtoB,gBAKhB,wBAEN8Q,EAEAue,EAEA4B,EAEAC,GAEA,IAAIljB,EAAc8C,EAAU9C,YACxBwkB,EAAkC,KACtC,OAAQxkB,EAAYpC,MAClB,KAAK,EAAAL,SAASkP,gBACZ+X,EAAUv1B,KAAKy0B,eAAgC1jB,EAAaqhB,GAC5D,MAEF,KAAK,EAAA9jB,SAASiQ,oBACZgX,EAAUv1B,KAAK00B,mBAAwC3jB,EAAaqhB,GACpE,MAEF,KAAK,EAAA9jB,SAAS8O,iBACZmY,EAAUv1B,KAAKw0B,gBAAkCzjB,EAAaqhB,EAAQ4B,EAAeC,GACrF,MAEF,KAAK,EAAA3lB,SAASqQ,qBACZ4W,EAAUv1B,KAAK20B,oBAA0C5jB,EAAaqhB,EAAQ4B,GAC9E,MAEF,KAAK,EAAA1lB,SAASuQ,qBACZ0W,EAAUv1B,KAAK40B,oBAA0C7jB,EAAaqhB,EAAQ4B,EAAeC,GAC7F,MAEF,QAAShpB,QAAO,GAElB,GAAIsqB,EAAS,CACX,IAAI71B,EAAU0yB,EAAO1yB,QACrB,GAAKA,GAEH,GAAIA,EAAQsO,IAAI,WAAY,CAC1B,IAAI2tB,EAAW1wB,OAAOvL,EAAQwB,IAAI,YAOlC,YANAlB,KAAKk5B,aACH,EAAA3tB,eAAe4uB,uBACfppB,EAAYnQ,KAAKiL,MACjB8vB,EAAS5qB,YAAYnQ,KAAKiL,MAC1B,iBARQumB,EAAO1yB,QAAUA,EAAU,IAAIsI,IAa7CtI,EAAQ0O,IAAI,UAAWmnB,IAKnB,kBAEN1hB,EAEAue,EAEAyB,EAEAC,GAEA,IAAI/e,EAAelB,EAAUkB,aAC7B,GAAIA,EACF,IAAK,IAAI1U,EAAI,EAAG8N,EAAI4G,EAAa3H,OAAQ/M,EAAI8N,IAAK9N,EAChDL,KAAK8+B,iBACH/pB,EAAa1U,GACb+xB,EACAve,EAAUyI,aACVuX,EACAC,OAGC,CACL,IAAI7e,EAAgBpB,EAAUoB,cAC1BA,GACF4e,EAAcpmB,KAAK,IAAIwd,EACrBmH,EACAnd,EACA,KACApB,EAAUyI,aACVzI,EAAUyI,aAAe,EAAAvZ,gBASzB,iBAENgO,EAEAqhB,EAEA/G,EAEAwI,EAEAC,GAEA,IAAIxI,EAAiBD,EAAYuT,SAAS,EAAA77B,cACtCsoB,EAAY7d,UAAU,EAAG6d,EAAYje,OAAS,EAAArK,aAAaqK,QAC3Die,EAAc,EAAAtoB,aAGdwyB,EAAUv1B,KAAKw1B,cAAczkB,EAAYmE,YAAYhI,KAAMme,EAAaC,EAAgBwI,GACxFyB,EACFnD,EAAOU,IAAI/hB,EAAYnQ,KAAKsM,KAAMqoB,EAASxkB,EAAYnQ,MAKzDizB,EAAcpmB,KAAK,IAAIwd,EACrBmH,EACArhB,EAAYnQ,KACZmQ,EAAYmE,YACZmW,EACAC,IAKI,mBAENva,EAEAqhB,GAEA,IAAIxxB,EAAOmQ,EAAYnQ,KAAKsM,KACxB6xB,EAAkBnT,EAAehS,OAASgS,EAAexS,QACzDrI,EAAYsqB,GAAG,EAAAh5B,YAAY86B,SAC7B4B,GAAmBnT,EAAevS,UAElC0lB,GAAmBnT,EAAepS,OAC9BzI,EAAYlF,MAAMY,OAAO2vB,YAC3B2C,GAAmBnT,EAAenS,OAGjC1I,EAAYsqB,GAAG,EAAAh5B,YAAY28B,WAC1B5M,EAAOzjB,MAAQgd,EAAY0F,kBAC7B0N,GAAmBnT,EAAerS,QAGtC,IAAIgc,EAAU,IAAIhD,EAChB3xB,EACAwxB,EACArhB,EACA/Q,KAAKw8B,gBAAgBzrB,EAAYuC,WAAYyrB,IAE/C,OAAK3M,EAAOU,IAAIlyB,EAAM20B,GACfA,EADgC,KAKjC,oBAENxkB,EAEAqhB,EAEA4B,GAEA,IAAIpzB,EAAOmQ,EAAYnQ,KAAKsM,KACxBqoB,EAAU,IAAI0J,EAChBr+B,EACAwxB,EACArhB,EACA/Q,KAAKw8B,gBAAgBzrB,EAAYuC,WAC/BsY,EAAerS,SAGnB,IAAK6Y,EAAOU,IAAIlyB,EAAM20B,GAAU,OAAO,KAGnCxkB,EAAYzB,aAAa0kB,EAAcvmB,KAAK8nB,GAEhD,IAAIoH,EAAqB5rB,EAAY2C,QACrC,IAAK,IAAIrT,EAAI,EAAG8N,EAAIwuB,EAAmBvvB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACzD,IAAIu8B,EAAoBD,EAAmBt8B,GAC3C,OAAQu8B,EAAkBjuB,MACxB,KAAK,EAAAL,SAAS6P,iBACZne,KAAKk/B,0BAA4CtC,EAAmBrH,GACpE,MAEF,KAAK,EAAAjnB,SAASsQ,kBAAmB,CAC/B,IAAIke,EAAuCF,EACvCA,EAAkBhE,MAAM,EAAAv2B,YAAYye,IAAM,EAAAze,YAAYwf,KACxD7hB,KAAK+8B,mBAAmBD,EAAmBvH,GAE3Cv1B,KAAKi9B,iBAAiBH,EAAmBvH,GAE3C,MAEF,QAAStqB,QAAO,IAGpB,OAAOsqB,EAID,0BAENxkB,EAEAqhB,GAEA,IAAI+M,EAAWpuB,EAAYrB,KACtByvB,IAAUA,EAAW,EAAAzwB,KAAKqjB,kBAAkBhhB,EAAYnQ,KAAKiL,MAAMuzB,QACxEp/B,KAAK+8B,mBACH,EAAAruB,KAAK2wB,wBACHtuB,EAAYnQ,KACZmQ,EAAYuC,WACZvC,EAAYwC,MAAQ,EAAAlR,YAAYye,IAChC,KACA,EAAApS,KAAKsjB,mBACH,GACAmN,EACA,MACA,EACApuB,EAAYlF,OAEd,KACAkF,EAAYlF,OAEdumB,GAEGrhB,EAAYsqB,GAAG,EAAAh5B,YAAYuf,WAC9B5hB,KAAK+8B,mBACH,EAAAruB,KAAK2wB,wBACHtuB,EAAYnQ,KACZmQ,EAAYuC,WACZvC,EAAYwC,MAAQ,EAAAlR,YAAYwf,IAChC,KACA,EAAAnT,KAAKsjB,mBACH,CACE,EAAAtjB,KAAK4wB,gBACH,EAAA1mB,cAAc2H,QACdxP,EAAYnQ,KACZu+B,EACA,KACApuB,EAAYnQ,KAAKiL,QAGrB,EAAA6C,KAAKqjB,kBAAkBhhB,EAAYnQ,KAAKiL,MAAMuzB,OAC9C,MACA,EACAruB,EAAYlF,OAEd,KACAkF,EAAYlF,OAEdumB,GAME,oBAENrhB,EAEAqhB,EAEA4B,EAEAC,GAEA,IAAIrzB,EAAOmQ,EAAYnQ,KAAKsM,KACxBqyB,EAAW,IAAIC,EACjB5+B,EACAwxB,EACArhB,EACA/Q,KAAKw8B,gBAAgBzrB,EAAYuC,WAAYsY,EAAerS,SAE9D,IAAK6Y,EAAOU,IAAIlyB,EAAM2+B,GAAW,OAAO,KACxC,IAAIhK,EAAUtqB,OAAOmnB,EAAO2D,aAAan1B,IACrC8S,EAAU3C,EAAY2C,QAC1B,IAAK,IAAIrT,EAAI,EAAG8N,EAAIuF,EAAQtG,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC9C,IAAIs6B,EAASjnB,EAAQrT,GACrB,OAAQs6B,EAAOhsB,MACb,KAAK,EAAAL,SAAS8O,iBACZpd,KAAKw0B,gBAAkCmG,EAAQ4E,EAAUvL,EAAeC,GACxE,MAEF,KAAK,EAAA3lB,SAASkP,gBACZxd,KAAKy0B,eAAgCkG,EAAQ4E,GAC7C,MAEF,KAAK,EAAAjxB,SAASiQ,oBACZve,KAAK00B,mBAAwCiG,EAAQ4E,GACrD,MAEF,KAAK,EAAAjxB,SAASqQ,qBACZ3e,KAAK20B,oBAA0CgG,EAAQ4E,EAAUvL,GACjE,MAEF,KAAK,EAAA1lB,SAASuQ,qBACZ7e,KAAK40B,oBAA0C+F,EAAQ4E,EAAUvL,EAAeC,GAChF,MAEF,KAAK,EAAA3lB,SAAS6Q,gBACZnf,KAAK60B,yBAA0C8F,EAAQ4E,GACvD,MAEF,KAAK,EAAAjxB,SAAS+Q,SACZrf,KAAKu0B,oBAAuCoG,EAAQ4E,GACpD,MAEF,QAASt0B,QAAO,IAIpB,OADIs0B,GAAYhK,GAASkK,EAAYF,EAAUhK,GACxCA,EAID,yBAENxkB,EAEAqhB,GAEA,IAAIxxB,EAAOmQ,EAAYnQ,KAAKsM,KACxBqoB,EAAU,IAAIxC,EAChBnyB,EACAwxB,EACArhB,EACA/Q,KAAKw8B,gBAAgBzrB,EAAYuC,WAAYsY,EAAe7S,OAE9DqZ,EAAOU,IAAIlyB,EAAM20B,GAIX,oBAEN1hB,EAEAue,GAEA,IAAIrd,EAAelB,EAAUkB,aAC7B,IAAK,IAAI1U,EAAI,EAAG8N,EAAI4G,EAAa3H,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACnD,IAAI0Q,EAAcgE,EAAa1U,GAC3BO,EAAOmQ,EAAYnQ,KAAKsM,KACxBgvB,EAAgBtQ,EAAerS,OAASqS,EAAenS,KACvD1I,EAAYsqB,GAAG,EAAAh5B,YAAYie,WAC7B4b,GAAiBtQ,EAAevS,UAE9BtI,EAAYsqB,GAAG,EAAAh5B,YAAY+d,SAC7B8b,GAAiBtQ,EAAepS,QAElC,IAAI+b,EAAU,IAAIgG,EAChB36B,EACAwxB,EACApyB,KAAKw8B,gBAAgBzrB,EAAYuC,WAAY4oB,GAC7CnrB,GAEGqhB,EAAOU,IAAIlyB,EAAM20B,IAgC1B,oBACE,IAAImK,EAAU,IAAI33B,IAElB,IAAK,IAAIqwB,EAAUC,WAAWr4B,KAAK0uB,gBAAiBruB,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACzF,IAAIs/B,EAAW7iB,UAAUsb,EAAQ/3B,IAC5Bs/B,EAASC,WAAWF,EAAQ5M,IAAI6M,GAEvC,OAAOD,GAviEX,YA4iEA,SAAY/T,GAEV,uBAEA,qBAEA,mBAEA,6BAEA,+CAEA,2BAEA,yCAEA,yCAEA,qBAEA,iDAEA,8BAEA,0CAEA,sBAEA,gDAEA,4BAEA,8BAEA,oBAEA,wCAEA,wCAtCF,CAAYA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KA0CvB,SAAYC,GAEV,mBAEA,uBAEA,yCAEA,yCAEA,2CAEA,8BAEA,sBAEA,wBAEA,6BAEA,2BAEA,qBAEA,0BAxBF,CAAYA,EAAA,EAAAA,iBAAA,EAAAA,eAAc,KA2B1B,SAAiBA,GAGC,EAAAuQ,SAAhB,SAAyBxtB,GACvB,OAAQA,GACN,KAAK,EAAAJ,cAAcgL,OAAQ,OAAOqS,EAAerS,OACjD,KAAK,EAAAhL,cAAcmL,SACnB,KAAK,EAAAnL,cAAcwL,gBAAiB,OAAO6R,EAAe7R,gBAC1D,KAAK,EAAAxL,cAAcyL,gBAAiB,OAAO4R,EAAe5R,gBAC1D,KAAK,EAAAzL,cAAc0L,iBAAkB,OAAO2R,EAAe3R,iBAC3D,KAAK,EAAA1L,cAAcoL,UAAW,OAAOiS,EAAejS,UACpD,KAAK,EAAApL,cAAc+K,MAAO,OAAOsS,EAAetS,MAChD,KAAK,EAAA/K,cAAciL,OAAQ,OAAOoS,EAAepS,OACjD,KAAK,EAAAjL,cAAc8K,SAAU,OAAOuS,EAAevS,SACnD,KAAK,EAAA9K,cAAc6K,QAAS,OAAOwS,EAAexS,QAClD,KAAK,EAAA7K,cAAckL,KAAM,OAAOmS,EAAenS,KAC/C,KAAK,EAAAlL,cAAcqL,OAAQ,OAAOgS,EAAehS,OACjD,QAAS,OAAOgS,EAAe7S,OAjBrC,CAAiB6S,EAAA,EAAAA,iBAAA,EAAAA,eAAc,KAuB/B,MAAsBiU,EAcpB,YAESlxB,EAEA/N,EAEAkwB,EAEAgP,EAEP1N,GARO,KAAAzjB,OAEA,KAAA/N,OAEA,KAAAkwB,eAEA,KAAAgP,UAjBT,KAAAvsB,MAAqB,EAAAlR,YAAY0W,KAEjC,KAAAsZ,eAAiCzG,EAAe7S,KAEhD,KAAArF,QAA8C,KAE9C,KAAAqsB,WAAoC,KAelC//B,KAAK8/B,QAAUA,EACf9/B,KAAKY,KAAOA,EACZZ,KAAK8wB,aAAeA,EAChBsB,EACFpyB,KAAKoyB,OAASA,GAEdnnB,OAAOjL,KAAK2O,MAAQgd,EAAYqU,MAChChgC,KAAKoyB,OAASpyB,MAKlB,WAEE,IADA,IAAIigC,EAAmBjgC,OAGrB,IADAigC,EAAUA,EAAQ7N,QACNzjB,MAAQgd,EAAYqU,KAAM,OAAaC,EAKvD,GAAGjnB,GAA2B,OAAQhZ,KAAKuT,MAAQyF,IAASA,EAE5D,MAAMzF,GAA4B,OAA+B,IAAvBvT,KAAKuT,MAAQA,GAEvD,IAAIyF,GAA2BhZ,KAAKuT,OAASyF,EAE7C,MAAMA,GAA0BhZ,KAAKuT,QAAUyF,EAE/C,aAAaA,GAA8B,OAAQhZ,KAAKqyB,eAAiBrZ,IAASA,EAGlF,aAAapY,GACX,IAAI8S,EAAU1T,KAAK0T,QACnB,OAAgB,OAAZA,GAAoBA,EAAQ1F,IAAIpN,GAAcqK,OAAOyI,EAAQxS,IAAIN,IAC9D,KAOT,IAAIA,EAAc20B,EAA0B2K,EAAuD,MACjG,IAAIC,EAAsB5K,EAAQxkB,YAC9B2C,EAAU1T,KAAK0T,QACnB,GAAKA,GACA,GAAIA,EAAQ1F,IAAIpN,GAAO,CAC1B,IAAI+6B,EAAW1wB,OAAOyI,EAAQxS,IAAIN,IAClC,GAAI+6B,EAASvJ,SAAWpyB,UAEjB,CACL,IAAI47B,EAASC,EAASF,EAAUpG,GAChC,IAAIqG,EAEG,CACL,IAAIwE,EAAqBF,GAErB3K,EAAQuB,eAcZ,OAbIZ,EAAkByF,EAAShtB,MAC7B3O,KAAK8/B,QAAQ5G,aACX,EAAA3tB,eAAe4uB,uBACfiG,EAAmBv0B,MACD8vB,EAAU7E,eAAejrB,MAC3Cu0B,EAAmBlzB,MAGrBlN,KAAK8/B,QAAQtZ,MACX,EAAAjb,eAAe4uB,uBACfiG,EAAmBv0B,MAAOu0B,EAAmBlzB,OAG1C,EAlBPqoB,EAAUqG,SARF57B,KAAK0T,QAAUA,EAAU,IAAI1L,IA8B3C0L,EAAQtF,IAAIxN,EAAM20B,GAClB,IAAIuK,EAAU9/B,KAAK8/B,QAMnB,OALIvK,EAAQ5mB,MAAQgd,EAAYmN,oBAA2CvD,EAAS8K,UAElFP,EAAQxR,eAAelgB,IAAImnB,EAAQzE,aAAcyE,GACjDuK,EAAQvR,sBAAsBngB,IAAI+xB,EAAqB5K,KAElD,EAIT,eACE,OAAQv1B,KAAK44B,MAAM,EAAAv2B,YAAYof,QAAU,EAAApf,YAAYqf,WAIvD,yBACE,OAAO1hB,KAAKsgC,WAAatgC,KAAKq7B,GAAG,EAAAh5B,YAAYsf,QAI/C,iBAAiBxV,GACf,GAAInM,KAAKsgC,UAAYn0B,EAAMm0B,SAAU,OAAO,EAC5C,MAAMC,EAAM,EAAAl+B,YAAYof,QAAU,EAAApf,YAAYqf,UAC9C,OAAQ1hB,KAAKuT,MAAQgtB,KAASp0B,EAAMoH,MAAQgtB,GAI9C,WACE,OAAOvgC,KAAK8wB,aAAe,UAAY9wB,KAAK2O,KAAKjC,YAlIrD,YAuIA,IAAI8zB,EAAmB,IAAIz4B,IAG3B,SAAgBmuB,EAAkBvnB,GAChC,OAAO6xB,EAAiBxyB,IAAIW,GAD9B,sBAKA,MAAsB8xB,UAAwBZ,EAG5C,YAEElxB,EAEA/N,EAEAkwB,EAEAgP,EAEA1N,EAEOrhB,GAEPgH,MAAMpJ,EAAM/N,EAAMkwB,EAAcgP,EAAS1N,GAFlC,KAAArhB,cAGPyvB,EAAiB1N,IAAInkB,GAOrB3O,KAAK+Q,YAAcA,EACnB/Q,KAAKuT,MAAQxC,EAAYwC,MAI3B,0BACE,OAAOvT,KAAK+Q,YAAYlF,MAAMY,OAAO2vB,UAIvC,qBACE,OAAOp8B,KAAK+Q,YAAYnQ,KAI1B,kCACE,IAAImQ,EAAc/Q,KAAK+Q,YACnB+lB,EAAiB/lB,EAAYnQ,KACjC,GAAImQ,EAAYpC,MAAQ,EAAAL,SAASiQ,qBAAuBxN,EAAYpC,MAAQ,EAAAL,SAASsQ,kBAAmB,CACtG,IAAI8hB,EAAsC3vB,EAAa4E,UACvD,OAAO,EAAAmF,MAAMpN,KAAKopB,EAAejrB,MAAO60B,EAAc70B,OAExD,OAAOirB,EAAejrB,MAIxB,qBACE,OAAO7L,KAAK+Q,YAAYuC,WAI1B,qBAAqBqtB,GACnB,IACIhyB,EADwB3O,KACZ2O,KAChB,GAAIA,GAAQgyB,EAAKhyB,KACf,OAAQA,GACN,KAAKgd,EAAYvQ,SACf,OALsBpb,KAKE2V,UAAUirB,eAA0BD,EAAMhrB,WAA0B,GAE9F,KAAKgW,EAAYkP,SAAU,CACzB,IAAIgG,EARkB7gC,KASlB05B,EAAyBiH,EACzBG,EAAaD,EAAaE,eAC1BpH,EAAaD,EAAaqH,eAC9B,GAAID,GACF,IAAKnH,IAAemH,EAAWnrB,UAAUirB,eAAejH,EAAWhkB,WAAW,GAC5E,OAAO,OAEJ,GAAIgkB,EACT,OAAO,EAET,IAAIqH,EAAaH,EAAaI,eAC1BlH,EAAaL,EAAauH,eAC9B,GAAID,GACF,IAAKjH,IAAeiH,EAAWrrB,UAAUirB,eAAe7G,EAAWpkB,WAAW,GAC5E,OAAO,OAEJ,GAAIokB,EACT,OAAO,EAET,OAAO,GAIb,OAAO,GAzFX,oBA8FA,IAAImH,EAAgB,IAAIn5B,IAGxB,0BAA+B4G,GAC7B,OAAOuyB,EAAclzB,IAAIW,IAI3B,MAAsBwyB,UAAqBV,EAKzC,YAEE9xB,EAEA/N,EAEAkwB,EAEAgP,EAEA1N,EAEArhB,GAEAgH,MAAMpJ,EAAM/N,EAAMkwB,EAAcgP,EAAS1N,EAAQrhB,GAhBnD,KAAArB,KAAa,EAAAgjB,KAAKG,KAiBhBqO,EAAcpO,IAAInkB,GAIpB,QAAQe,GACNzE,QAAQjL,KAAKq7B,GAAG,EAAAh5B,YAAY++B,WAC5BphC,KAAK0P,KAAOA,EACZ1P,KAAKoO,IAAI,EAAA/L,YAAY++B,WA3BzB,iBAgCA,MAAavQ,UAAagP,EAUxB,YAEEC,EAEOrzB,GAEPsL,MACE4T,EAAYqU,KACZvzB,EAAOE,eACPF,EAAO6P,aACPwjB,EACA,MAPK,KAAArzB,SAXT,KAAA/M,QAA8C,KAE9C,KAAA+6B,YAA6B,KAkB3Bz6B,KAAKyM,OAASA,EACdxB,QAAQ60B,EAAQzR,YAAYrgB,IAAIhO,KAAK8wB,eACrCgP,EAAQzR,YAAYjgB,IAAIpO,KAAK8wB,aAAc9wB,MAC3C,IAAIqhC,EAAgBrhC,KAAK8/B,QAAQwB,mBAC/B,SAAWthC,KAAK8wB,aAChB,IAAI,EAAAyQ,UAAUzB,EAAS,KAAM,EAAApN,KAAKG,MAClC7yB,MAEFqhC,EAAcvQ,aAAeuQ,EAAczgC,KAC3CZ,KAAKqhC,cAAgBA,EAIvB,IAAIzgC,EAAc20B,EAA0B2K,EAAuD,MAIjG,OAHI3K,EAAQqB,aAAahL,EAAerS,UACtCgc,EAAUv1B,KAAK8/B,QAAQ0B,aAAa5gC,EAAM20B,MAEvCxd,MAAM+a,IAAIlyB,EAAM20B,EAAS2K,MAC9B3K,EAAUtqB,OAAOjL,KAAK+1B,aAAan1B,KACvBy6B,GAAG,EAAAh5B,YAAYub,UAAYsiB,GACrClgC,KAAK81B,aACHP,EAAQ30B,KACR20B,IAGG,GAIT,aAAa30B,GACX,IAAI20B,EAAUxd,MAAMge,aAAan1B,GACjC,GAAI20B,EAAS,OAAOA,EACpB,IAAIkF,EAAcz6B,KAAKy6B,YACvB,GAAIA,EACF,IAAK,IAAIp6B,EAAI,EAAG8N,EAAIssB,EAAYrtB,OAAQ/M,EAAI8N,IAAK9N,EAC/C,GAAIk1B,EAAUkF,EAAYp6B,GAAG01B,aAAan1B,GAAO,OAAO20B,EAG5D,OAAO,KAIT,OAAO30B,GACL,IAAI20B,EAAUv1B,KAAK+1B,aAAan1B,GAChC,OAAI20B,GACGv1B,KAAK8/B,QAAQ7J,aAAar1B,GAInC,aAAaA,EAAc20B,GACzB,IAAI71B,EAAUM,KAAKN,QACdA,IAASM,KAAKN,QAAUA,EAAU,IAAIsI,KAC3CtI,EAAQ0O,IAAIxN,EAAM20B,GACdv1B,KAAKyM,OAAOuP,YAAc,EAAAvN,WAAWmO,eAAe5c,KAAK8/B,QAAQ0B,aAAa5gC,EAAM20B,GAI1F,iBAAiBrB,GACf,IAAIuG,EAAcz6B,KAAKy6B,YACvB,GAAKA,GACA,GAAIA,EAAYgH,SAASvN,GAAO,YADnBl0B,KAAKy6B,YAAcA,EAAc,GAEnDA,EAAYhtB,KAAKymB,GAInB,aAAatzB,GACX,IAAIlB,EAAUM,KAAKN,QACnB,GAAgB,OAAZA,GAAoBA,EAAQsO,IAAIpN,GAAO,OAAOqK,OAAOvL,EAAQwB,IAAIN,IACrE,IAAI65B,EAAcz6B,KAAKy6B,YACvB,GAAIA,EACF,IAAK,IAAIp6B,EAAI,EAAG8N,EAAIssB,EAAYrtB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAClD,IAAIk1B,EAAUkF,EAAYp6B,GAAG07B,aAAan7B,GAC1C,GAAI20B,EAAS,OAAOA,EAGxB,OAAO,KAIT,oBAAoB30B,EAAcwxB,EAAiBjH,GACjD,IAAIpa,EAAc/Q,KAAK8/B,QAAQ4B,+BAA+B9gC,GAC9DmQ,EAAYnQ,KAAOuqB,EACnB,IAAIzpB,EAAK,IAAI89B,EAAU5+B,EAAMwxB,EAAQrhB,GAGrC,OAFArP,EAAG0M,IAAI,EAAA/L,YAAYs/B,QACnB3hC,KAAK4hC,uBAAuBlgC,GACrBA,EAID,uBAAuBA,GAC7B,IAAIhC,EAAUM,KAAKN,QACnB,GAAIA,EAEF,IAAK,IAAIo1B,EAAQC,SAASr1B,GAAUW,EAAI,EAAG8N,EAAI2mB,EAAM1nB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACvE,IAAIwhC,EAAa/kB,UAAUgY,EAAMz0B,IAC7Bs6B,EAAS1vB,OAAOvL,EAAQwB,IAAI2gC,IAChCngC,EAAGoxB,IAAI+O,EAAYlH,GAGvB,IAAIF,EAAcz6B,KAAKy6B,YACvB,GAAIA,EACF,IAAK,IAAIp6B,EAAI,EAAG8N,EAAIssB,EAAYrtB,OAAQ/M,EAAI8N,IAAK9N,EAC/Co6B,EAAYp6B,GAAGuhC,uBAAuBlgC,IA7H9C,SAoIA,MAAaqxB,UAAuBoO,EAGlC,YAEEvgC,EAEAwxB,EAEArhB,EAEAshB,EAAiCzG,EAAe7S,MAEhDhB,MACE4T,EAAYmW,eACZlhC,EACAmhC,EAAmBnhC,EAAMwxB,GAAQ,GACjCA,EAAO0N,QACP1N,EACArhB,GAEF/Q,KAAKqyB,eAAiBA,EAIxB,yBACE,OAAyBryB,KAAK+Q,YAAayC,eAI7C,eACE,OAAyBxT,KAAK+Q,YAAarB,KAI7C,OAAO9O,GACL,OAAOZ,KAAKoyB,OAAO4P,OAAOphC,IApC9B,mBAyCA,MAAa4+B,UAAkBiB,EAG7B,YAEE7/B,EAEAwxB,EAEArhB,EAEAshB,EAAiCzG,EAAe7S,MAEhDhB,MACE4T,EAAYrK,UACZ1gB,EACAmhC,EAAmBnhC,EAAMwxB,GAAQ,GACjCA,EAAO0N,QACP1N,EACArhB,GAEF/Q,KAAKqyB,eAAiBA,EAIxB,OAAOzxB,GACL,IAAIqhC,EAASjiC,KAAK+1B,aAAan1B,GAC/B,OAAIqhC,GACGjiC,KAAKoyB,OAAO4P,OAAOphC,IA5B9B,cAiCA,MAAa29B,UAAa4C,EAGxB,YAEEvgC,EAEAwxB,EAEArhB,EAEAshB,EAAiCzG,EAAe7S,MAEhDhB,MACE4T,EAAYjL,KACZ9f,EACAmhC,EAAmBnhC,EAAMwxB,GAAQ,GACjCA,EAAO0N,QACP1N,EACArhB,GAEF/Q,KAAKqyB,eAAiBA,EACtBryB,KAAKg7B,QAAQ,EAAAtI,KAAKrvB,KAIpB,OAAOzC,GACL,IAAIqhC,EAASjiC,KAAK+1B,aAAan1B,GAC/B,OAAIqhC,GACGjiC,KAAKoyB,OAAO4P,OAAOphC,IA7B9B,SAkCA,SAAkBshC,GAEhB,mBAEA,yBAEA,qBANF,CAAkB,EAAAA,oBAAA,EAAAA,kBAAiB,KAUnC,MAAsBC,UAA4BhB,EAUhD,YAEExyB,EAEA/N,EAEAwxB,EAEArhB,EAAgDqhB,EAAO0N,QAAQtE,8BAA8B56B,IAE7FmX,MACEpJ,EACA/N,EACAmhC,EAAmBnhC,EAAMwxB,GAAQ,GACjCA,EAAO0N,QACP1N,EACArhB,GAvBJ,KAAAqxB,kBAAiB,EAEjB,KAAAC,qBAA4BC,SAE5B,KAAAC,mBAA0B,EAqBxBviC,KAAKuT,MAAQxC,EAAYwC,MAI3B,eACE,OAA0CvT,KAAK+Q,YAAarB,KAI9D,sBACE,OAA0C1P,KAAK+Q,YAAapB,YAI9D,wBAAwBrO,EAAYoO,GAClCzE,OAAOyE,EAAK2rB,GAAG,IACfr7B,KAAK0P,KAAOA,EACZ1P,KAAKoiC,kBAAoB,EACzBpiC,KAAKqiC,qBAAuB/gC,EAC5BtB,KAAKoO,IAAI,EAAA/L,YAAY+d,MAAQ,EAAA/d,YAAYmgC,QAAU,EAAAngC,YAAY++B,UAIjE,sBAAsB9/B,EAAYoO,GAChCzE,OAAOyE,EAAK2rB,GAAG,IACfr7B,KAAK0P,KAAOA,EACZ1P,KAAKoiC,kBAAoB,EACzBpiC,KAAKuiC,mBAAqBjhC,EAC1BtB,KAAKoO,IAAI,EAAA/L,YAAY+d,MAAQ,EAAA/d,YAAYmgC,QAAU,EAAAngC,YAAY++B,UAIjE,OAAOxgC,GACL,OAAOZ,KAAKoyB,OAAO4P,OAAOphC,IA7D9B,wBAkEA,MAAa69B,UAAkB0D,EAG7B,YAEEvhC,EAEAwxB,EAEArhB,EAEAshB,EAAiCzG,EAAe7S,MAEhDhB,MACE4T,EAAY8W,UACZ7hC,EACAwxB,EACArhB,GAOJ,KAAA2xB,aAAoB,EALlB1iC,KAAKqyB,eAAiBA,EACtBryB,KAAKg7B,QAAQ,EAAAtI,KAAKrvB,KAOpB,gBACE,OAA8BrD,KAAK+Q,YAAapB,YAIlD,OAAO/O,GACL,OAAOZ,KAAKoyB,OAAO4P,OAAOphC,IAjC9B,cAsCA,MAAa26B,UAAe4G,EAG1B,YAEEvhC,EAEAwxB,EAEAC,EAEAthB,EAAgDqhB,EAAO0N,QAAQtE,8BAA8B56B,IAE7FmX,MACE4T,EAAYpS,OACZ3Y,EACAwxB,EACArhB,GAEF/Q,KAAKqyB,eAAiBA,GAnB1B,WAwBA,kBAEE,YAESzxB,EAEA8O,EAEAC,EAAiC,MAJjC,KAAA/O,OAEA,KAAA8O,OAEA,KAAAC,gBAKX,MAAagzB,UAAcR,EAMzB,YAEEvhC,EAEOgiC,EAEPlzB,EAEA0iB,EAEArhB,EAAgDqhB,EAAO0N,QAAQtE,8BAA8B56B,IAE7FmX,MACE4T,EAAYkX,MACZjiC,EACAwxB,EACArhB,GAZK,KAAA6xB,QAcP5iC,KAAK8iC,aAAeliC,EACpBZ,KAAK4iC,MAAQA,EACb33B,OAAOyE,GAAQ,EAAAgjB,KAAKG,MACpB7yB,KAAKg7B,QAAQtrB,GAIf,iBAAiB9O,GACfZ,KAAKY,KAAOA,EACZZ,KAAK8wB,aAAeiR,EAAmBnhC,EAAMZ,KAAKoyB,QAAQ,GAI5D,qBACE,IAAIxxB,EAAOZ,KAAK8iC,aAChB9iC,KAAKY,KAAOA,EACZZ,KAAK8wB,aAAeiR,EAAmBnhC,EAAMZ,KAAKoyB,QAAQ,IAxC9D,UA6CA,MAAaG,UAA0BkO,EAarC,YAEE7/B,EAEAwxB,EAEArhB,EAEAshB,EAAiCzG,EAAe7S,MAEhDhB,MACE4T,EAAYmN,mBACZl4B,EACAmhC,EAAmBnhC,EAAMwxB,EAAQrhB,EAAYsqB,GAAG,EAAAh5B,YAAY28B,WAC5D5M,EAAO0N,QACP1N,EACArhB,GA1BJ,KAAAgtB,aAA6BrS,EAAatJ,QAE1C,KAAAmX,UAAyC,KAEzC,KAAAF,UAA2C,KAGnC,KAAA0J,gBAAuD,KAqB7D/iC,KAAKqyB,eAAiBA,EAIxB,yBACE,OAA6BryB,KAAK+Q,YAAayC,eAIjD,uBACE,OAA6BxT,KAAK+Q,YAAa4E,UAIjD,eACE,OAA6B3V,KAAK+Q,YAAa6E,KAIjD,gBACE,OAA6B5V,KAAK+Q,YAAa8E,UAIjD,cACE,IAAIuc,EAASpyB,KAAKoyB,OAClB,OAAOA,EAAOzjB,MAAQgd,EAAY3Q,OAC3BoX,EAAOzjB,MAAQgd,EAAY6N,qBACzBpH,EAAOA,OAAOzjB,MAAQgd,EAAY3Q,OAClCoX,EAAOA,OAAOzjB,MAAQgd,EAAY1K,WAK7C,QAAQ+hB,GACN/3B,OAAOjL,KAAKq7B,GAAG,EAAAh5B,YAAY28B,WAC3B/zB,QAAQjL,KAAKqgC,SACb,IAAI0C,EAAkB/iC,KAAK+iC,gBAC3B,GAAKA,GACA,GAAIA,EAAgB/0B,IAAIg1B,GAAgB,OAAO/3B,OAAO83B,EAAgB7hC,IAAI8hC,SADzDhjC,KAAK+iC,gBAAkBA,EAAkB,IAAI/6B,IAEnE,IAAI+I,EAAc/Q,KAAK+Q,YACvB9F,OAAO8F,EAAYpC,MAAQ,EAAAL,SAASsQ,mBACpC,IAAIqkB,EAAQ,IAAI1Q,EACdvyB,KAAKY,KACLoiC,EACmBjyB,EACnB/Q,KAAKqyB,gBAOP,OALA4Q,EAAM1vB,MAAQvT,KAAKuT,MACnB0vB,EAAMlF,aAAe/9B,KAAK+9B,aAC1BkF,EAAM5J,UAAYr5B,KAAKq5B,UAEvB0J,EAAgB30B,IAAI40B,EAAeC,GAC5BA,EAIT,oBAAoBC,GAClB,IAAI3J,EAAYv5B,KAAKu5B,UACrB,OAAkB,OAAdA,GAAsBA,EAAUvrB,IAAIk1B,GAAqBj4B,OAAOsuB,EAAUr4B,IAAIgiC,IAC3E,KAIT,oBAAoBA,EAAqBvD,GACvC,IAAIpG,EAAYv5B,KAAKu5B,UAChBA,EACAtuB,QAAQsuB,EAAUvrB,IAAIk1B,IADXljC,KAAKu5B,UAAYA,EAAY,IAAIvxB,IAEjDuxB,EAAUnrB,IAAI80B,EAAavD,GAI7B,OAAO/+B,GACL,OAAOZ,KAAKoyB,OAAO4P,OAAOphC,IAxG9B,sBA6GA,MAAa0xB,UAAiB6O,EAqC5B,YAEEgC,EAEAlhC,EAEA6M,EAEA6G,EAEAytB,EAAmD,MAEnDrrB,MACE4T,EAAYvQ,SACZ+nB,EACApB,EAAmBoB,EAAwBlhC,EAAUmwB,OAAQnwB,EAAUo5B,GAAG,EAAAh5B,YAAY28B,WACtF/8B,EAAU69B,QACV79B,EAAUmwB,OACVnwB,EAAU8O,aAhDd,KAAAsyB,aAAkC,IAAIr7B,IAEtC,KAAAs7B,cAAyB,GAEzB,KAAAC,iBAA2B,GAQ3B,KAAAC,eAA0B,GAE1B,KAAAC,IAAmB,EAEnB,KAAAC,oBAA2B,EAE3B,KAAAC,YAA+B,KAE/B,KAAAC,YAA+B,KAG/B,KAAAC,aAAoB,EAEpB,KAAAC,gBAAuB,EAEvB,KAAAC,kBAAyB,EA2GzB,KAAAC,SAA2B,KAC3B,KAAAC,SAA2B,KAC3B,KAAAC,SAA2B,KAC3B,KAAAC,SAA2B,KAC3B,KAAAC,UAA4B,KAC5B,KAAAC,YAA8B,KAC9B,KAAAC,YAA8B,KAG9B,KAAAC,YAAmB,EACnB,KAAAC,WAA2B,KAC3B,KAAAC,WAA4B,KA/F1BzkC,KAAKiC,UAAYA,EACjBjC,KAAK8O,cAAgBA,EACrB9O,KAAK2V,UAAYA,EACjB3V,KAAKuT,MAAQtR,EAAUsR,MAAQ,EAAAlR,YAAY++B,SAC3CphC,KAAKqyB,eAAiBpwB,EAAUowB,eAChCryB,KAAKojC,wBAA0BA,EAC/B,IAAItD,EAAU79B,EAAU69B,QAExB,GADA9/B,KAAK0P,KAAOowB,EAAQ/R,QAAQ6E,UAAU8R,WAAW/uB,IAC5C1T,EAAUo5B,GAAG,EAAAh5B,YAAY86B,SAAU,CACtC,IAAIwH,EAAa,EACjB,GAAI3kC,KAAKq7B,GAAG,EAAAh5B,YAAY28B,UAAW,CACjC,IAAI4F,EAAQ,IAAIjC,EACd,EAAA1/B,YAAYsC,MACZo/B,IACA15B,OAAO0K,EAAUkvB,UACjB7kC,MAEFA,KAAKqjC,aAAaj1B,IAAI,EAAAnL,YAAYsC,MAAOq/B,GACzC5kC,KAAKsjC,cAAcsB,EAAMhC,OAASgC,EAEpC,IAAIE,EAAiBnvB,EAAUmvB,eAC/B,IAAK,IAAIzkC,EAAI,EAAG8N,EAAI22B,EAAe13B,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACrD,IAAI0kC,EAAgBD,EAAezkC,GAC/B2kC,EAAgBrvB,EAAUsvB,iBAAiB5kC,GAC3CukC,EAAQ,IAAIjC,EACdqC,EACAL,IACAI,EACA/kC,MAEFA,KAAKqjC,aAAaj1B,IAAI42B,EAAeJ,GACrC5kC,KAAKsjC,cAAcsB,EAAMhC,OAASgC,GAGtC5kC,KAAKklC,KAAO,EAAAC,KAAKC,aAAaplC,MAC9BqlC,EAAwBvF,EAAS9/B,MAInC,QAAQslC,GACN,IAAIC,EAAO,IAAIjT,EACbtyB,KAAKY,KAAO,EAAAoC,eAAiBsiC,EAC7BtlC,KAAKiC,UACLjC,KAAK8O,cACL9O,KAAK2V,UAAU6vB,QACfxlC,KAAKojC,yBAGP,OADAmC,EAAKn3B,IAAIpO,KAAKuT,OAAS,EAAAlR,YAAYojC,SAAW,EAAApjC,YAAYqjC,MACnDH,EAIT,SAAS71B,EAAY9O,EAAsB,KAAMmQ,EAA0C,MAEzF,IAAI4zB,EAAa3kC,KAAK2V,UAAUmvB,eAAe13B,OAASpN,KAAKujC,iBAAiBn2B,OAC1EpN,KAAKq7B,GAAG,EAAAh5B,YAAY28B,aAAa2F,EACrC,IAAInwB,EAAqB,OAAT5T,EACZA,EACA,OAAS+jC,EAAWj4B,WACnBqE,IAAaA,EAAc/Q,KAAK8/B,QAAQtE,8BAA8BhnB,IAC3E,IAAIowB,EAAQ,IAAIjC,EACdnuB,EACAmwB,EACAj1B,EACA1P,KACA+Q,GAEF,GAAInQ,EAAM,CACR,GAAIZ,KAAKqjC,aAAar1B,IAAIpN,GAAO,MAAM,IAAIsI,MAAM,wBACjDlJ,KAAKqjC,aAAaj1B,IAAIxN,EAAMgkC,GAI9B,OAFA5kC,KAAKsjC,cAAcsB,EAAMhC,OAASgC,EAClC5kC,KAAKujC,iBAAiB91B,KAAKiC,GACpBk1B,EAIT,OAAOhkC,GACL,IAAI+kC,EAAS3lC,KAAKqjC,aAClB,OAAIsC,EAAO33B,IAAIpN,GAAcqK,OAAO06B,EAAOzkC,IAAIN,IACxCZ,KAAKoyB,OAAO4P,OAAOphC,GAkB5B,SAASjB,EAAgB8jC,GACvBzjC,KAAKyjC,IAAMA,EACX,IAAIe,EAAaxkC,KAAKwkC,WAKtB,GAJAv5B,QAAQu5B,IAAeA,EAAWp3B,QAClCpN,KAAKwkC,WAAaA,EAAa,KAC/BxkC,KAAKykC,WAAa,KAClBzkC,KAAKgkC,SAAWhkC,KAAKikC,SAAWjkC,KAAKkkC,SAAWlkC,KAAKmkC,SAAW,KAC5DnkC,KAAK8/B,QAAQ/R,QAAQ6X,UAAW,CAClC,IAAIpC,EAAiBxjC,KAAKwjC,eAC1B,IAAK,IAAInjC,EAAI,EAAG8N,EAAIq1B,EAAep2B,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACrD,IAAIwL,EAAQ23B,EAAenjC,GACvBoM,EAASZ,EAAMY,OACnB9M,EAAOkmC,iBACLpC,EACA53B,EAAMkZ,aACNtY,EAAOyP,eACPzP,EAAOG,OAAOf,EAAMgB,OACpBJ,EAAOK,eA5KjB,aAmLA,IA2ZWg5B,EA3ZPC,EAAqB,EAGzB,+BAAoClG,EAQlC,YAEElqB,EAEAmqB,GAEA/nB,MACE4T,EAAYqa,gBACZ,OAASD,EAAmBr5B,WAC5B,OAASq5B,EAAmBr5B,WAC5BozB,EACAA,EAAQlP,cAERmV,EACF/lC,KAAK2V,UAAYA,EACjB3V,KAAKuT,MAAQ,EAAAlR,YAAY++B,SACzBphC,KAAK0P,KAAOowB,EAAQ/R,QAAQ6E,UAAU8R,WAAW/uB,GAInD,OAAO/U,GACL,OAAO,OAKX,MAAaw8B,UAAuBqD,EAGlC,YAEE7/B,EAEAwxB,EAEArhB,EAEAshB,EAAiCzG,EAAe7S,MAEhDhB,MACE4T,EAAYsa,gBACZrlC,EACAmhC,EAAmBnhC,EAAMwxB,EAAQnnB,OAAO8F,EAAYsqB,GAAG,EAAAh5B,YAAY28B,YACnE5M,EAAO0N,QACP1N,EACArhB,GAEF/Q,KAAKqyB,eAAiBA,EAIxB,eACE,OAA0BryB,KAAK+Q,YAAarB,KAI9C,sBACE,OAA0B1P,KAAK+Q,YAAapB,YAI9C,qBACE,OAA0B3P,KAAK+Q,YAAamN,eAI9C,OAAOtd,GACL,OAAOZ,KAAKoyB,OAAO4P,OAAOphC,IAzC9B,mBA8CA,sBAA2BuhC,EAYzB,YAEElgC,EAEAmwB,EAEA1iB,GAEAqI,MACE4T,EAAYmP,MACZ74B,EAAUrB,KACVwxB,EACkCnwB,EAAU8O,aAnBhD,KAAAm1B,cAAqB,EAErB,KAAAC,UAAyB,EAEzB,KAAAC,UAAyB,EAiBvBpmC,KAAKiC,UAAYA,EACjBjC,KAAKuT,MAAQtR,EAAUsR,MACvBvT,KAAKqyB,eAAiBpwB,EAAUowB,eAChCpnB,OAAOyE,GAAQ,EAAAgjB,KAAKG,MACpB7yB,KAAKg7B,QAAQtrB,GACb21B,EAAwBrlC,KAAK8/B,QAAS9/B,MAIxC,yBACE,OAAOA,KAAKoyB,OAAOtB,aAAe,EAAApuB,mBAAqB,EAAAF,cAAgBxC,KAAKY,KAI9E,yBACE,OAAOZ,KAAKoyB,OAAOtB,aAAe,EAAApuB,mBAAqB,EAAAD,cAAgBzC,KAAKY,OAKhF,MAAau9B,UAA0BsC,EAarC,YAEE7/B,EAEAwxB,EAEAiU,GAEAtuB,MACE4T,EAAY6N,mBACZ54B,EACAmhC,EAAmBnhC,EAAMwxB,EAAQiU,EAAiBhL,GAAG,EAAAh5B,YAAY28B,WACjE5M,EAAO0N,QACP1N,EACAiU,GAxBJ,KAAAzM,gBAA4C,KAE5C,KAAAI,gBAA4C,KAE5C,KAAA2F,SAA4B,KAGpB,KAAAoD,gBAAuD,KAmB7D/iC,KAAKuT,SAAW,EAAAlR,YAAYye,IAAM,EAAAze,YAAYwf,KAIhD,OAAOjhB,GACL,OAAOZ,KAAKoyB,OAAO4P,OAAOphC,GAI5B,cACE,OAAQZ,KAAKoyB,OAAOzjB,MAClB,KAAKgd,EAAY3Q,MACjB,KAAK2Q,EAAY1K,UAAW,OAAO,EAErC,OAAO,EAIT,QAAQ+hB,GACN/3B,OAAOjL,KAAKq7B,GAAG,EAAAh5B,YAAY28B,WAC3B/zB,QAAQjL,KAAKqgC,SACb,IAAI0C,EAAkB/iC,KAAK+iC,gBAC3B,GAAKA,GACA,GAAIA,EAAgB/0B,IAAIg1B,GAAgB,OAAO/3B,OAAO83B,EAAgB7hC,IAAI8hC,SADzDhjC,KAAK+iC,gBAAkBA,EAAkB,IAAI/6B,IAEnE,IAAIq+B,EAAmBrmC,KAAK+Q,YAC5B9F,OAAOo7B,EAAiB13B,MAAQ,EAAAL,SAASsQ,mBACzC,IAAIqkB,EAAQ,IAAI9E,EACdn+B,KAAKY,KACLoiC,EACmBqD,GAErBpD,EAAM1vB,MAAQvT,KAAKuT,MACnB,IAAIqmB,EAAkB55B,KAAK45B,gBACvBA,IACFqJ,EAAMrJ,gBAAkBA,EAAgB0M,QAAQtD,IAElD,IAAIhJ,EAAkBh6B,KAAKg6B,gBAK3B,OAJIA,IACFiJ,EAAMjJ,gBAAkBA,EAAgBsM,QAAQtD,IAElDD,EAAgB30B,IAAI40B,EAAeC,GAC5BA,GAtEX,sBA2EA,yBAA8Bd,EAU5B,YAEElgC,EAEAmwB,GAEAra,MACE4T,EAAYkP,SACZ54B,EAAUrB,KACVwxB,EACA,EAAA1jB,KAAKmjB,0BACH5vB,EAAU60B,eACV,KACA70B,EAAUo5B,GAAG,EAAAh5B,YAAY28B,UACrB,EAAA38B,YAAY28B,SACZ,EAAA38B,YAAY0W,KAChB,KAAM,KACN9W,EAAU60B,eAAejrB,QAtB/B,KAAAk1B,eAAkC,KAElC,KAAAE,eAAkC,KAuBhCjhC,KAAKiC,UAAYA,EACjBjC,KAAKuT,MAAQtR,EAAUsR,MACvBvT,KAAKqyB,eAAiBpwB,EAAUowB,eAC5BryB,KAAKq7B,GAAG,EAAAh5B,YAAY28B,WACtBqG,EAAwBrlC,KAAK8/B,QAAS9/B,MAK1C,OAAOY,GACL,OAAOZ,KAAKoyB,OAAO4P,OAAOphC,KAK9B,+BAAoCugC,EAGlC,YAEE/O,GAEAra,MACE4T,EAAY3O,eACZ,KACAoV,EAAOtB,aAAe,KACtBsB,EAAO0N,QACP1N,EACAA,EAAO0N,QAAQtE,8BAA8B,OAKjD,kBAAkB+K,GAChB,OAAevmC,KAAKoyB,OAAQoU,eAAe9a,EAAaK,YAAawa,GAIvE,kBAAkBA,GAChB,OAAevmC,KAAKoyB,OAAQoU,eAAe9a,EAAaM,YAAaua,GAIvE,OAAO3lC,GACL,OAAOZ,KAAKoyB,OAAO4P,OAAOphC,KAK9B,MAAa27B,UAAuBkE,EAiBlC,YAEE7/B,EAEAwxB,EAEArhB,EAEAshB,EAAiCzG,EAAe7S,KAChD0tB,GAAqB,GAErB1uB,MACE0uB,EAAe9a,EAAYsL,oBAAsBtL,EAAY0F,gBAC7DzwB,EACAmhC,EAAmBnhC,EAAMwxB,EAAQrhB,EAAYsqB,GAAG,EAAAh5B,YAAY28B,WAC5D5M,EAAO0N,QACP1N,EACArhB,GA/BJ,KAAA0nB,gBAAsD,KAEtD,KAAA9B,cAAuC,KAEvC,KAAAY,oBAAmD,KAEnD,KAAA2F,qBAAiD,KAEjD,KAAAW,mBAA2D,IAAI71B,IAE/D,KAAAuxB,UAAsC,KAEtC,KAAAmN,UAAiC,IAAI3+B,IAqBnC/H,KAAKqyB,eAAiBA,EAIxB,yBACE,OAA0BryB,KAAK+Q,YAAayC,eAG9C,kBACE,OAA0BxT,KAAK+Q,YAAazB,YAG9C,sBACE,OAA0BtP,KAAK+Q,YAAa0C,gBAI9C,qBACE,IAAI4iB,EAA0Br2B,KAAK8/B,QAAQzJ,wBAC3C,OAAmC,OAA5BA,GACAr2B,KAAK2mC,QAAQtQ,EAAwBp0B,WAI9C,QAAQ2kC,GACN,IAAI3G,EAAiCjgC,KACjC8N,EAAO,IAAI/F,IACf,EAAG,CAED,GAAI+F,EAAKE,IAAIiyB,GAAU,MAEvB,GADAnyB,EAAKglB,IAAImN,GACLA,IAAY2G,EAAe,OAAO,EACtC3G,EAAUA,EAAQtJ,oBACXsJ,GACT,OAAO,EAIT,YAAYr/B,EAAc20B,GACxB,IAAI4K,EAAsB5K,EAAQxkB,YAC9B0nB,EAAkBz4B,KAAKy4B,gBAC3B,GAAKA,GACA,GAAIA,EAAgBzqB,IAAIpN,GAAO,CAClC,IAAI+6B,EAAW1wB,OAAOwtB,EAAgBv3B,IAAIN,IACtCg7B,EAASC,EAASF,EAAUpG,GAChC,IAAKqG,EAcH,OAbI1F,EAAkByF,EAAShtB,MAC7B3O,KAAK8/B,QAAQ5G,aACX,EAAA3tB,eAAe4uB,uBACf5E,EAAQuB,eAAejrB,MACL8vB,EAAU5qB,YAAYnQ,KAAKiL,MAC7C0pB,EAAQuB,eAAe5pB,MAGzBlN,KAAK8/B,QAAQtZ,MACX,EAAAjb,eAAe4uB,uBACf5E,EAAQuB,eAAejrB,MAAO0pB,EAAQuB,eAAe5pB,OAGlD,EAETqoB,EAAUqG,QApBU57B,KAAKy4B,gBAAkBA,EAAkB,IAAIzwB,IA2BnE,OALAywB,EAAgBrqB,IAAIxN,EAAM20B,GACtBA,EAAQ8F,GAAG,EAAAh5B,YAAYub,SAAW5d,KAAKq7B,GAAG,EAAAh5B,YAAYq4B,gBACxDnF,EAAQnnB,IAAI,EAAA/L,YAAYq4B,eAE1B16B,KAAK8/B,QAAQvR,sBAAsBngB,IAAI+xB,EAAqB5K,IACrD,EAIT,oBAAoB2N,GAClB,IAAI3J,EAAYv5B,KAAKu5B,UACrB,OAAkB,OAAdA,GAAsBA,EAAUvrB,IAAIk1B,GAA4B3J,EAAUr4B,IAAIgiC,GAC3E,KAIT,oBAAoBA,EAAqBvD,GACvC,IAAIpG,EAAYv5B,KAAKu5B,UAChBA,EACAtuB,QAAQsuB,EAAUvrB,IAAIk1B,IADXljC,KAAKu5B,UAAYA,EAAY,IAAIvxB,IAEjDuxB,EAAUnrB,IAAI80B,EAAavD,GAI7B,OAAO/+B,GACL,OAAOZ,KAAKoyB,OAAO4P,OAAOphC,IA5H9B,mBAgIA,SAAWklC,GACT,yBACA,yBACA,iCAHF,CAAWA,MAAY,KAOvB,MAAae,UAAc1F,EA4DzB,YAEEgC,EAEAlhC,EAEA6M,EAA+B,KAC/B23B,GAAqB,GAErB1uB,MACE0uB,EAAe9a,EAAY1K,UAAY0K,EAAY3Q,MACnDmoB,EACApB,EAAmBoB,EAAwBlhC,EAAUmwB,OAAQnwB,EAAUo5B,GAAG,EAAAh5B,YAAY28B,WACtF/8B,EAAU69B,QACV79B,EAAUmwB,OACVnwB,EAAU8O,aApEd,KAAA4vB,KAAqB,KAErB,KAAAmG,WAAoC,KAEpC,KAAA1D,wBAAmD,KAEnD,KAAA2D,iBAAwB,EAExB,KAAAC,oBAAuC,KAEvC,KAAA3N,UAA+C,KAE/C,KAAAhc,eAAwC,KAEhC,KAAA4pB,IAAW,EAEX,KAAAC,SAAQ,EAEhB,KAAAC,UAAiB,EAEjB,KAAA/L,YAA2B,KAE3B,KAAAsL,UAA+B,KAE/B,KAAAU,aAAkC,KA8ChC,IAAItH,EAAU9/B,KAAK8/B,QAOnB,GANA9/B,KAAKiC,UAAYA,EACjBjC,KAAKuT,MAAQtR,EAAUsR,MACvBvT,KAAKqyB,eAAiBpwB,EAAUowB,eAChCryB,KAAK8O,cAAgBA,EACrB9O,KAAKg7B,QAAQ8E,EAAQ/R,QAAQ6E,UAAUyU,QAAQrnC,QAE1CA,KAAK42B,aAAahL,EAAejS,WAAY,CAChD,IAAI+X,EAAKoO,EAAQ5R,cACjBluB,KAAKinC,IAAMvV,EACXoO,EAAQpR,eAAetgB,IAAIsjB,EAAI1xB,MAIjC,IAAIwT,EAAiBvR,EAAU+V,mBAC/B,GAAIlJ,EAAe,CACjB,IAAI+L,EAAmB/L,EAAc1B,OACrC,IAAKoG,GAAkBqH,GAAoBrH,EAAepG,OACxD,MAAM,IAAIlE,MAAM,gCAElB,GAAI2R,EAAkB,CACpB,IAAIuoB,EAA0BpjC,KAAKojC,wBAC9BA,IAAyBpjC,KAAKojC,wBAA0BA,EAA0B,IAAIp7B,KAC3F,IAAK,IAAI3H,EAAI,EAAGA,EAAIwa,IAAoBxa,EACtC+iC,EAAwBh1B,IAAIoF,EAAenT,GAAGO,KAAKsM,KAAM4B,EAAczO,UAGtE,GAAuB,OAAnBmT,GAA2BA,EAAepG,OAAS,EAC5D,MAAM,IAAIlE,MAAM,gCAElBm8B,EAAwBvF,EAAS9/B,MAzEnC,SACE,OAAOA,KAAKinC,IAId,qBACE,OAAOjnC,KAAKiC,UAAUqlC,eAIxB,kBACE,GAAItnC,KAAKsnC,eAAgB,OAAO,EAChC,IAAIC,EAAcvnC,KAAK+1B,aAAa,UACpC,OAAuB,OAAhBwR,IACLA,EAAY54B,MAAQgd,EAAYmP,OAE9ByM,EAAY54B,MAAQgd,EAAY6N,oBACqB,OAAjC+N,EAAa3N,mBAGe,OAAlD55B,KAAKwmC,eAAe9a,EAAaK,cAC2B,OAA5D/rB,KAAKwmC,eAAe9a,EAAaO,wBAwDrC,QAAQ0U,GACN11B,QAAQjL,KAAK2gC,MACb3gC,KAAK2gC,KAAOA,EACZ,IAAI+F,EAAY/F,EAAK+F,UAChBA,IAAW/F,EAAK+F,UAAYA,EAAY,IAAI3+B,KACjD2+B,EAAU5T,IAAI9yB,MAGd,IAAIwnC,EAAyB7G,EAAKyC,wBAClC,GAAIoE,EAAwB,CAC1B,IAAIpE,EAA0BpjC,KAAKojC,wBAEnC,IAAK,IAAItO,EAAQC,SAASyS,GAAyBnnC,EAAI,EAAG8N,EAAI2mB,EAAM1nB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACtF,IAAIonC,EAAW3qB,UAAUgY,EAAMz0B,IAC3BqnC,EAAWz8B,OAAOu8B,EAAuBtmC,IAAIumC,IAC5CrE,EAGOA,EAAwBp1B,IAAIy5B,IACtCrE,EAAwBh1B,IAAIq5B,EAAUC,IAHtC1nC,KAAKojC,wBAA0BA,EAA0B,IAAIp7B,IAC7Do7B,EAAwBh1B,IAAIq5B,EAAUC,MAS9C,aAAaC,GACX,IAAIb,EAAa9mC,KAAK8mC,WACjBA,IAAY9mC,KAAK8mC,WAAaA,EAAa,IAAI/+B,KACpD++B,EAAWhU,IAAI6U,GACf,IAAIP,EAAeO,EAAMP,aACpBA,IAAcO,EAAMP,aAAeA,EAAe,IAAIr/B,KAC3Dq/B,EAAatU,IAAI9yB,MAInB,eAAe4nC,GACb,IAAI3H,EAAwBjgC,KAC5B,EAAG,CACD,GAAIigC,GAAW2H,EAAQ,OAAO,EAC9B,GAAIA,EAAOj5B,MAAQgd,EAAY1K,UAAW,CACxC,IAAI6lB,EAAa7G,EAAQ6G,WACzB,GAAIA,EACF,IAAK,IAAI1O,EAAUyP,WAAWf,GAAazmC,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAEhF,GADY+3B,EAAQ/3B,GACVugC,eAAegH,GAAS,OAAO,GAI/C3H,EAAUA,EAAQU,WACXV,GACT,OAAO,EAIT,eAAetxB,EAAoBmO,GAAkB,GACnD,GAAIA,EACF,OAAQnO,GACN,KAAK+c,EAAaK,YAAa,CAC7B,IAAI+b,EAAoB9nC,KAAKwmC,eAAe9a,EAAaO,uBACzD,GAAI6b,EAAmB,OAAOA,EAC9B,MAEF,KAAKpc,EAAaM,YAAa,CAC7B,IAAI8b,EAAoB9nC,KAAKwmC,eAAe9a,EAAaQ,uBACzD,GAAI4b,EAAmB,OAAOA,EAC9B,MAEF,QAAS78B,QAAO,GAGpB,IAAI00B,EAAyB3/B,KAC7B,EAAG,CACD,IAAIq5B,EAAYsG,EAAStG,UACzB,GAAIA,EAAW,CACb,IAAI0O,EAAW1O,EAAUn4B,IAAIyN,GAC7B,GAAIo5B,EAAU,OAAOA,EAEvBpI,EAAWA,EAASgB,WACbhB,GACT,OAAO,KAIT,OAAO/+B,GACL,OAAOZ,KAAKoyB,OAAO4P,OAAOphC,GAI5B,SAASonC,GACP,IAAIt0B,EAAUzI,OAAOjL,KAAK0T,SAC1BzI,OAAOyI,EAAQ1F,IAAIg6B,IACnB,IAAIC,EAAiBv0B,EAAQxS,IAAI8mC,GAEjC,OADA/8B,OAAOg9B,EAAMt5B,MAAQgd,EAAYmP,OAClBmN,EAAO/B,aAIxB,WAActlC,EAAcU,EAAUkwB,EAAoB0W,GACxD,IAAI3S,EAAUv1B,KAAK+1B,aAAan1B,GAChC,GAAgB,OAAZ20B,GAAoBA,EAAQ5mB,MAAQgd,EAAYmP,MAAO,CACzD,IAAIqN,EAAuB5S,EACvB9D,EAASyW,EAAaC,EAAcjC,aACxC,OAAQiC,EAAcz4B,KAAKf,MACzB,KAAK,EACL,KAAK,EAEH,OADA,EAAAy5B,QAAQ/kC,IAAI/B,GAAQkwB,EAAQC,GACrB,EAET,KAAK,EACL,KAAK,EAEH,OADA,EAAA4W,SAAShlC,IAAI/B,GAAQkwB,EAAQC,GACtB,EAET,KAAK,EACL,KAAK,EAEH,OADA,EAAAG,SAASvuB,IAAI/B,GAAQkwB,EAAQC,GACtB,EAET,KAAK,EACL,KAAK,EAGH,OAFAxmB,QAAQjL,KAAK8/B,QAAQ/R,QAAQoF,UAC7B,EAAAvB,SAASvuB,IAAI/B,GAAQkwB,EAAQC,GACtB,EAET,KAAK,GAEH,OADA,EAAA6W,SAASxkC,IAAIxC,GAAQkwB,EAAQC,GACtB,EAET,KAAK,GAEH,OADA,EAAA8W,SAASxkC,IAAIzC,GAAQkwB,EAAQC,GACtB,GAKb,OADAxmB,QAAO,GACA,EAIT,QAAQhJ,GACN,OAAOjC,KAAKiC,UAAU0kC,QAAQ1kC,GAIhC,mBAAmBumC,GACjB,IAAIvI,EAAwBjgC,KAC5B,EAAG,CACD,GAAIigC,EAAQh+B,YAAcumC,EAAmB,OAAOvI,EAAQnxB,cAC5DmxB,EAAUA,EAAQU,WACXV,GACT,OAAO,KAIT,oBACE,IAAIA,EAAiBjgC,KACjB8/B,EAAU9/B,KAAK8/B,QACf2I,EAAiB3I,EAAQ2I,eAC7B,GAAIzoC,KAAK2mC,QAAQ8B,GACf,OAAOzoC,KAAK0oC,mBAAmBD,GAAiB,GAElD,IAAIE,EAAuB7I,EAAQ6I,qBACnC,GAAI3oC,KAAK2mC,QAAQgC,GACf,OAAO3oC,KAAK0oC,mBAAmBC,GAAuB,GAGxD,IADA,IAAIC,EAAc9I,EAAQzJ,wBACnB4J,EAAQU,OAASiI,GACtB3I,EAAUh1B,OAAOg1B,EAAQU,MAE3B,IAAI1+B,EAAYg+B,EAAQh+B,UACxB,OAAQA,EAAUrB,KAAK0M,WAAW,IAChC,KAAK,GACH,GAAIrL,GAAa69B,EAAQ+I,sBAAuB,OAAO,EAAAnW,KAAK5uB,IAC5D,GAAI7B,GAAa69B,EAAQgJ,sBAAuB,OAAO,EAAApW,KAAK3uB,IAC5D,MAEF,KAAK,GACH,GAAI9B,GAAa69B,EAAQiJ,mBAAoB,OAAO,EAAArW,KAAKvvB,GACzD,GAAIlB,GAAa69B,EAAQkJ,oBAAqB,OAAO,EAAAtW,KAAKtvB,IAC1D,GAAInB,GAAa69B,EAAQmJ,oBAAqB,OAAO,EAAAvW,KAAKrvB,IAC1D,GAAIpB,GAAa69B,EAAQoJ,oBAAqB,OAAO,EAAAxW,KAAKpvB,IAC1D,MAEF,KAAK,GACH,GAAIrB,GAAa69B,EAAQqJ,oBAAqB,OAAO,EAAAzW,KAAKlvB,GAC1D,GAAIvB,GAAa69B,EAAQsJ,2BAA4B,OAAO,EAAA1W,KAAKlvB,GACjE,GAAIvB,GAAa69B,EAAQuJ,qBAAsB,OAAO,EAAA3W,KAAKjvB,IAC3D,GAAIxB,GAAa69B,EAAQwJ,qBAAsB,OAAO,EAAA5W,KAAKhvB,IAC3D,GAAIzB,GAAa69B,EAAQyJ,qBAAsB,OAAO,EAAA7W,KAAK/uB,IAK/D,OADAsH,QAAO,GACA,EAAAynB,KAAKG,KAId,gBACE,IAAI2W,EAAUxpC,KAAKknC,SACnB,GAAe,GAAXsC,EAAiC,CACnC,IAAIC,EAAWzpC,KAAK0pC,SAAS1pC,MACfA,KAAKknC,SAAWsC,EAA1BC,EAAoC,EACT,EAEjC,OAAkB,GAAXD,EAID,SAASr9B,EAAcw9B,EAAqB,IAAI5hC,KAWtD,GAAI4hC,EAAO37B,IAAIhO,MAAO,OAAO,EAI7B,IAAIigC,EAHJ0J,EAAO7W,IAAI9yB,MAIX,IAkBI22B,EAlBA8B,EAAkBz4B,KAAK0T,QAC3B,GAAI+kB,EAEF,IAAK,IAAIL,EAAUC,WAAWI,GAAkBp4B,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACrF,IAAIs6B,EAAS7d,UAAUsb,EAAQ/3B,IAC/B,GAAIs6B,EAAOhsB,MAAQgd,EAAYmP,MAAO,CACpC,IAAI8O,EAAoBjP,EAAQjrB,KAChC,GAAIk6B,EAAUvO,GAAG,MAC8B,QAAxC4E,EAAU2J,EAAU1O,kBACvB+E,IAAY9zB,GACZ8zB,EAAQyJ,SAASv9B,EAAOw9B,IACvB,OAAO,GAUlB,GAAsD,QAAjDhT,EAAgB32B,KAAK8/B,QAAQ2I,iBAA4BzoC,KAAKiC,UAAU0kC,QAAQhQ,GAAgB,CACnG,IAAI7nB,EAAgB7D,OAAOjL,KAAK0oC,mBAAmB/R,IAEnD,GADA1rB,OAA+B,GAAxB6D,EAAc1B,QAE6B,QAA/C6yB,EAAUnxB,EAAc,GAAGosB,kBAE1B+E,IAAY9zB,GACZ8zB,EAAQyJ,SAASv9B,EAAOw9B,IAE1B,OAAO,OAGJ,GAAoD,QAA/ChT,EAAgB32B,KAAK8/B,QAAQ+J,eAA0B7pC,KAAKiC,UAAU0kC,QAAQhQ,GAAgB,CACxG,IAAI7nB,EAAgB7D,OAAOjL,KAAK0oC,mBAAmB/R,IAEnD,GADA1rB,OAA+B,GAAxB6D,EAAc1B,QAE6B,QAA/C6yB,EAAUnxB,EAAc,GAAGosB,kBAE1B+E,IAAY9zB,GACZ8zB,EAAQyJ,SAASv9B,EAAOw9B,IAE1B,OAAO,OAGJ,GAAoD,QAA/ChT,EAAgB32B,KAAK8/B,QAAQgK,eAA0B9pC,KAAKiC,UAAU0kC,QAAQhQ,GAAgB,CACxG,IAAI7nB,EAAgB7D,OAAOjL,KAAK0oC,mBAAmB/R,IAEnD,GADA1rB,OAA+B,GAAxB6D,EAAc1B,QAE6B,QAA/C6yB,EAAUnxB,EAAc,GAAGosB,kBAE1B+E,IAAY9zB,GACZ8zB,EAAQyJ,SAASv9B,EAAOw9B,IAE1B,OAAO,EACT,GACkD,QAA/C1J,EAAUnxB,EAAc,GAAGosB,kBAE1B+E,IAAY9zB,GACZ8zB,EAAQyJ,SAASv9B,EAAOw9B,IAE1B,OAAO,EAEX,OAAO,EAIT,gBAAgBI,EAAgC,KAAMC,EAAkB,IAAIjiC,KAC1E,IAAI2+B,EAAY1mC,KAAK0mC,UACrB,GAAIA,EACF,IAAK,IAAItO,EAAUyP,WAAWnB,GAAYrmC,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC/E,IAAI4pC,EAAW7R,EAAQ/3B,GACvB,GAAI0pC,EAAgB,CAClB,IAAItR,EAAkBwR,EAAShoC,UAAUw2B,gBACzC,GAAwB,OAApBA,GAA4BA,EAAgBzqB,IAAI+7B,GAAiB,SAEvEC,EAAIlX,IAAImX,GACRA,EAASC,gBAAgBH,EAAgBC,GAG7C,OAAOA,GAhaX,UAqaA,MAAa/K,UAA2B1C,EAGtC,YACE37B,EACAwxB,EACArhB,EACAshB,GAEAta,MACEnX,EACAwxB,EACArhB,EACAshB,GACA,IAdN,uBAyCA,SAASgT,EAAwBvF,EAAkBvK,GACjDtqB,QAAQ60B,EAAQtR,gBAAgBxgB,IAAIunB,EAAQzE,eAC5CgP,EAAQtR,gBAAgBpgB,IAAImnB,EAAQzE,aAAcyE,GAIpD,SAASsG,EAASsO,EAAgBC,GAIhC,GADAn/B,OAAOk/B,EAAMrK,UAAYsK,EAAMtK,SAC3BsK,EAAM12B,QAAS,OAAO,KAC1B,IAAIkoB,EAAiC,KACrC,OAAQuO,EAAMx7B,MACZ,KAAKgd,EAAYmN,mBACf,OAAQsR,EAAMz7B,MACZ,KAAKgd,EAAYrK,UACfme,EAAY2K,EAAOD,GACnBvO,EAA0BuO,EAC1B,MAEF,KAAKxe,EAAYmW,eACVqI,EAAMpK,aACToK,EAAMpK,WAA6BqK,EACnC3K,EAAY2K,EAAOD,GACnBvO,EAA0BuO,GAKhC,MAEF,KAAKxe,EAAY0F,gBACjB,KAAK1F,EAAYjL,KACf,GAAI0pB,EAAMz7B,MAAQgd,EAAYrK,UAAW,CACvCme,EAAY2K,EAAOD,GACnBvO,EAA0BuO,EAC1B,MAEF,MAEF,KAAKxe,EAAYrK,UACf,OAAQ8oB,EAAMz7B,MACZ,KAAKgd,EAAYjL,KACjB,KAAKiL,EAAY0F,gBACjB,KAAK1F,EAAYmN,mBACf2G,EAAY0K,EAAOC,GACnBxO,EAA0BwO,EAC1B,MAEF,KAAKze,EAAYrK,UACfme,EAAY2K,EAAOD,GACnBvO,EAA0BuO,EAC1B,MAEF,KAAKxe,EAAYmW,eACVqI,EAAMpK,aACToK,EAAMpK,WAA6BqK,EACnC3K,EAAY2K,EAAOD,GACnBvO,EAA0BuO,GAKhC,MAEF,KAAKxe,EAAYpS,OACX6wB,EAAMz7B,MAAQgd,EAAYmW,iBACvBqI,EAAMpK,aACToK,EAAMpK,WAA6BqK,EACnC3K,EAAY2K,EAAOD,GACnBvO,EAA0BuO,IAG9B,MAEF,KAAKxe,EAAYmW,eACf,OAAQsI,EAAMz7B,MACZ,KAAKgd,EAAYpS,OACjB,KAAKoS,EAAYmN,mBACjB,KAAKnN,EAAYrK,UACV8oB,EAAMrK,aACTqK,EAAMrK,WAA6BoK,EACnC1K,EAAY0K,EAAOC,GACnBxO,EAA0BwO,IAQpC,GAAIxO,EAAQ,EACUuO,EAAM9O,GAAG,EAAAh5B,YAAYub,SAAWusB,EAAMvT,aAAahL,EAAerS,WAClE6wB,EAAM/O,GAAG,EAAAh5B,YAAYub,SAAWwsB,EAAMxT,aAAahL,EAAerS,UAEpF4wB,EAAMrK,QAAQtZ,MACZ,EAAAjb,eAAe8+B,kFACfzO,EAAO9E,eAAejrB,MAAO+vB,EAAO9E,eAAe5pB,MAIzD,OAAO0uB,EAIT,SAAS6D,EAAY6K,EAAcC,GACjC,IAAIC,EAAaF,EAAI52B,QACrB,GAAI82B,EAAY,CACd,IAAIC,EAAcF,EAAK72B,QAClB+2B,IAAaF,EAAK72B,QAAU+2B,EAAc,IAAIziC,KAEnD,IAAK,IAAI8sB,EAAQC,SAASyV,GAAanqC,EAAI,EAAG8N,EAAI2mB,EAAM1nB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC1E,IAAIwhC,EAAa/kB,UAAUgY,EAAMz0B,IAC7Bs6B,EAAS1vB,OAAOu/B,EAAWtpC,IAAI2gC,IACnC4I,EAAYr8B,IAAIyzB,EAAYlH,KAMlC,SAAgBoH,EAAmBnhC,EAAcwxB,EAAiBsY,EAAkBC,GAAiB,GACnG,OAAQvY,EAAOzjB,MACb,KAAKgd,EAAYqU,KACf,OAAI2K,EAAiB/pC,EACdwxB,EAAOtB,aAAe,EAAAxuB,eAAiB1B,EAEhD,KAAK+qB,EAAYvQ,SACf,OAAIuvB,EAAiB/pC,GACrBqK,QAAQy/B,GACDtY,EAAOtB,aAAe,EAAAluB,gBAAkBhC,GAEjD,KAAK+qB,EAAY6N,mBACjB,KAAK7N,EAAYkP,SACfzI,EAASA,EAAOA,OAGlB,QACE,OAAO2P,EAAmB3P,EAAOxxB,KAAMwxB,EAAOA,OAAQA,EAAOiJ,GAAG,EAAAh5B,YAAY28B,UAAW2L,IAC/ED,EAAa,EAAAhoC,mBAAqB,EAAAC,kBAAoB/B,GA/JpE,0BAA+BimC,EAG7B,YAEE1D,EAEAlhC,EAEA6M,EAA+B,MAE/BiJ,MACEorB,EACAlhC,EACA6M,GACA,KA8HN,wB,28CC9+IA,aACA,QAoBA,IAAiB87B,EAeLC,EAeAC,EA+KAC,EA4/DAC,GAzsEZ,SAAiBJ,GACF,EAAAK,KAAmB,EACnB,EAAAC,YAA0B,EAC1B,EAAAnkC,IAAkB,EAClB,EAAAC,IAAkB,EAClB,EAAAQ,IAAkB,EAClB,EAAAC,IAAkB,EAClB,EAAAC,KAAmB,EACnB,EAAAyjC,QAAsB,EACtB,EAAAxjC,OAAqB,EACrB,EAAAyjC,QAAsB,EACtB,EAAAC,OAAqB,GACrB,EAAAC,MAAoB,EAZnC,CAAiBV,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAe3B,SAAYC,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,iCACA,oBAZF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAexB,SAAYC,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,oBACA,kBACA,kCACA,sCACA,8BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BACA,8BACA,oCAhDF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAmDxB,SAAYS,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,oDACA,qDACA,qDACA,qDACA,mDACA,mDACA,mDACA,mDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDAzHF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA4HnB,SAAYR,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6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U,OAAO,EAAA+0F,cAAc,EAAAzxF,cAAc8K,SAAUtI,EAAYuC,aACrEzD,EAAO6P,EAAU7P,KACrB,GAAa,OAATA,GAAiBA,EAAKzC,OAAS,EAAG,CACpC,IAAI0e,EAAMjc,EAAK,GAGXic,EAAI6R,cAAc,EAAAnvB,YAAY+I,SAChCkoF,EAAyD3zE,EAAKxqB,MAC1DuO,EAAKzC,QAAU,IACjB0e,EAAMjc,EAAK,GACPic,EAAI6R,cAAc,EAAAnvB,YAAY+I,SAChCioF,EAA8BC,EAC9BA,EAAyD3zE,EAAKxqB,MAC1DuO,EAAKzC,OAAS,GAChB0yB,EAAQtZ,MACN,EAAAjb,eAAe0yB,+BACfve,EAAU7T,MAAO,IAAKgE,EAAKzC,OAAOV,aAItCozB,EAAQtZ,MACN,EAAAjb,eAAeyyB,wBACflS,EAAIjgB,SAKVi0B,EAAQtZ,MACN,EAAAjb,eAAeyyB,wBACflS,EAAIjgB,YAIRi0B,EAAQtZ,MACN,EAAAjb,eAAe0mF,wCACfvyE,EAAU7T,MAAO,IAAK,MAK5B,IAAI2zF,EACAC,G,+HC7nVJ,SAAYl0F,GACV,+CACA,mDACA,yCACA,6DACA,qGACA,iHACA,iHACA,mHACA,qHACA,uHACA,iMACA,iFACA,2FACA,+DACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,2FACA,uEACA,mDACA,+EACA,mGACA,uKACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,yDACA,uGACA,qHACA,yEACA,yLACA,qIACA,6IACA,uIACA,uIACA,+GACA,iGACA,yHACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,8HACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,0HACA,wGACA,oIACA,wFACA,4KACA,sHACA,gFACA,oKACA,gLACA,4FACA,0MACA,wKACA,0FACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,0GACA,kKACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,0HACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA1KF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA8K1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,sDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,iCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,qFACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,iFACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,4DACjB,KAAK,IAAK,MAAO,2DACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,6CACjB,KAAK,IAAK,MAAO,0BACjB,KAAK,IAAK,MAAO,qDACjB,KAAK,IAAK,MAAO,4DACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,+FACjB,KAAK,IAAK,MAAO,gEACjB,KAAK,IAAK,MAAO,yEACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,qDACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,4DACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,iFAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,wEAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,iGAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,0DAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,kGAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,yEAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,4BAClB,KAAK,KAAM,MAAO,sEAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,MAAO,MAAO,wFACnB,KAAK,MAAO,MAAO,uGACnB,QAAS,MAAO,M,2GCzVpB,aAMA,OASA,OAMA,OAIA,OA0DA,MAAM0uG,EACJ,YACS5tG,EACAwoD,GADA,KAAAxoD,SACA,KAAAwoD,cAKX,MAAajkC,UAAe,EAAA7L,kBAkB1B,YACEtX,EAA0C,KAC1CmgB,EAA2B,MAE3BjW,MAAMlK,GAnBR,KAAAysG,QAAoB,IAAIzyG,MAExB,KAAA0yG,QAAuB,IAAIxyG,IAE3B,KAAAyyG,QAAuB,IAAIzyG,IAE3B,KAAAyd,UAAmC,KAEnC,KAAAi1F,cAA+B,KAE/B,KAAAC,UAAmC,IAAI1yG,IAojB/B,KAAA2yG,8BAAqC,EAsgBrC,KAAAC,oBAA4C,KAhjClD56G,KAAKguB,QAAUA,GAAoB,IAAInmB,MAIzC,UAEEqF,EAEAgH,EAEA2mG,GAGA,IAAIluG,EAAiB,EAAAkR,cAAc3J,GAC/BoI,EAAe,EAAAC,mBAAmBrI,GAGtC,IAAIlU,KAAKw6G,QAAQxsG,IAAIsO,GAArB,CAKA,GAJAtc,KAAKw6G,QAAQ1nF,IAAIxW,GACjBtc,KAAKu6G,QAAQznF,IAAIxW,GAGJ,OAATpP,EAAe,CACjB,IAAIwtG,EAAY16G,KAAK06G,UACjBI,EAA4B,KAShC,OARIJ,EAAU1sG,IAAIsO,KAAew+F,EAAW7vG,OAAOyvG,EAAUx5G,IAAIob,UACjEtc,KAAKwmB,MACH,EAAAjb,eAAe8pB,iBACfylF,EACIA,EAAS7lD,WAAWppD,MACpB,KACJqI,GAMJ,IAAIzH,EAAS,IAAI,EAAAkkB,OACfkqF,EACI,EAAApsG,WAAW6pB,WACXpkB,EAAK4J,WAAW,EAAAhb,gBACdoR,EAAKytC,QAAQ,EAAAr/C,eAAgB,EAAAQ,eAAesK,QAAU,EACpD,EAAAqB,WAAWmO,cACX,EAAAnO,WAAWkO,QACb,EAAAlO,WAAWssG,KACjBpuG,EACAO,GAGFlN,KAAKguB,QAAQvgB,KAAKhB,GAClBzM,KAAKy6G,cAAgBhuG,EAGrB,IAAIuuG,EAAK,IAAI,EAAA91F,UAAUzY,EAAQzM,KAAK6N,aACpCmtG,EAAGx1F,UAAYxlB,KAAKwlB,UAEpB,IADA,IAAItS,EAAazG,EAAOyG,YAChB8nG,EAAG7yF,KAAK,EAAAxI,MAAMmI,YAAY,CAChC,IAAIjU,EAAY7T,KAAKi7G,uBAAuBD,EAAI,MAC5CnnG,EACFX,EAAWzF,KAAKoG,GAEhB7T,KAAKk7G,cAAcF,KAMzB,uBACEA,EACAnO,EAAyC,MAOzC,IALA,IAAIt5F,EAAQ,EAAAlR,YAAY0W,KACpBoiG,GAAiB,EAGjB7nG,EAAqC,KAClC0nG,EAAG7yF,KAAK,EAAAxI,MAAMyH,KAAK,CACpB+zF,EAAW,IAAGA,EAAWH,EAAG51F,UAChC,IAAI1F,EAAY1f,KAAKo7G,eAAeJ,GAC/Bt7F,EAIApM,EACAA,EAAW7F,KAAKiS,GADJpM,EAAa,CAACoM,GAH7B1f,KAAKk7G,cAAcF,GAQvB,IAAIK,EAAmB,EACnBC,EAAiB,EACjBC,EAAoB,EACpBC,EAAkB,EAClBR,EAAG7yF,KAAK,EAAAxI,MAAM/B,UACZu9F,EAAW,IAAGA,EAAWH,EAAG51F,UAChC7R,GAAS,EAAAlR,YAAYub,OACrBy9F,EAAcL,EAAG51F,SACjBk2F,EAAYN,EAAGx+F,IACXw+F,EAAG7yF,KAAK,EAAAxI,MAAMY,WAChBg7F,EAAeP,EAAG51F,SAClBo2F,EAAaR,EAAGx+F,MAIpB,IAAIi/F,EAAoB,EACpBC,EAAkB,EAClBC,EAAgC,MAAb9O,GAAqBA,EAAUxxE,GAAG,EAAAh5B,YAAY86B,SACjE69E,EAAG7yF,KAAK,EAAAxI,MAAMW,SACZq7F,EACF37G,KAAKwmB,MACH,EAAAjb,eAAeqwG,gEACfZ,EAAGnvG,UAGDsvG,EAAW,IAAGA,EAAWH,EAAG51F,UAChCq2F,EAAeN,EACfO,EAAaV,EAAGx+F,IAChBjJ,GAAS,EAAAlR,YAAYie,QAAU,EAAAje,YAAY86B,SAEpCw+E,IACTpoG,GAAS,EAAAlR,YAAY86B,SAIvB,IAAItpB,EAA8B,KAG9BgoG,EAAQb,EAAGc,OAEf,OADIX,EAAW,IAAGA,EAAWH,EAAG11F,cACxBu2F,GACN,KAAK,EAAAl8F,MAAMS,MACT46F,EAAG7iG,OACH5E,GAAS,EAAAlR,YAAY+d,MAEnBvM,EADEmnG,EAAG7yF,KAAK,EAAAxI,MAAMe,MACJ1gB,KAAK+7G,UAAUf,EAAIznG,EAAOD,EAAY6nG,GAEtCn7G,KAAKg8G,cAAchB,EAAIznG,EAAOD,EAAY6nG,GAExD7nG,EAAa,KACb,MAEF,KAAK,EAAAqM,MAAMyB,IAAK7N,GAAS,EAAAlR,YAAY+e,IACrC,KAAK,EAAAzB,MAAMsC,IACT+4F,EAAG7iG,OACHtE,EAAY7T,KAAKg8G,cAAchB,EAAIznG,EAAOD,EAAY6nG,GACtD7nG,EAAa,KACb,MAEF,KAAK,EAAAqM,MAAMe,KACTs6F,EAAG7iG,OACHtE,EAAY7T,KAAK+7G,UAAUf,EAAIznG,EAAOD,EAAY6nG,GAClD7nG,EAAa,KACb,MAEF,KAAK,EAAAqM,MAAMvE,SACT4/F,EAAG7iG,OACHtE,EAAY7T,KAAKi8G,cAAcjB,EAAIznG,EAAOD,EAAY6nG,GACtD7nG,EAAa,KACb,MAEF,KAAK,EAAAqM,MAAMG,SAAU,CACnB,IAAIsI,EAAQ4yF,EAAGkB,OACflB,EAAG7iG,OACH,IAAIgkG,EAAgBnB,EAAG51F,SACnBg3F,EAAcpB,EAAGx+F,IACjBrE,EAAO6iG,EAAGc,MAAK,GACnB,GAAId,EAAGz1F,mBAAoB,CACzBy1F,EAAGqB,MAAMj0F,GACTvU,EAAY7T,KAAKs8G,eAAetB,GAAI,GACpC,MAEF,GAAI7iG,GAAQ,EAAAwH,MAAM3E,MAAO,CACnB7C,GAAQ,EAAAwH,MAAMsB,WAChBjhB,KAAKwmB,MACH,EAAAjb,eAAegxG,6EACfvB,EAAGnvG,MAAMswG,EAAeC,IAG5BpB,EAAGqB,MAAMj0F,GACTvU,EAAY7T,KAAKs8G,eAAetB,GAAI,GACpC,MAEAA,EAAGwB,QAAQp0F,GAEb7U,GAAS,EAAAlR,YAAYyd,SAGvB,KAAK,EAAAH,MAAM3E,MACX,KAAK,EAAA2E,MAAMsB,UACT+5F,EAAG7iG,OACHtE,EAAY7T,KAAKy8G,sBAAsBzB,EAAIznG,EAAOD,EAAY6nG,GAC9D7nG,EAAa,KACb,MAEF,KAAK,EAAAqM,MAAM2B,UAAW,CACpB,IAAI8G,EAAQ4yF,EAAGkB,OACflB,EAAG7iG,OACC6iG,EAAGc,MAAK,EAAO,EAAAl8F,mBAAmB+H,SAAW,EAAAhI,MAAMzG,YACrD8hG,EAAGwB,QAAQp0F,GACXvU,EAAY7T,KAAK08G,eAAe1B,EAAIznG,EAAOD,EAAY6nG,GACvD7nG,EAAa,OAEb0nG,EAAGqB,MAAMj0F,GACTvU,EAAY7T,KAAKs8G,eAAetB,GAAI,IAEtC,MAEF,KAAK,EAAAr7F,MAAMjB,OACTs8F,EAAG7iG,OAGDtE,GAFFN,GAAS,EAAAlR,YAAYqc,QACT,EAAArc,YAAYub,OACV5d,KAAK28G,kBAAkB3B,EAAIG,GAE3Bn7G,KAAK48G,YAAY5B,GAE/B,MAEF,KAAK,EAAAr7F,MAAMoC,KAAM,CACf,IAAIqG,EAAQ4yF,EAAGkB,OACflB,EAAG7iG,OACC6iG,EAAGc,MAAK,EAAO,EAAAl8F,mBAAmB+H,SAAW,EAAAhI,MAAMzG,YACrD8hG,EAAGwB,QAAQp0F,GACXvU,EAAY7T,KAAK68G,qBAAqB7B,EAAIznG,EAAOD,EAAY6nG,GAC7D7nG,EAAa,OAEb0nG,EAAGqB,MAAMj0F,GACTvU,EAAY7T,KAAKs8G,eAAetB,GAAI,IAEtC,MAEF,QAGMznG,EAAQ,EAAAlR,YAAYub,OAClB49F,GAAcR,EAAG8B,eAAe,EAAAl9F,mBAAmB+H,SACjD+zF,GACF17G,KAAKwmB,MACH,EAAAjb,eAAewxG,2CACf/B,EAAGnvG,MAAM4vG,EAAcC,IAG3B7nG,EAAY7T,KAAKg9G,wBAAwBhC,EAAIG,EAAUI,EAAcC,GACrED,EAAeC,EAAa,GAE5B3nG,EAAY7T,KAAKi9G,YAAYjC,EAAIG,EAA2C,IAAhC5nG,EAAQ,EAAAlR,YAAYie,WAK9Dg7F,GACFt7G,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAMwvG,EAAaC,GAAY,UAGlCI,GACF17G,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAM4vG,EAAcC,GAAa,WAGnC7O,IACHh5F,EAAY7T,KAAKs8G,eAAetB,GAAI,KAQ5C,GAAI1nG,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAC9CL,KAAKwmB,MACH,EAAAjb,eAAe4xG,8BACf7pG,EAAWjT,GAAGwL,OAMpB,GAAI2vG,GAA4B,OAAd3nG,EAChB,OAAQA,EAAUlF,MAChB,KAAK,EAAAL,SAASkP,gBACd,KAAK,EAAAlP,SAASiQ,oBACd,KAAK,EAAAjQ,SAAS8O,iBACd,KAAK,EAAA9O,SAASqQ,qBACd,KAAK,EAAArQ,SAASuQ,qBACZ,OAAO,EAAAnQ,KAAK0uG,6BAAmDvpG,EAAWmnG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAElG,QACExc,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAM0vG,EAAcC,GAAa,WAK5C,OAAO3nG,EAIT,WACE,IAAIymG,EAAUt6G,KAAKs6G,QACnB,OAAOA,EAAQltG,OAASnC,OAAOqvG,EAAQlnE,SAAW,KAIpD,YAAYiqE,GACV,IAAI3C,EAAY16G,KAAK06G,UACrB,GAAIA,EAAU1sG,IAAIqvG,GAAY,CAE5B,OADepyG,OAAOyvG,EAAUx5G,IAAIm8G,IACpB5wG,OAAO6P,aAEzB,OAAO,KAIT,SACE,GAAItc,KAAKs6G,QAAQltG,OAAQ,MAAM,IAAIlE,MAAM,wBACzClJ,KAAKs6G,QAAU,GACft6G,KAAKu6G,QAAQtf,QACbj7F,KAAKw6G,QAAQvf,QACbj7F,KAAK06G,UAAUzf,QAMjB,cACE+f,GAOA,IAFA,IAAIa,EAAQ,EAAAntG,KAAKW,qBAAqB2rG,EAAGsC,iBAAkBtC,EAAGnvG,SAC1Do0B,EAAU47E,EACPb,EAAG7yF,KAAK,EAAAxI,MAAMwG,MAAM,CACzB,IAAI60F,EAAG7yF,KAAK,EAAAxI,MAAMzG,YAShB,OAJAlZ,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,MAAMmvG,EAAGx+F,MAEP,KATsB,CAC7B,IAAIrE,EAAO,EAAAzJ,KAAKW,qBAAqB2rG,EAAGsC,iBAAkBtC,EAAGnvG,SAC7Do0B,EAAQ9nB,KAAOA,EACf8nB,EAAU9nB,GASd,OAAO0jG,EAIT,UACEb,EACAwC,GAA4B,EAC5BC,GAAuB,GAMvB,IAGI/tG,EAHA4S,EAAQ04F,EAAG7iG,OACXgjG,EAAWH,EAAG51F,SAKlB,GAAI9C,GAAS,EAAA3C,MAAMoG,UAAW,CAG5B,IAAI23F,EAAsB1C,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAEpCpQ,EAAY3V,KAAK29G,qBAAqB3C,GAC1C,GAAIrlG,EAAW,CACb,GAAI+nG,EAAqB,CACvB,IAAK1C,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAKjB,OAJAhmB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAET,IAAKmvG,EAAG7yF,KAAK,EAAAxI,MAAMiE,KAKjB,OAJA5jB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAEJmvG,EAAG7yF,KAAK,EAAAxI,MAAMnI,OACjBxX,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,QAGhB8J,EAAU5G,YAAa,EAEzB,OAAO4G,EACF,GAAI+nG,GAAuB19G,KAAK26G,6BAKrC,OAJA36G,KAAKwmB,MACH,EAAAjb,eAAeqyG,iBACf5C,EAAGnvG,SAEE,KAIT,IAAI2xG,EAoBF,OAJAx9G,KAAKwmB,MACH,EAAAjb,eAAeqyG,iBACf5C,EAAGnvG,SAEE,KApBgB,CACvB,IAAIgyG,EAAY79G,KAAK89G,UAAU9C,GAAI,EAAOyC,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAK7C,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAOjB,OANKy3F,GACHz9G,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,MAAMmvG,EAAGx+F,KAAM,KAGf,MAET9M,EAAOmuG,GACFhyG,MAAMgB,MAAQsuG,EACnBzrG,EAAK7D,MAAMkB,IAAMiuG,EAAGx+F,UAUjB,GAAI8F,GAAS,EAAA3C,MAAML,KACxB5P,EAAO,EAAAhB,KAAKujB,gBACV,EAAAvjB,KAAKW,qBAAqB,OAAQ2rG,EAAGnvG,SAAU,IAAI,EAAOmvG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,WAI7E,GAAI8F,GAAS,EAAA3C,MAAMhE,KACxBjM,EAAO,EAAAhB,KAAKujB,gBACV,EAAAvjB,KAAKW,qBAAqB,OAAQ2rG,EAAGnvG,SAAU,IAAI,EAAOmvG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,WAI7E,GAAI8F,GAAS,EAAA3C,MAAMlI,MAAQ6K,GAAS,EAAA3C,MAAMjI,MAC/ChI,EAAO,EAAAhB,KAAKujB,gBACV,EAAAvjB,KAAKW,qBAAqB,OAAQ2rG,EAAGnvG,SAAU,IAAI,EAAOmvG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,WAI7E,GAAI8F,GAAS,EAAA3C,MAAMnI,KACxB9H,EAAO,EAAAhB,KAAKujB,gBACV,EAAAvjB,KAAKW,qBAAqB,OAAQ2rG,EAAGnvG,SAAU,IAAI,EAAOmvG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,WAI7E,GAAI8F,GAAS,EAAA3C,MAAMkG,cACxBm1F,EAAGtjE,aACHhoC,EAAO,EAAAhB,KAAKujB,gBACV,EAAAvjB,KAAKW,qBAAqB,SAAU2rG,EAAGnvG,SAAU,IAAI,EAAOmvG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,UAI/E,IAAI8F,GAAS,EAAA3C,MAAMzG,WAgCxB,OANKukG,GACHz9G,KAAKwmB,MACH,EAAAjb,eAAeyhD,cACfguD,EAAGnvG,SAGA,KAhC6B,CACpC,IAAIjL,EAAOZ,KAAK+9G,cAAc/C,GAC9B,IAAKp6G,EAAM,OAAO,KAClB,IAAIqO,EAAgC,KAGpC,GAAI+rG,EAAG7yF,KAAK,EAAAxI,MAAM6C,UAAW,CAC3B,EAAG,CACD,IAAIw7F,EAAYh+G,KAAK89G,UAAU9C,GAAI,EAAMyC,GACzC,IAAKO,EAAW,OAAO,KAClB/uG,EACAA,EAAWxB,KAAKuwG,GADJ/uG,EAAa,CAAE+uG,SAEzBhD,EAAG7yF,KAAK,EAAAxI,MAAM1E,QACvB,IAAK+/F,EAAG7yF,KAAK,EAAAxI,MAAM8C,aAOjB,OANKg7F,GACHz9G,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,MAAMmvG,EAAGx+F,KAAM,KAGf,KAGNvN,IAAYA,EAAa,IAC9BS,EAAO,EAAAhB,KAAKujB,gBAAgBrxB,EAAMqO,GAAY,EAAO+rG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,OAW7E,KAAOw+F,EAAG7yF,KAAK,EAAAxI,MAAMiE,MAAM,CACzB,IAAIo3F,EAAG7yF,KAAK,EAAAxI,MAAMnI,MAEX,CACL,IAAIymG,EAAejD,EAAGx+F,IAClB0hG,EAAUl+G,KAAK89G,UAAU9C,GAAI,GAAO,GAOxC,OANKyC,GACHz9G,KAAKwmB,MACH,EAAAjb,eAAekb,YACfy3F,EAAUA,EAAQryG,MAAQmvG,EAAGnvG,MAAMoyG,GAAe,QAG/C,KAVPvuG,EAAKX,YAAa,EActB,KAAOisG,EAAG7yF,KAAK,EAAAxI,MAAMqH,cAAc,CACjC,IAAIm3F,EAAenD,EAAG51F,SACtB,IAAK41F,EAAG7yF,KAAK,EAAAxI,MAAMsH,cAOjB,OANKw2F,GACHz9G,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAGT,KAET,IAAIuyG,EAAepD,EAAGnvG,MAAMsyG,EAAcnD,EAAGx+F,KAGzC6hG,GAAW,EACf,GAAIrD,EAAG7yF,KAAK,EAAAxI,MAAMiE,KAAM,CACtB,IAAIo3F,EAAG7yF,KAAK,EAAAxI,MAAMnI,MAShB,OANKimG,GACHz9G,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,QAGT,KARPwyG,GAAW,EAiBf,GANA3uG,EAAO,EAAAhB,KAAKujB,gBACV,EAAAvjB,KAAKW,qBAAqB,QAAS+uG,GACnC,CAAE1uG,GACF2uG,EACArD,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAEpB6hG,EAAU,MAGhB,OAAO3uG,EAOT,qBACEsrG,GAKA,IAyHI9rG,EAzHAkZ,EAAQ4yF,EAAGkB,OACXf,EAAWH,EAAG51F,SACdnW,EAAqC,KACrC41B,EAAiC,KACjCy5E,GAAoB,EACpBC,EAAoD,KACpDC,EAAgC,EAAA5lG,cAAc2H,QAElD,GAAIy6F,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAChBs4F,GAAc,EACdtD,EAAGwB,QAAQp0F,GACXnZ,EAAa,OAER,CACLqvG,GAAc,EACd,EAAG,CACD,IAAIG,GAAmB,EACnB9vG,EAAO,EAAAiK,cAAc2H,QAOzB,GANIy6F,EAAG7yF,KAAK,EAAAxI,MAAM4C,eAChBk8F,EAAazD,EAAG51F,SAChBk5F,GAAc,EACdtD,EAAGwB,QAAQp0F,GACXzZ,EAAO,EAAAiK,cAAci0C,MAEnBmuD,EAAG7yF,KAAK,EAAAxI,MAAMhE,MAAO,CAEvB,GADI8iG,EAAa,IAAGA,EAAazD,EAAG51F,WAChC41F,EAAG7yF,KAAK,EAAAxI,MAAMiH,OAiBhB,OAFAo0F,EAAGqB,MAAMj0F,GACTpoB,KAAK26G,8BAA+B,EAC7B,KAjBiB,CACxB2D,GAAc,EACdtD,EAAGwB,QAAQp0F,GACX,IAAI7mB,EAAIvB,KAAK89G,UAAU9C,GAAI,GAC3B,IAAKz5G,EAAG,OAAO,KACf,GAAIA,EAAEoN,MAAQ,EAAAL,SAAS2J,UAMrB,OALAjY,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfh8G,EAAEsK,OAEJ7L,KAAK26G,8BAA+B,EAC7B,KAET91E,EAA0BtjC,OAMvB,KAAIy5G,EAAG8B,iBA2DZ,OATIwB,EACFt+G,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAGLmvG,EAAGqB,MAAMj0F,GAEXpoB,KAAK26G,6BAA+B2D,EAC7B,KA3DuB,CAC1BG,EAAa,IAAGA,EAAazD,EAAG51F,UACpC,IAAIxkB,EAAO,EAAA8N,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,MAAMmvG,EAAG51F,SAAU41F,EAAGx+F,MAazF,GAZIw+F,EAAG7yF,KAAK,EAAAxI,MAAMoH,YAChBu3F,GAAc,EACdtD,EAAGwB,QAAQp0F,GACPzZ,GAAQ,EAAAiK,cAAci0C,KACxB7sD,KAAKwmB,MACH,EAAAjb,eAAemzG,oCACf1D,EAAGnvG,SAGL8C,EAAO,EAAAiK,cAAc+lG,UAGrB3D,EAAG7yF,KAAK,EAAAxI,MAAMiH,OAAQ,CACxB03F,GAAc,EACdtD,EAAGwB,QAAQp0F,GACX,IAAI1Y,EAAO1P,KAAK89G,UAAU9C,GAC1B,IAAKtrG,EAEH,OADA1P,KAAK26G,6BAA+B2D,EAC7B,KAET,IAAIM,EAAQ,EAAAlwG,KAAK4wB,gBAAgB3wB,EAAM/N,EAAM8O,EAAM,KAAMsrG,EAAGnvG,MAAM4yG,EAAYzD,EAAGx+F,MAC5EvN,EACAA,EAAWxB,KAAKmxG,GADJ3vG,EAAa,CAAE2vG,QAShC,GANKN,GACCtD,EAAGc,QAAU,EAAAn8F,MAAM1E,QACrBqjG,GAAc,EACdtD,EAAGwB,QAAQp0F,IAGXk2F,EAAa,CACf,IAAIM,EAAQ,EAAAlwG,KAAK4wB,gBAAgB3wB,EAAM/N,EAAM,EAAA8N,KAAKqjB,kBAAkBipF,EAAGnvG,MAAMmvG,EAAGx+F,MAAO,KAAMw+F,EAAGnvG,MAAM4yG,EAAYzD,EAAGx+F,MAChHvN,EACAA,EAAWxB,KAAKmxG,GADJ3vG,EAAa,CAAE2vG,GAEhC5+G,KAAKwmB,MACH,EAAAjb,eAAeyhD,cACf4xD,EAAMlvG,KAAK7D,YAEHoD,IAIVsvG,EAAuB39G,EACvB49G,EAAiB7vG,WAehBqsG,EAAG7yF,KAAK,EAAAxI,MAAM1E,QACvB,IAAK+/F,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAUjB,OATIs4F,EACFt+G,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAGdmvG,EAAGqB,MAAMj0F,GAEXpoB,KAAK26G,6BAA+B2D,EAC7B,KAKX,IAAItD,EAAG7yF,KAAK,EAAAxI,MAAMmH,oBAmChB,OATIw3F,EACFt+G,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,MAGdmvG,EAAGqB,MAAMj0F,GAEXpoB,KAAK26G,6BAA+B2D,EAC7B,KAlCP,IAAKA,IACHA,GAAc,EACdtD,EAAGwB,QAAQp0F,GACPm2F,GAAsB,CACxB,IAAIK,EAAQ,EAAAlwG,KAAK4wB,gBACfk/E,EACAD,EACA,EAAA7vG,KAAKqjB,kBAAkBwsF,EAAqB1yG,MAAMuzB,OAClD,KACAm/E,EAAqB1yG,OAElBoD,EACAA,EAAWxB,KAAKmxG,GADJ3vG,EAAa,CAAE2vG,GAEhC5+G,KAAKwmB,MACH,EAAAjb,eAAeyhD,cACf4xD,EAAMlvG,KAAK7D,OAKjB,OADAqD,EAAalP,KAAK89G,UAAU9C,KAiB9Bh7G,KAAK26G,8BAA+B,EAC/B1rG,IAAYA,EAAa,IACvB,EAAAP,KAAKsjB,mBACV/iB,EACAC,EACA21B,GACA,EACAm2E,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,QAtBpBxc,KAAK26G,6BAA+B2D,EAC7B,MA2Bb,eACEtD,GAKA,IAAIG,EAAWH,EAAG51F,SAClB,GAAI41F,EAAG8B,iBAAkB,CACvB,IAkBIjtG,EAlBAjP,EAAOo6G,EAAGsC,iBACV/sG,EAAyB,EAAA7B,KAAKG,2BAA2BjO,EAAMo6G,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MACzF,KAAOw+F,EAAG7yF,KAAK,EAAAxI,MAAMwG,MAAM,CACzB,IAAI60F,EAAG8B,eAAe,EAAAl9F,mBAAmB+H,QAYvC,OAJA3nB,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KAXPjL,EAAOo6G,EAAGsC,iBACV/sG,EAAa,EAAA7B,KAAKmwG,+BAChBtuG,EACA,EAAA7B,KAAKG,2BAA2BjO,EAAMo6G,EAAGnvG,SACzCmvG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAW5B,IAAIw+F,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAMhB,OAAO,EAAArX,KAAKowG,gBAAgBvuG,EAAY,KAAMyqG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAJpE,GADA3M,EAAO7P,KAAK++G,eAAe/D,GACvBnrG,EACF,OAAO,EAAAnB,KAAKowG,gBAAgBvuG,EAAYV,EAAMmrG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,WAMxExc,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAGP,OAAO,KAGT,cACEmvG,EACAznG,EACAD,EACA6nG,EACA6D,GAAc,GAKd,IAAIjqG,EAAe,IAAIlN,MACvB,EAAG,CACD,IAAIkJ,EAAc/Q,KAAKi/G,yBAAyBjE,EAAIznG,EAAOD,EAAY0rG,GACvE,IAAKjuG,EAAa,OAAO,KACzBgE,EAAatH,KAAKsD,SACXiqG,EAAG7yF,KAAK,EAAAxI,MAAM1E,QAEvB,IAAI8yB,EAAM,EAAAr/B,KAAKwwG,wBAAwB5rG,EAAYyB,EAAcimG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAEvF,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAGT,yBACEitE,EACAmE,EACAC,EACAJ,GAAc,GAKd,IAAKhE,EAAG8B,iBAKN,OAJA98G,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KAET,IAAIyM,EAAa,EAAA5J,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SACrE,EAAAwzG,4BAA4B/mG,EAAWpL,OACzClN,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfjlG,EAAWzM,OAGf,IAAI0H,EAAQ4rG,EACRnE,EAAG7yF,KAAK,EAAAxI,MAAMmE,eAChBvQ,GAAS,EAAAlR,YAAYi9G,qBAGvB,IAAI5vG,EAAwB,KACxBsrG,EAAG7yF,KAAK,EAAAxI,MAAMiH,SAChBlX,EAAO1P,KAAK89G,UAAU9C,GAAI,IAG5B,IAAIrrG,EAAiC,KACrC,GAAIqrG,EAAG7yF,KAAK,EAAAxI,MAAMuE,SAQhB,GAPI3Q,EAAQ,EAAAlR,YAAY86B,SACtBn9B,KAAKwmB,MACH,EAAAjb,eAAeg0G,iDACfvE,EAAGnvG,WAGP8D,EAAc3P,KAAKw/G,gBAAgBxE,EAAI,IACrB,OAAO,UACfgE,IACNzrG,EAAQ,EAAAlR,YAAY+d,MAChB7M,EAAQ,EAAAlR,YAAY86B,SACxBn9B,KAAKwmB,MACH,EAAAjb,eAAew9F,wCACfzwF,EAAWzM,OAGL6D,GACV1P,KAAKwmB,MACH,EAAAjb,eAAeyhD,cACfguD,EAAGnvG,MAAMmvG,EAAGx+F,OAIlB,IAAI3Q,EAAQ,EAAAiP,MAAMpN,KAAK4K,EAAWzM,MAAOmvG,EAAGnvG,SAO5C,OANiD,IAA5C0H,EAAQ,EAAAlR,YAAYi9G,sBAA6C,OAAhB3vG,GACpD3P,KAAKwmB,MACH,EAAAjb,eAAek0G,iEACf5zG,GAGG,EAAA6C,KAAKmjB,0BACVvZ,EACA8mG,EACA7rG,EACA7D,EACAC,EACA9D,GAIJ,UACEmvG,EACAznG,EACAD,EACA6nG,GAKA,GAAIH,EAAG7iG,QAAU,EAAAwH,MAAMzG,WAKrB,OAJAlZ,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KAET,IAAIyM,EAAa,EAAA5J,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SACzE,GAAImvG,EAAG7iG,QAAU,EAAAwH,MAAMuH,UAKrB,OAJAlnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAGT,IADA,IAAI6H,EAAU,IAAI7L,OACVmzG,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAAa,CACjC,IAAIwT,EAAS36B,KAAK0/G,eAAe1E,EAAI,EAAA34G,YAAY0W,MACjD,IAAK4hB,EAAQ,OAAO,KAEpB,GADAjnB,EAAQjG,KAAKktB,IACRqgF,EAAG7yF,KAAK,EAAAxI,MAAM1E,OAAQ,CACzB,GAAI+/F,EAAG7yF,KAAK,EAAAxI,MAAMwH,YAChB,MAMA,OAJAnnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,MAIb,IAAIkiC,EAAM,EAAAr/B,KAAKixG,sBACbrnG,EACAhF,EACAC,EACAG,EACAsnG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAGxB,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAGT,eACEitE,EACAmE,GAKA,IAAKnE,EAAG8B,iBAKN,OAJA98G,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KAET,IAAIyM,EAAa,EAAA5J,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SACrEvK,EAA2B,KAC/B,OAAI05G,EAAG7yF,KAAK,EAAAxI,MAAMuE,WAChB5iB,EAAQtB,KAAKw/G,gBAAgBxE,EAAI,IACd,KAEd,EAAAtsG,KAAKkxG,2BACVtnG,EACA6mG,EACA79G,EACA,EAAAwZ,MAAMpN,KAAK4K,EAAWzM,MAAOmvG,EAAGnvG,UAIpC,YACEmvG,GAKA,IAAIG,EAAWH,EAAG51F,SACdooB,EAA0B,KAC9B,GACEwtE,EAAGc,MAAK,IAAS,EAAAn8F,MAAMkH,WACvBm0F,EAAG31F,WAAa,EAAA1F,MAAMwH,aACrB6zF,EAAGz1F,sBAEEioB,EAAOxtC,KAAKw/G,gBAAgBxE,IAAM,OAAO,KAGjD,IAAIjtE,EAAM,EAAAr/B,KAAKmxG,sBAAsBryE,EAAMwtE,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAEjE,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAGT,oBACEitE,GAQA,IAHA,IAAIxnG,EAAiB,IAAI3L,MACrBi4G,GAAe,EACfjzG,EAAQmuG,EAAG51F,UACP41F,EAAG7yF,KAAK,EAAAxI,MAAM8C,cAAc,CAClC,IAAIs9F,EAAgB//G,KAAKggH,mBAAmBhF,GAC5C,IAAK+E,EAAe,OAAO,KAW3B,GAVkC,OAA9BA,EAAcxwG,YAChBuwG,GAAe,EACNA,IACT9/G,KAAKwmB,MACH,EAAAjb,eAAe00G,iEACfF,EAAcl0G,OAEhBk0G,EAAcxwG,YAAc,MAE9BiE,EAAe/F,KAAKsyG,IACf/E,EAAG7yF,KAAK,EAAAxI,MAAM1E,OAAQ,CACzB,GAAI+/F,EAAG7yF,KAAK,EAAAxI,MAAM8C,aAChB,MAMA,OAJAziB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,MAUb,OANK2H,EAAepG,QAClBpN,KAAKwmB,MACH,EAAAjb,eAAe20G,oCACflF,EAAGnvG,MAAMgB,EAAOmuG,EAAGx+F,MAGhBhJ,EAGT,mBACEwnG,GAKA,GAAIA,EAAG7iG,QAAU,EAAAwH,MAAMzG,WAAY,CACjC,IAAIZ,EAAa,EAAA5J,KAAKG,2BACpBmsG,EAAGsC,iBACHtC,EAAGnvG,SAEDyD,EAAoC,KACxC,GAAI0rG,EAAG7yF,KAAK,EAAAxI,MAAMgB,SAAU,CAC1B,IAAIpf,EAAIvB,KAAK89G,UAAU9C,GACvB,IAAKz5G,EAAG,OAAO,KACf,GAAIA,EAAEoN,MAAQ,EAAAL,SAAS2J,UAKrB,OAJAjY,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfh8G,EAAEsK,OAEG,KAETyD,EAA6B/N,EAE/B,IAAIgO,EAAoC,KACxC,GAAIyrG,EAAG7yF,KAAK,EAAAxI,MAAMuE,QAAS,CACzB,IAAI3iB,EAAIvB,KAAK89G,UAAU9C,GACvB,IAAKz5G,EAAG,OAAO,KACf,GAAIA,EAAEoN,MAAQ,EAAAL,SAAS2J,UAKrB,OAJAjY,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfh8G,EAAEsK,OAEG,KAET0D,EAA6BhO,EAE/B,OAAO,EAAAmN,KAAKyxG,oBACV7nG,EACAhJ,EACAC,EACA,EAAAuL,MAAMpN,KAAK4K,EAAWzM,MAAOmvG,EAAGnvG,UAQpC,OALE7L,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAGA,KAKT,gBACEmvG,EACAoF,GAAsB,GAKtB,IAAInxG,EAAa,IAAIpH,MACjBw4G,EAAiC,KACjCP,GAAe,EACfQ,GAAe,EACfz7E,EAA4B,KAIhC,GADA7kC,KAAK46G,oBAAsB,KACvBI,EAAG7yF,KAAK,EAAAxI,MAAMhE,MAAO,CACvB,IAAIq/F,EAAG7yF,KAAK,EAAAxI,MAAMiH,OAgBhB,OAJA5mB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAdP,KADAg5B,EAAW7kC,KAAK89G,UAAU9C,IACX,OAAO,KAgBxB,GAfMn2E,EAASl2B,MAAQ,EAAAL,SAAS2J,UAC5BjY,KAAK46G,oBAAqC/1E,EAE1C7kC,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACf14E,EAASh5B,QAUVmvG,EAAG7yF,KAAK,EAAAxI,MAAM1E,OACjB,OAAI+/F,EAAG7yF,KAAK,EAAAxI,MAAMqG,YACT/W,GAEPjP,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,MAKb,MAAQmvG,EAAG7yF,KAAK,EAAAxI,MAAMqG,aAAa,CACjC,IAAI44F,EAAQ5+G,KAAKugH,eAAevF,EAAIoF,GACpC,IAAKxB,EAAO,OAAO,KAQnB,OAPiB,OAAbyB,GAAsBC,IACxBtgH,KAAKwmB,MACH,EAAAjb,eAAei1G,kDACfH,EAASz/G,KAAKiL,OAEhBy0G,GAAe,GAET1B,EAAMnvG,eACZ,QACMqwG,GACF9/G,KAAKwmB,MACH,EAAAjb,eAAek1G,yDACf7B,EAAMh+G,KAAKiL,OAGf,MAEF,KAAK,EAAA+M,cAAc+lG,SACjBmB,GAAe,EACf,MAEF,KAAK,EAAAlnG,cAAci0C,KACjBwzD,EAAWzB,EAKf,GADA3vG,EAAWxB,KAAKmxG,IACX5D,EAAG7yF,KAAK,EAAAxI,MAAM1E,OAAQ,CACzB,GAAI+/F,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAChB,MAMA,OAJAhmB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,MAIb,OAAOoD,EAGT,eACE+rG,EACAoF,GAAsB,GAKtB,IAAIM,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2B,EAAAx+G,YAAY0W,KAC3C,GAAIqnG,IACEpF,EAAG7yF,KAAK,EAAAxI,MAAMgC,SAChBi/F,EAAa5F,EAAGnvG,QAChBg1G,GAAe,EAAAx+G,YAAYsf,QAClBq5F,EAAG7yF,KAAK,EAAAxI,MAAM+B,YACvBk/F,EAAa5F,EAAGnvG,QAChBg1G,GAAe,EAAAx+G,YAAYqf,WAClBs5F,EAAG7yF,KAAK,EAAAxI,MAAM8B,WACvBm/F,EAAa5F,EAAGnvG,QAChBg1G,GAAe,EAAAx+G,YAAYof,SAEzBu5F,EAAGc,QAAU,EAAAn8F,MAAMiC,UAAU,CAC/B,IAAIwG,EAAQ4yF,EAAGkB,OACflB,EAAG7iG,OACC6iG,EAAGc,QAAU,EAAAn8F,MAAMiH,OACrBo0F,EAAGwB,QAAQp0F,GACNw4F,IAAYA,EAAa5F,EAAGnvG,SACjCg1G,GAAe,EAAAx+G,YAAYuf,UAE3Bo5F,EAAGqB,MAAMj0F,GAef,GAXI4yF,EAAG7yF,KAAK,EAAAxI,MAAM4C,eACZs+F,EACF7gH,KAAKwmB,MACH,EAAAjb,eAAeu1G,+DACf9F,EAAGnvG,SAGL+0G,EAAa5F,EAAGnvG,QAElB60G,GAAS,GAEP1F,EAAG8B,iBAAkB,CAClB4D,IAAQE,EAAa5F,EAAGnvG,SAC7B,IAAIyM,EAAa,EAAA5J,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SACrE6D,EAAwB,KAS5B,IARIixG,EAAa3F,EAAG7yF,KAAK,EAAAxI,MAAMoH,YACzB25F,GACF1gH,KAAKwmB,MACH,EAAAjb,eAAemzG,oCACfpmG,EAAWzM,OAIbmvG,EAAG7yF,KAAK,EAAAxI,MAAMiH,QAEhB,GADAlX,EAAO1P,KAAK89G,UAAU9C,IACjBtrG,EAAM,OAAO,UAElBA,EAAO,EAAAhB,KAAKqjB,kBAAkBipF,EAAGnvG,MAAMmvG,EAAGx+F,MAE5C,IAAI7M,EAAiC,KACrC,GAAIqrG,EAAG7yF,KAAK,EAAAxI,MAAMuE,UACZw8F,GACF1gH,KAAKwmB,MACH,EAAAjb,eAAew1G,4CACfzoG,EAAWzM,OAGX80G,EACF3gH,KAAKwmB,MACH,EAAAjb,eAAey1G,oDACf1oG,EAAWzM,OAGb80G,GAAa,EAEfhxG,EAAc3P,KAAKw/G,gBAAgBxE,EAAI,IAClCrrG,GAAa,OAAO,KAE3B,IAAIivG,EAAQ,EAAAlwG,KAAK4wB,gBACfohF,EACI,EAAA9nG,cAAci0C,KACd8zD,EACE,EAAA/nG,cAAc+lG,SACd,EAAA/lG,cAAc2H,QACpBjI,EACA5I,EACAC,EACA,EAAAmL,MAAMpN,KAAKzC,OAAO21G,GAAa5F,EAAGnvG,UAGpC,OADA+yG,EAAMrrG,OAASstG,EACRjC,EAOT,OALE5+G,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAGA,KAGT,cACEmvG,EACAznG,EACAD,EACA6nG,GAUA,IAAKH,EAAG8B,iBAKN,OAJA98G,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,MAAMmvG,EAAGx+F,MAEP,KAGT,IAAI5b,EAAO,EAAA8N,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SAC/Do1G,GAAuB,EAEvBztG,EAA6C,KACjD,GAAIwnG,EAAG7yF,KAAK,EAAAxI,MAAM6C,UAAW,CAG3B,GAFAy+F,EAAiBjG,EAAG51F,WACpB5R,EAAiBxT,KAAKkhH,oBAAoBlG,IACrB,OAAO,KAC5BznG,GAAS,EAAAlR,YAAY4wB,QAGvB,IAAK+nF,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAKjB,OAJA/lB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,MAAMmvG,EAAGx+F,KAAM,KAEb,KAGLykG,EAAiB,IACnBA,EAAiBjG,EAAG51F,UAGtB,IAAInW,EAAajP,KAAKmhH,gBAAgBnG,GACtC,IAAK/rG,EAAY,OAAO,KACxB,IAAI41B,EAAW7kC,KAAK46G,oBAEhBwG,EAAwC,IAA5B7tG,EAAQ,EAAAlR,YAAYwf,KAChCu/F,IACuB,GAArBnyG,EAAW7B,QACbpN,KAAKwmB,MACH,EAAAjb,eAAe81G,+CACfzgH,EAAKiL,OAGLoD,EAAW7B,OAAS,GAAmC,OAA9B6B,EAAW,GAAGU,aACzC3P,KAAKwmB,MACH,EAAAjb,eAAe+1G,oDACf1gH,EAAKiL,QAKP0H,EAAQ,EAAAlR,YAAYye,KAClB7R,EAAW7B,QACbpN,KAAKwmB,MACH,EAAAjb,eAAeg2G,sCACf3gH,EAAKiL,OAKX,IAAIqD,EAA8B,KAClC,GAAI8rG,EAAG7yF,KAAK,EAAAxI,MAAMiH,UAChB1X,EAAalP,KAAK89G,UAAU9C,GAAI,EAAMoG,IACrB,OAAO,KAGrBlyG,IACHA,EAAa,EAAAR,KAAKqjB,kBAChBipF,EAAGnvG,MAAMmvG,EAAGx+F,MAET4kG,GACHphH,KAAKwmB,MACH,EAAAjb,eAAeyhD,cACf99C,EAAWrD,QAKjB,IAAI8J,EAAY,EAAAjH,KAAKsjB,mBACnB/iB,EACAC,EACA21B,GACA,EACAm2E,EAAGnvG,MAAMo1G,EAAgBjG,EAAGx+F,MAG1B5G,EAAyB,KAC7B,GAAIolG,EAAG7yF,KAAK,EAAAxI,MAAMuH,YAShB,GARI3T,EAAQ,EAAAlR,YAAY86B,SACtBn9B,KAAKwmB,MACH,EAAAjb,eAAey1F,yDACfga,EAAGnvG,WAIP+J,EAAO5V,KAAKwhH,oBAAoBxG,GAAI,IACzB,OAAO,UACPznG,EAAQ,EAAAlR,YAAY86B,SAC/Bn9B,KAAKwmB,MACH,EAAAjb,eAAe81F,gFACf2Z,EAAGnvG,MAAMmvG,EAAGx+F,MAIhB,IAAIuxB,EAAM,EAAAr/B,KAAKwjB,0BACbtxB,EACA0S,EACAC,EACAC,EACAmC,EACAC,EAAI,EAEJolG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAGxB,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAGT,wBAAwBitE,GACtB,IACIp6G,EADAu6G,EAAWH,EAAG51F,SAEdvP,EAAY,EAOhB,GAAImlG,EAAG14F,OAAS,EAAA3C,MAAMvE,UAMpB,GAJExa,EADEo6G,EAAG8B,iBACE,EAAApuG,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SAExD,EAAA6C,KAAK+yG,gCAAgCzG,EAAGnvG,MAAMmvG,EAAGx+F,OAErDw+F,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAKjB,OAJA/lB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,MAAMmvG,EAAGx+F,KAAM,KAEb,UAQT3G,EAAY,EACZ5K,OAAO+vG,EAAG14F,OAAS,EAAA3C,MAAMoG,WACzBnlB,EAAO,EAAA8N,KAAK+yG,gCAAgCzG,EAAGnvG,MAAMmvG,EAAG51F,WAK1D,IAAI67F,EAAiBjG,EAAGx+F,IACpBvN,EAAajP,KAAKmhH,gBAAgBnG,GACtC,OAAK/rG,EAEEjP,KAAK0hH,8BAA8B1G,EAAIp6G,EAAMqO,EAAY4G,EAAWslG,EAAU8F,GAF7D,KAKlB,8BACNjG,EACAp6G,EACAqO,EACA4G,EACAslG,GAAgB,EAChB8F,GAAsB,GAElB9F,EAAW,IAAGA,EAAWv6G,EAAKiL,MAAMgB,OACpCo0G,EAAiB,IAAGA,EAAiB9F,GAEzC,IAAIjsG,EAA8B,KAClC,GAAiB,GAAb2G,GAAuCmlG,EAAG7yF,KAAK,EAAAxI,MAAMiH,QAEvD,KADA1X,EAAalP,KAAK89G,UAAU9C,IACX,OAAO,UAExB9rG,EAAa,EAAAR,KAAKqjB,kBAAkBipF,EAAGnvG,MAAMmvG,EAAGx+F,MAGlD,GAAI3G,IACGmlG,EAAG7yF,KAAK,EAAAxI,MAAMmH,oBAKjB,OAJA9mB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,MAAMmvG,EAAGx+F,KAAM,MAEb,KAIX,IAAI7G,EAAY,EAAAjH,KAAKsjB,mBACnB/iB,EACAC,EACA,MACA,EACA8rG,EAAGnvG,MAAMo1G,EAAgBjG,EAAGx+F,MAG1B5G,EAAyB,KAC7B,GAAIC,EACF,GAAImlG,EAAG7yF,KAAK,EAAAxI,MAAMuH,WAChBtR,EAAO5V,KAAKwhH,oBAAoBxG,GAAI,OAC/B,CACL,IAAI2G,EAAiB3hH,KAAKw/G,gBAAgBxE,EAAI,GAC1C2G,IAAgB/rG,EAAO,EAAAlH,KAAKkzG,0BAA0BD,QAEvD,CACL,IAAK3G,EAAG7yF,KAAK,EAAAxI,MAAMuH,WAKjB,OAJAlnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,MAAMmvG,EAAGx+F,KAAM,KAEb,KAET5G,EAAO5V,KAAKwhH,oBAAoBxG,GAAI,GAEtC,IAAKplG,EAAM,OAAO,KAElB,IAAI7E,EAAc,EAAArC,KAAKwjB,0BACrBtxB,EACA,KACA,EAAAyB,YAAY0W,KACZ,KACApD,EACAC,EACAC,EACAmlG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAExB,OAAO,EAAA9N,KAAKmzG,yBAAyB9wG,GAGvC,sBACEiqG,EACAznG,EACAD,EACA6nG,GAUA,IAAI2G,EAAc9G,EAAG14F,OAAS,EAAA3C,MAAMsB,UAEpC,IAAK+5F,EAAG8B,iBAKN,OAJA98G,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KAGT,IAAIyM,EAAa,EAAA5J,KAAKG,2BACpBmsG,EAAGsC,iBACHtC,EAAGnvG,SAGD2H,EAA6C,KACjD,GAAIwnG,EAAG7yF,KAAK,EAAAxI,MAAM6C,UAAW,CAE3B,KADAhP,EAAiBxT,KAAKkhH,oBAAoBlG,IACrB,OAAO,KAC5BznG,GAAS,EAAAlR,YAAY4wB,QAGvB,IAAI3jB,EAAoC,KACxC,GAAI0rG,EAAG7yF,KAAK,EAAAxI,MAAMgB,SAAU,CAC1B,IAAIpf,EAAIvB,KAAK89G,UAAU9C,GACvB,IAAKz5G,EAAG,OAAO,KACf,GAAIA,EAAEoN,MAAQ,EAAAL,SAAS2J,UAKrB,OAJAjY,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfh8G,EAAEsK,OAEG,KAETyD,EAA6B/N,EAG/B,IAAIkS,EAA0C,KAC9C,GAAIunG,EAAG7yF,KAAK,EAAAxI,MAAMoB,YAAa,CACzB+gG,GACF9hH,KAAKwmB,MACH,EAAAjb,eAAew2G,oDACf/G,EAAGnvG,SAGP,EAAG,CACD,IAAI6D,EAAO1P,KAAK89G,UAAU9C,GAC1B,IAAKtrG,EAAM,OAAO,KAClB,GAAIA,EAAKf,MAAQ,EAAAL,SAAS2J,UAKxB,OAJAjY,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACf7tG,EAAK7D,OAEA,KAEJi2G,IACEruG,IAAiBA,EAAkB,IACxCA,EAAgBhG,KAAoBiC,UAE/BsrG,EAAG7yF,KAAK,EAAAxI,MAAM1E,QAGzB,IAAK+/F,EAAG7yF,KAAK,EAAAxI,MAAMuH,WAKjB,OAJAlnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAGT,IACIkF,EADA2C,EAAU,IAAI7L,MA0BlB,GAxBIi6G,GACF72G,QAAQwI,GACR1C,EAAc,EAAArC,KAAKszG,2BACjB1pG,EACAhF,EACAC,EACAC,EACAlE,EACA,KACAoE,EACAsnG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,OAGxBzL,EAAc,EAAArC,KAAKuzG,uBACjB3pG,EACAhF,EACAC,EACAC,EACAlE,EACAmE,EACAC,EACAsnG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,OAGrBw+F,EAAG7yF,KAAK,EAAAxI,MAAMwH,YACjB,EAAG,CACD,IAAIwT,EAAS36B,KAAKkiH,iBAAiBlH,EAAIjqG,GACvC,GAAI4pB,EACEA,EAAOhsB,MAAQ,EAAAL,SAAS0O,eAC1BjM,EAAYsM,eAAqCsd,GAEjD1vB,OAAO0vB,aAAkB,EAAA5d,sBACzBrJ,EAAQjG,KAA2BktB,SAIrC,GADA36B,KAAKk7G,cAAcF,GACfA,EAAG7yF,KAAK,EAAAxI,MAAMmI,WAKhB,OAJA9nB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,YAGHmvG,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAG1B,OADApW,EAAYlF,MAAMkB,IAAMiuG,EAAGx+F,IACpBzL,EAGT,qBAAqBiqG,GAInB,IACIp6G,EADAu6G,EAAWH,EAAG51F,SASlB,GALExkB,EADEo6G,EAAG8B,iBACE,EAAApuG,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SAExD,EAAA6C,KAAK+yG,gCAAgCzG,EAAGnvG,MAAMmvG,EAAGx+F,OAGrDw+F,EAAG7yF,KAAK,EAAAxI,MAAMuH,WAKjB,OAJAlnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,MAAMmvG,EAAGx+F,KAAM,KAEb,KAGT,IAAI9I,EAAU,IAAI7L,MACdkJ,EAAc,EAAArC,KAAKuzG,uBACrBrhH,EACA,KACA,EAAAyB,YAAY0W,KACZ,KACA,KACA,KACArF,EACAsnG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAExB,IAAKw+F,EAAG7yF,KAAK,EAAAxI,MAAMwH,YACjB,EAAG,CACD,IAAIwT,EAAS36B,KAAKkiH,iBAAiBlH,EAAIjqG,GACvC,GAAI4pB,EACEA,EAAOhsB,MAAQ,EAAAL,SAAS0O,eAC1BjM,EAAYsM,eAAqCsd,GAEjD1vB,OAAO8F,aAAuB,EAAAgM,sBAC9BrJ,EAAQjG,KAA2BktB,SAIrC,GADA36B,KAAKk7G,cAAcF,GACfA,EAAG7yF,KAAK,EAAAxI,MAAMmI,WAKhB,OAJA9nB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,YAGHmvG,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAG1B,OADApW,EAAYlF,MAAMkB,IAAMiuG,EAAGx+F,IACpB,EAAA9N,KAAKyzG,sBAAsBpxG,GAGpC,iBACEiqG,EACA5oF,GAUA,IAAI0vF,EAAc1vF,EAAOzjB,MAAQ,EAAAL,SAASqQ,qBACtCw8F,EAAW,EACX7nG,EAAqC,KACzC,GAAI0nG,EAAG7yF,KAAK,EAAAxI,MAAMyH,IAAK,CACrB+zF,EAAWH,EAAG51F,SACd,EAAG,CACD,IAAI1F,EAAY1f,KAAKo7G,eAAeJ,GACpC,IAAKt7F,EAAW,MACXpM,IAAYA,EAAa,IAAIzL,OAClCyL,EAAW7F,KAAKiS,SACTs7F,EAAG7yF,KAAK,EAAAxI,MAAMyH,KACJ,OAAf9T,GAAuBwuG,GACzB9hH,KAAKwmB,MACH,EAAAjb,eAAe4xG,8BACf,EAAAriG,MAAMpN,KAAK4F,EAAW,GAAGzH,MAAOyH,EAAWA,EAAWlG,OAAS,GAAGvB,QAMxE,IAAI0H,EAAQ6e,EAAO7e,MAAQ,EAAAlR,YAAY86B,QAGnC2kF,IAAavuG,GAAS,EAAAlR,YAAY+2B,SAEtC,IAAIgpF,EAAc,EACdC,EAAY,EACZrH,EAAG7yF,KAAK,EAAAxI,MAAMgC,SACZmgG,EACF9hH,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,QAAS,WAGd0H,GAAS,EAAAlR,YAAYsf,OACrBygG,EAAcpH,EAAG51F,SACjBi9F,EAAYrH,EAAGx+F,KAEZ2+F,IAAUA,EAAWH,EAAG51F,WACpB41F,EAAG7yF,KAAK,EAAAxI,MAAM8B,UACnBqgG,EACF9hH,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,QAAS,YAGd0H,GAAS,EAAAlR,YAAYof,QACrB2gG,EAAcpH,EAAG51F,SACjBi9F,EAAYrH,EAAGx+F,KAEZ2+F,IAAUA,EAAWH,EAAG51F,WACpB41F,EAAG7yF,KAAK,EAAAxI,MAAM+B,aACnBogG,EACF9hH,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,QAAS,cAGd0H,GAAS,EAAAlR,YAAYqf,UACrB0gG,EAAcpH,EAAG51F,SACjBi9F,EAAYrH,EAAGx+F,KAEZ2+F,IAAUA,EAAWH,EAAG51F,WAG/B,IAAIk9F,EAAc,EACdC,EAAY,EACZpG,EAAgB,EAChBC,EAAc,EACdpB,EAAG7yF,KAAK,EAAAxI,MAAMmC,SACZggG,EACF9hH,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,QAAS,WAGd0H,GAAS,EAAAlR,YAAYyf,OACrBwgG,EAActH,EAAG51F,SACjBm9F,EAAYvH,EAAGx+F,KAEZ2+F,IAAUA,EAAWH,EAAG51F,YAE7B7R,GAAS,EAAAlR,YAAY28B,SACjBg8E,EAAG7yF,KAAK,EAAAxI,MAAMG,YACZgiG,IAAgB1vF,EAAOiJ,GAAG,EAAAh5B,YAAYyd,UACxC9f,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,QAAS,aAGd0H,GAAS,EAAAlR,YAAYyd,SACrBq8F,EAAgBnB,EAAG51F,SACnBg3F,EAAcpB,EAAGx+F,KAEd2+F,IAAUA,EAAWH,EAAG51F,WAE3BgN,EAAO7e,MAAQ,EAAAlR,YAAY4wB,UAAS1f,GAAS,EAAAlR,YAAYmgH,kBAG/D,IAAIC,EAAqB,EACrBC,EAAmB,EACvB,GAAI1H,EAAGc,QAAU,EAAAn8F,MAAMiC,SAAU,CAC/B,IAAIwG,EAAQ4yF,EAAGkB,OACflB,EAAG7iG,OACC6iG,EAAGc,QAAU,EAAAn8F,MAAMiH,OACrBo0F,EAAGwB,QAAQp0F,GACX7U,GAAS,EAAAlR,YAAYuf,SACrB6gG,EAAgBzH,EAAG51F,SACnBs9F,EAAc1H,EAAGx+F,IACZ2+F,IAAUA,EAAWsH,IAE1BzH,EAAGqB,MAAMj0F,GAKb,IAkEIxnB,EAlEAwnB,EAAQ4yF,EAAGkB,OACXkE,GAAgB,EAChB9hF,GAAW,EACXqkF,EAAgB,EAChBC,EAAc,EACdxB,GAAW,EACXxmB,EAAgB,EAChBioB,EAAc,EA4DlB,GA3DKf,IACC9G,EAAG7yF,KAAK,EAAAxI,MAAMmB,KACZk6F,EAAGc,MAAK,EAAM,EAAAl8F,mBAAmB+H,SAAW,EAAAhI,MAAMzG,YAAe8hG,EAAGz1F,mBAatEy1F,EAAGqB,MAAMj0F,IAZT7U,GAAS,EAAAlR,YAAYye,IACrBwd,GAAW,EACXqkF,EAAW3H,EAAG51F,SACdw9F,EAAS5H,EAAGx+F,IACP2+F,IAAUA,EAAWwH,GACtBpvG,EAAQ,EAAAlR,YAAYuf,UACtB5hB,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAM42G,EAAeC,GAAc,aAMnC1H,EAAG7yF,KAAK,EAAAxI,MAAMkC,KACnBm5F,EAAGc,MAAK,EAAM,EAAAl8F,mBAAmB+H,SAAW,EAAAhI,MAAMzG,YAAe8hG,EAAGz1F,mBAatEy1F,EAAGqB,MAAMj0F,IAZT7U,GAAS,EAAAlR,YAAYwf,IACrBu/F,GAAW,EACXxmB,EAAWogB,EAAG51F,SACdy9F,EAAS7H,EAAGx+F,IACP2+F,IAAUA,EAAWvgB,GACtBrnF,EAAQ,EAAAlR,YAAYuf,UACtB5hB,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAM42G,EAAeC,GAAc,aAMnC1H,EAAG7yF,KAAK,EAAAxI,MAAMzE,eACvB3H,GAAS,EAAAlR,YAAY6Y,YACrBklG,GAAgB,EACXjF,IAAUA,EAAWH,EAAG51F,UACzB7R,EAAQ,EAAAlR,YAAYyf,QACtB9hB,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAMy2G,EAAaC,GAAY,UAGlChvG,EAAQ,EAAAlR,YAAYyd,UACtB9f,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAMswG,EAAeC,GAAc,YAGtC7oG,EAAQ,EAAAlR,YAAYuf,UACtB5hB,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAM42G,EAAeC,GAAc,cAO1CtC,EACFx/G,EAAO,EAAA8N,KAAKo0G,4BAA4B9H,EAAGnvG,aACtC,CACL,IAAMyyB,IAAY8iF,GAAapG,EAAG7yF,KAAK,EAAAxI,MAAMqH,aAAc,CACpDm0F,IAAUA,EAAWH,EAAG51F,UAEzB7R,EAAQ,EAAAlR,YAAYsf,OACtB3hB,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAMu2G,EAAaC,GAAY,WAE3B9uG,EAAQ,EAAAlR,YAAYqf,WAKpBnO,EAAQ,EAAAlR,YAAYof,UAJ7BzhB,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAMu2G,EAAaC,GAAY,aAQlC9uG,EAAQ,EAAAlR,YAAYyf,QACtB9hB,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAMy2G,EAAaC,GAAY,UAGlChvG,EAAQ,EAAAlR,YAAYyd,UACtB9f,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAMswG,EAAeC,GAAc,YAG1C,IAAI2G,EAAW/iH,KAAKgjH,oBAAoBhI,EAAIznG,EAAOD,GACnD,OAAKyvG,GASL/H,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPk8F,IATDxvG,EAAQ,EAAAlR,YAAYuf,UACtB5hB,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAM42G,EAAeC,GAAc,YAGnC,MAKX,IAAK1H,EAAG8B,eAAe,EAAAl9F,mBAAmB8H,QAKxC,OAJA1nB,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KAEJsvG,IAAUA,EAAWH,EAAG51F,UAC7BxkB,EAAO,EAAA8N,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SAEjE,IAAI2H,EAA6C,KACjD,GAAIwnG,EAAG7yF,KAAK,EAAAxI,MAAM6C,UAAW,CAC3B,IAAIygG,EAAsBjI,EAAG51F,SAE7B,KADA5R,EAAiBxT,KAAKkhH,oBAAoBlG,IACrB,OAAO,KACxBoF,EACFpgH,KAAKwmB,MACH,EAAAjb,eAAe23G,2DACflI,EAAGnvG,MAAMo3G,EAAqBjI,EAAGx+F,MAE1B8hB,GAAY8iF,EACrBphH,KAAKwmB,MACH,EAAAjb,eAAe43G,wCACfnI,EAAGnvG,MAAMo3G,EAAqBjI,EAAGx+F,MAGnCjJ,GAAS,EAAAlR,YAAY4wB,QAKzB,GAAI+nF,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAAY,CAC5B,IAAIk7F,EAAiBjG,EAAG51F,SACpBnW,EAAajP,KAAKmhH,gBAAgBnG,EAAIoF,GAC1C,IAAKnxG,EAAY,OAAO,KACxB,IAAI41B,EAAW7kC,KAAK46G,oBACpB,GAAIwF,EACF,IAAK,IAAI//G,EAAI,EAAG8N,EAAIc,EAAW7B,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACjD,IAAI29G,EAAY/uG,EAAW5O,GAC3B,GAAI29G,EAAUplF,MACZ,EAAAv2B,YAAYsf,OACZ,EAAAtf,YAAYqf,UACZ,EAAArf,YAAYof,QACZ,EAAApf,YAAYuf,UACX,CACD,IAAI9I,EAA2B,EAAApK,KAAK00G,uBAClCpF,EAAUp9G,KACV,KACAo9G,EAAUzqG,MAAQ,EAAAlR,YAAY28B,SAC9Bg/E,EAAUtuG,KACV,KACAsuG,EAAUnyG,OAEZiN,EAAyBoF,eAAiB7d,EAC1C29G,EAAUllG,yBAA2BA,EACrCsZ,EAAO1e,QAAQjG,KAAKqL,SAGfwlB,EACLrvB,EAAW7B,QACbpN,KAAKwmB,MACH,EAAAjb,eAAeg2G,sCACf3gH,EAAKiL,OAGAu1G,GACgB,GAArBnyG,EAAW7B,QACbpN,KAAKwmB,MACH,EAAAjb,eAAe81G,+CACfzgH,EAAKiL,OAGLoD,EAAW7B,OAAS,GAAmC,OAA9B6B,EAAW,GAAGU,aACzC3P,KAAKwmB,MACH,EAAAjb,eAAe+1G,oDACf1gH,EAAKiL,QAGa,eAAbjL,EAAKsM,MACdlN,KAAKwmB,MACH,EAAAjb,eAAe83G,+BACfziH,EAAKiL,MAAO,eAIhB,IAAIqD,EAA8B,KAClC,GAAI8rG,EAAG7yF,KAAK,EAAAxI,MAAMiH,QAahB,GAZIhmB,EAAK+N,MAAQ,EAAAL,SAAS4M,YACxBlb,KAAKwmB,MACH,EAAAjb,eAAe+3G,2DACftI,EAAGnvG,SAEIu1G,GACTphH,KAAKwmB,MACH,EAAAjb,eAAeg4G,oDACfvI,EAAGnvG,SAGPqD,EAAalP,KAAK89G,UAAU9C,EAAIp6G,EAAK+N,MAAQ,EAAAL,SAAS4M,aAAekmG,IAChElyG,EAAY,OAAO,UAExBA,EAAa,EAAAR,KAAKqjB,kBAAkBipF,EAAGnvG,MAAMmvG,EAAGx+F,MAC3C4kG,GAAYxgH,EAAK+N,MAAQ,EAAAL,SAAS4M,aACrClb,KAAKwmB,MACH,EAAAjb,eAAeyhD,cACf99C,EAAWrD,OAKjB,IAAI8J,EAAY,EAAAjH,KAAKsjB,mBACnB/iB,EACAC,EACA21B,GACA,EACAm2E,EAAGnvG,MAAMo1G,EAAgBjG,EAAGx+F,MAG1B5G,EAAyB,KAC7B,GAAIolG,EAAG7yF,KAAK,EAAAxI,MAAMuH,YAkBhB,GAjBI3T,EAAQ,EAAAlR,YAAY86B,QACtBn9B,KAAKwmB,MACH,EAAAjb,eAAey1F,yDACfga,EAAGnvG,SAEI0H,EAAQ,EAAAlR,YAAYyd,SAC7B9f,KAAKwmB,MACH,EAAAjb,eAAei4G,qEACfxI,EAAGnvG,QAASjL,EAAKsM,MAEV40G,GACT9hH,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAGhB+J,EAAO5V,KAAKwhH,oBAAoBxG,GAAI,IAC/BplG,EAAM,OAAO,UACPrC,GAAS,EAAAlR,YAAY86B,QAAU,EAAA96B,YAAYyd,WAAegiG,GACrE9hH,KAAKwmB,MACH,EAAAjb,eAAe81F,gFACf2Z,EAAGnvG,SAIP,IAAI43G,EAAY,EAAA/0G,KAAK2wB,wBACnBz+B,EACA0S,EACAC,EACAC,EACAmC,EACAC,EACAolG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAGxB,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACP48F,EAEF,GAAIrD,EACTpgH,KAAKwmB,MACH,EAAAjb,eAAem4G,sCACf9iH,EAAKiL,WAGF,KAAIyyB,IAAY8iF,EAOhB,CACD7tG,EAAQ,EAAAlR,YAAYyd,UACtB9f,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAMswG,EAAeC,GAAc,YAItC7oG,EAAQ,EAAAlR,YAAYye,KACtB9gB,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAM82G,EAAUC,GAAS,OAI5BrvG,EAAQ,EAAAlR,YAAYwf,KACtB7hB,KAAKwmB,MACH,EAAAjb,eAAe2xG,gCACflC,EAAGnvG,MAAM+uF,EAAUioB,GAAS,OAIhC,IAAInzG,EAAwB,KAU5B,GATIsrG,EAAG7yF,KAAK,EAAAxI,MAAMoH,WAChB/mB,KAAKwmB,MACH,EAAAjb,eAAeo4G,sCACf3I,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAGtBw+F,EAAG7yF,KAAK,EAAAxI,MAAMmE,eAChBvQ,GAAS,EAAAlR,YAAYi9G,qBAEnBtE,EAAG7yF,KAAK,EAAAxI,MAAMiH,QAEhB,GADAlX,EAAO1P,KAAK89G,UAAU9C,IACjBtrG,EAAM,OAAO,UAElB1P,KAAKwmB,MACH,EAAAjb,eAAeyhD,cACfguD,EAAGnvG,SAGP,IAAI8D,EAAiC,KACrC,GAAIqrG,EAAG7yF,KAAK,EAAAxI,MAAMuE,UAChBvU,EAAc3P,KAAKw/G,gBAAgBxE,IAC9BrrG,GAAa,OAAO,KAE3B,IAAI9D,EAAQmvG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,KACe,IAA5CjJ,EAAQ,EAAAlR,YAAYi9G,sBAA8D,IAA/B/rG,EAAQ,EAAAlR,YAAYyf,UAAgBggG,GAA+B,OAAhBnyG,GACzG3P,KAAKwmB,MACH,EAAAjb,eAAek0G,iEACf5zG,GAGJ,IAAI+3G,EAAW,EAAAl1G,KAAK00G,uBAClBxiH,EACA0S,EACAC,EACA7D,EACAC,EACA9D,GAGF,OADAmvG,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACP+8F,EApEP5jH,KAAKwmB,MACH,EAAAjb,eAAe81F,gFACfzgG,EAAKiL,OAoET,OAAO,KAGT,oBACEmvG,EACAznG,EACAD,GAKmB,OAAfA,GAAuBA,EAAWlG,OAAS,GAC7CpN,KAAKwmB,MACH,EAAAjb,eAAe4xG,8BACf,EAAAriG,MAAMpN,KAAK4F,EAAW,GAAGzH,MAAOyH,EAAWA,EAAWlG,OAAS,GAAGvB,QAItE,IAAIgB,EAAQmuG,EAAG51F,SACf,GAAI41F,EAAG8B,iBAAkB,CAEvB,GAAU,OADD9B,EAAGsC,iBAEV,GAAItC,EAAG7yF,KAAK,EAAAxI,MAAMiH,OAAQ,CACxB,IAAI7Q,EAAU/V,KAAK89G,UAAU9C,GAC7B,IAAKjlG,EAAS,OAAO,KACrB,GAAIA,EAAQpH,MAAQ,EAAAL,SAAS2J,UAK3B,OAJAjY,KAAKwmB,MACH,EAAAjb,eAAeyhD,cACfguD,EAAGnvG,SAEE,KAET,GAAImvG,EAAG7yF,KAAK,EAAAxI,MAAMsH,cAAe,CAC/B,GAAI+zF,EAAG7yF,KAAK,EAAAxI,MAAMiH,OAAQ,CACxB,IAAI5Q,EAAYhW,KAAK89G,UAAU9C,GAC/B,OAAKhlG,EACDA,EAAUrH,MAAQ,EAAAL,SAAS2J,WAC7BjY,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvnG,EAAUnK,OAEL,MAEF,EAAA6C,KAAKm1G,qBAAoC9tG,EAASC,EAAWzC,EAAOynG,EAAGnvG,MAAMgB,EAAOmuG,EAAGx+F,MARvE,KAUvBxc,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,YAIhB7L,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAGP,OAAO,KAGT,eACEmvG,EACAznG,EACAD,EACA6nG,GAKA,GAAIH,EAAG8B,iBAAkB,CACvB,IAAIxkG,EAAa,EAAA5J,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SACzE,GAAImvG,EAAG7yF,KAAK,EAAAxI,MAAMuH,WAAY,CAC5B,IAAIxT,EAAU,IAAI7L,MACdkJ,EAAc,EAAArC,KAAKyjB,2BACrB7Z,EACAhF,EACAC,EACAG,EACAsnG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAExB,MAAQw+F,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAAa,CACjC,IAAIwT,EAAS36B,KAAKi7G,uBAAuBD,EAAIjqG,GAC7C,GAAI4pB,EAAQjnB,EAAQjG,KAAKktB,QAGvB,GADA36B,KAAKk7G,cAAcF,GACfA,EAAG7yF,KAAK,EAAAxI,MAAMmI,WAKhB,OAJA9nB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAMb,OAFAkF,EAAYlF,MAAMkB,IAAMiuG,EAAGx+F,IAC3Bw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACP9V,EAEP/Q,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAGP,OAAO,KAGT,YACEmvG,EACAG,EACAhnG,GAKA,IAAID,EAAuC,KACvCumG,EAAgBxvG,OAAOjL,KAAKy6G,eAChC,GAAIO,EAAG7yF,KAAK,EAAAxI,MAAMuH,WAAY,CAC5B,IAAIxT,EAAU,IAAI7L,MAClB,MAAQmzG,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAAa,CACjC,IAAIwT,EAAS36B,KAAK8jH,kBAAkB9I,GACpC,IAAKrgF,EAAQ,OAAO,KAEpB,GADAjnB,EAAQjG,KAAKktB,IACRqgF,EAAG7yF,KAAK,EAAAxI,MAAM1E,OAAQ,CACzB,GAAI+/F,EAAG7yF,KAAK,EAAAxI,MAAMwH,YAChB,MAMA,OAJAnnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,MAIb,GAAImvG,EAAG7yF,KAAK,EAAAxI,MAAMkB,MAAO,CACvB,IAAIm6F,EAAG7yF,KAAK,EAAAxI,MAAMkG,eAOhB,OAJA7lB,KAAKwmB,MACH,EAAAjb,eAAeyyB,wBACfg9E,EAAGnvG,SAEE,KANPqI,EAAO,EAAAxF,KAAKq1G,8BAA8B/I,EAAGtjE,aAAcsjE,EAAGnvG,SASlE,IAAIkiC,EAAM,EAAAr/B,KAAKs1G,sBAAsBtwG,EAASQ,EAAMC,EAAW6mG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MACrF,GAAa,OAATtI,EAAe,CACjB,IAAIoI,EAAerR,OAAO8iC,EAAIzxB,cACzBtc,KAAKu6G,QAAQvsG,IAAIsO,KACpBtc,KAAK06G,UAAUtsG,IAAIkO,EAAc,IAAI+9F,EAASI,EAAevmG,IAC7DlU,KAAKs6G,QAAQ7sG,KAAK6O,GAClBtc,KAAKu6G,QAAQznF,IAAIxW,IAIrB,OADA0+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EACF,GAAIitE,EAAG7yF,KAAK,EAAAxI,MAAMwD,UACvB,GAAI63F,EAAG7yF,KAAK,EAAAxI,MAAMkB,MAAO,CACvB,GAAIm6F,EAAG7yF,KAAK,EAAAxI,MAAMkG,eAAgB,CAChC3R,EAAO,EAAAxF,KAAKq1G,8BAA8B/I,EAAGtjE,aAAcsjE,EAAGnvG,SAC9D,IAAIkiC,EAAM,EAAAr/B,KAAKs1G,sBAAsB,KAAM9vG,EAAMC,EAAW6mG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAC9EF,EAAerR,OAAO8iC,EAAIzxB,cAC1B7P,EAASuuG,EAAGvuG,OACZ0P,EAAc1P,EAAO0P,YAQzB,OAPKA,EACKA,EAAYslB,SAASnlB,IAAeH,EAAY1O,KAAK6O,GAD7C7P,EAAO0P,YAAc,CAAEG,GAEpCtc,KAAKu6G,QAAQvsG,IAAIsO,KACpBtc,KAAK06G,UAAUtsG,IAAIkO,EAAc,IAAI+9F,EAASI,EAAevmG,IAC7DlU,KAAKs6G,QAAQ7sG,KAAK6O,IAEpB0+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAEP/tC,KAAKwmB,MACH,EAAAjb,eAAeyyB,wBACfg9E,EAAGnvG,cAIP7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,aAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAGhB,OAAO,KAGT,kBACEmvG,GAKA,GAAIA,EAAG8B,eAAe,EAAAl9F,mBAAmB8H,QAAS,CAChD,IAAIpP,EAAa,EAAA5J,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SACrEo4G,EAA4C,KAChD,GAAIjJ,EAAG7yF,KAAK,EAAAxI,MAAMI,IAAK,CACrB,IAAIi7F,EAAG8B,eAAe,EAAAl9F,mBAAmB8H,QAOvC,OAJA1nB,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KANPo4G,EAAe,EAAAv1G,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SAS3E,OAAIo4G,EACK,EAAAv1G,KAAKw1G,mBACV5rG,EACA2rG,EACA,EAAAnpG,MAAMpN,KAAK4K,EAAWzM,MAAOo4G,EAAap4G,QAGvC,EAAA6C,KAAKw1G,mBACV5rG,EACA,KACAA,EAAWzM,OAQf,OALE7L,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAGA,KAGT,wBACEmvG,EACAG,EACAI,EACAC,GAKA,IAAI56G,EAAOo6G,EAAGsC,iBACVzxG,EAAQmvG,EAAGnvG,QACXkiC,EAAM,EAAAr/B,KAAKs1G,sBAAsB,CACnC,EAAAt1G,KAAKw1G,mBACH,EAAAx1G,KAAKG,2BAA2BjO,EAAMiL,GACtC,EAAA6C,KAAKG,2BAA2B,UAAWmsG,EAAGnvG,MAAM0vG,EAAcC,IAClE3vG,IAED,MAAM,EAAOmvG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAEtC,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAGT,YACEitE,GAOA,IAAIG,EAAWH,EAAG51F,SACd1R,EAAsC,KACtCuB,EAA6C,KAC7CkvG,GAAW,EACf,GAAInJ,EAAG7yF,KAAK,EAAAxI,MAAMuH,WAEhB,IADAxT,EAAU,IAAI7L,OACNmzG,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAAa,CACjC,IAAIwT,EAAS36B,KAAKokH,uBAAuBpJ,GACzC,IAAKrgF,EAAQ,OAAO,KAEpB,GADAjnB,EAAQjG,KAAKktB,IACRqgF,EAAG7yF,KAAK,EAAAxI,MAAM1E,OAAQ,CACzB,GAAI+/F,EAAG7yF,KAAK,EAAAxI,MAAMwH,YAChB,MAMA,OAJAnnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,WAIR,GAAImvG,EAAG7yF,KAAK,EAAAxI,MAAMwD,UAAW,CAClC,IAAI63F,EAAG7yF,KAAK,EAAAxI,MAAMI,IAehB,OAJA/f,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,MAEP,KAdP,IAAImvG,EAAG8B,iBAOL,OAJA98G,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KANPoJ,EAAgB,EAAAvG,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,cAevE,GAAImvG,EAAG7yF,KAAK,EAAAxI,MAAMzG,WAAY,EAAA0G,mBAAmB+H,QAAS,CAC/D,IAAI/mB,EAAOo6G,EAAGsC,iBACVzxG,EAAQmvG,EAAGnvG,QAQf,GAPA6H,EAAU,CACR,EAAAhF,KAAK21G,wBACH,EAAA31G,KAAKG,2BAA2B,UAAWhD,GAC3C,EAAA6C,KAAKG,2BAA2BjO,EAAMiL,GACtCA,IAGAmvG,EAAG7yF,KAAK,EAAAxI,MAAM1E,OAOhB,OALAjb,KAAKwmB,MACH,EAAAjb,eAAegnD,kBACfyoD,EAAGnvG,QACH,mCAEK,UAGTs4G,GAAW,EAGb,GAAIA,GAAYnJ,EAAG7yF,KAAK,EAAAxI,MAAMkB,MAAO,CACnC,GAAIm6F,EAAG7yF,KAAK,EAAAxI,MAAMkG,eAAgB,CAChC,IACIkoB,EADA75B,EAAO,EAAAxF,KAAKq1G,8BAA8B/I,EAAGtjE,aAAcsjE,EAAGnvG,SAE9DoJ,GACFhK,QAAQyI,GACRq6B,EAAM,EAAAr/B,KAAK41G,8BAA8BrvG,EAAef,EAAM8mG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,OAEpFuxB,EAAM,EAAAr/B,KAAK61G,sBAAsB7wG,EAASQ,EAAM8mG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAExE,IAAIF,EAAeyxB,EAAIzxB,aAMvB,OALKtc,KAAKu6G,QAAQvsG,IAAIsO,KACpBtc,KAAK06G,UAAUtsG,IAAIkO,EAAc,IAAI+9F,EAASpvG,OAAOjL,KAAKy6G,eAAgBvmG,IAC1ElU,KAAKs6G,QAAQ7sG,KAAK6O,IAEpB0+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAEP/tC,KAAKwmB,MACH,EAAAjb,eAAeyyB,wBACfg9E,EAAGnvG,cAIP7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,QAGhB,OAAO,KAGT,uBACEmvG,GAKA,GAAIA,EAAG8B,eAAe,EAAAl9F,mBAAmB8H,QAAS,CAChD,IAAIpP,EAAa,EAAA5J,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SACrEo4G,EAA4C,KAChD,GAAIjJ,EAAG7yF,KAAK,EAAAxI,MAAMI,IAAK,CACrB,IAAIi7F,EAAG8B,iBAOL,OAJA98G,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KANPo4G,EAAe,EAAAv1G,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SAS3E,OAAIo4G,EACK,EAAAv1G,KAAK21G,wBACV/rG,EACA2rG,EACA,EAAAnpG,MAAMpN,KAAK4K,EAAWzM,MAAOo4G,EAAap4G,QAGvC,EAAA6C,KAAK21G,wBACV/rG,EACA,KACAA,EAAWzM,OAQf,OALE7L,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAGA,KAGT,kBACEmvG,EACAG,GAKA,GAAIH,EAAG8B,iBAAkB,CACvB,IAAImH,EAAe,EAAAv1G,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SAC3E,GAAImvG,EAAG7yF,KAAK,EAAAxI,MAAMuE,QAAS,CACzB,GAAI82F,EAAG8B,iBAAkB,CACvB,IAAIxkG,EAAa,EAAA5J,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SACrEkiC,EAAM,EAAAr/B,KAAK81G,4BAA4BlsG,EAAY2rG,EAAcjJ,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAE3F,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAEP/tC,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,cAIP7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAGP,OAAO,KAGT,eACEmvG,EACAyJ,GAAiB,GAKjB,IAAIr8F,EAAQ4yF,EAAGkB,OAEXroG,EAA8B,KAClC,OAFYmnG,EAAG7iG,QAGb,KAAK,EAAAwH,MAAMxC,MACTtJ,EAAY7T,KAAK0kH,WAAW1J,GAC5B,MAEF,KAAK,EAAAr7F,MAAMS,MACTvM,EAAY7T,KAAKg8G,cAAchB,EAAI,EAAA34G,YAAY+d,MAAO,KAAM46F,EAAG51F,UAC/D,MAEF,KAAK,EAAAzF,MAAMrC,SACTzJ,EAAY7T,KAAK2kH,cAAc3J,GAC/B,MAEF,KAAK,EAAAr7F,MAAMpC,GACT1J,EAAY7T,KAAK4kH,iBAAiB5J,GAClC,MAEF,KAAK,EAAAr7F,MAAMvB,IACTvK,EAAY7T,KAAK6kH,kBAAkB7J,GACnC,MAEF,KAAK,EAAAr7F,MAAMnB,GACT3K,EAAY7T,KAAK8kH,iBAAiB9J,GAClC,MAEF,KAAK,EAAAr7F,MAAMyB,IACTvN,EAAY7T,KAAKg8G,cAAchB,EAAI,EAAA34G,YAAY+e,IAAK,KAAM45F,EAAG51F,UAC7D,MAEF,KAAK,EAAAzF,MAAMsC,IACTpO,EAAY7T,KAAKg8G,cAAchB,EAAI,EAAA34G,YAAY0W,KAAM,KAAMiiG,EAAG51F,UAC9D,MAEF,KAAK,EAAAzF,MAAMuH,UACTrT,EAAY7T,KAAKwhH,oBAAoBxG,EAAIyJ,GACzC,MAEF,KAAK,EAAA9kG,MAAMb,OACL2lG,GACFzkH,KAAKwmB,MACH,EAAAjb,eAAew5G,2DACf/J,EAAGnvG,SAGPgI,EAAY7T,KAAKglH,YAAYhK,GAC7B,MAEF,KAAK,EAAAr7F,MAAMkH,UACT,OAAO,EAAAnY,KAAKu2G,qBAAqBjK,EAAGnvG,MAAMmvG,EAAG51F,WAE/C,KAAK,EAAAzF,MAAMX,OACTnL,EAAY7T,KAAKklH,qBAAqBlK,GACtC,MAEF,KAAK,EAAAr7F,MAAMV,MACTpL,EAAY7T,KAAKmlH,oBAAoBnK,GACrC,MAEF,KAAK,EAAAr7F,MAAMT,IACTrL,EAAY7T,KAAKolH,kBAAkBpK,GACnC,MAEF,KAAK,EAAAr7F,MAAML,KACTzL,EAAY7T,KAAKqlH,mBAAmBrK,GACpC,MAEF,KAAK,EAAAr7F,MAAMJ,MACT1L,EAAY7T,KAAKslH,oBAAoBtK,GACrC,MAEF,KAAK,EAAAr7F,MAAMoC,KACT,GAAIi5F,EAAGc,MAAK,EAAO,EAAAl8F,mBAAmB+H,SAAW,EAAAhI,MAAMzG,WAAY,CACjErF,EAAY7T,KAAK68G,qBAAqB7B,EAAI,EAAA34G,YAAY0W,KAAM,KAAMiiG,EAAG51F,UACrE,MAIJ,QACE41F,EAAGqB,MAAMj0F,GACTvU,EAAY7T,KAAKulH,yBAAyBvK,GAU9C,OANKnnG,EAIHmnG,EAAGwB,QAAQp0F,IAHX4yF,EAAGqB,MAAMj0F,GACTpoB,KAAKk7G,cAAcF,IAIdnnG,EAGT,oBACEmnG,EACAyJ,GAOA,IAFA,IAAItJ,EAAWH,EAAG51F,SACdlS,EAAa,IAAIrL,OACbmzG,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAAa,CACjC,IAAIiB,EAAQ4yF,EAAGkB,OACXroG,EAAY7T,KAAKs8G,eAAetB,EAAIyJ,GACxC,GAAK5wG,EAKHmnG,EAAGwB,QAAQp0F,GACXlV,EAAWzF,KAAKoG,OANF,CACd,GAAImnG,EAAG14F,OAAS,EAAA3C,MAAMmI,UAAW,OAAO,KACxCkzF,EAAGqB,MAAMj0F,GACTpoB,KAAKk7G,cAAcF,IAMvB,IAAIjtE,EAAM,EAAAr/B,KAAK82G,qBAAqBtyG,EAAY8nG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAEtE,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAGT,WACEitE,GAKA,IAAI1iG,EAA0C,KAC1C0iG,EAAGc,MAAK,IAAS,EAAAn8F,MAAMzG,YAAe8hG,EAAGz1F,qBAC3Cy1F,EAAG7iG,KAAK,EAAAyH,mBAAmB+H,QAC3BrP,EAAa,EAAA5J,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,UAEvE,IAAIkiC,EAAM,EAAAr/B,KAAK+2G,qBAAqBntG,EAAY0iG,EAAGnvG,SAEnD,OADAmvG,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAGT,cACEitE,GAKA,IAAI1iG,EAA0C,KAC1C0iG,EAAGc,MAAK,IAAS,EAAAn8F,MAAMzG,YAAe8hG,EAAGz1F,qBAC3Cy1F,EAAG7iG,KAAK,EAAAyH,mBAAmB+H,QAC3BrP,EAAa,EAAA5J,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,UAEvE,IAAIkiC,EAAM,EAAAr/B,KAAKg3G,wBAAwBptG,EAAY0iG,EAAGnvG,SAEtD,OADAmvG,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAGT,iBACEitE,GAKA,IAAIG,EAAWH,EAAG51F,SACdvR,EAAY7T,KAAKs8G,eAAetB,GACpC,IAAKnnG,EAAW,OAAO,KAEvB,GAAImnG,EAAG7yF,KAAK,EAAAxI,MAAMJ,OAEhB,GAAIy7F,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAAY,CAC5B,IAAIxT,EAAYvS,KAAKw/G,gBAAgBxE,GACrC,IAAKzoG,EAAW,OAAO,KAEvB,GAAIyoG,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAAa,CAC7B,IAAI+nB,EAAM,EAAAr/B,KAAKi3G,kBAAkB9xG,EAAWtB,EAAWyoG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAE7E,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAEP/tC,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,SAGhB,OAAO,KAGT,yBACEmvG,GAKA,IAAIxtE,EAAOxtC,KAAKw/G,gBAAgBxE,GAChC,IAAKxtE,EAAM,OAAO,KAElB,IAAIO,EAAM,EAAAr/B,KAAKkzG,0BAA0Bp0E,GAEzC,OADAwtE,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAGT,kBACEitE,GAKA,IAAIG,EAAWH,EAAG51F,SAElB,GAAI41F,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAAY,CAC5B,IAAIpW,EAAgC,KAEpC,GAAIqrG,EAAG7yF,KAAK,EAAAxI,MAAMS,OAChBzQ,EAAc3P,KAAKg8G,cAAchB,EAAI,EAAA34G,YAAY+d,MAAO,KAAM46F,EAAG51F,UAAU,QACtE,GAAI41F,EAAG7yF,KAAK,EAAAxI,MAAMyB,KACvBzR,EAAc3P,KAAKg8G,cAAchB,EAAI,EAAA34G,YAAY+e,IAAK,KAAM45F,EAAG51F,UAAU,QACpE,GAAI41F,EAAG7yF,KAAK,EAAAxI,MAAMsC,KACvBtS,EAAc3P,KAAKg8G,cAAchB,EAAI,EAAA34G,YAAY0W,KAAM,KAAMiiG,EAAG51F,UAAU,QAErE,IAAK41F,EAAG7yF,KAAK,EAAAxI,MAAMkH,aACxBlX,EAAc3P,KAAKulH,yBAAyBvK,IACvCrrG,GAAa,OAAO,KAG3B,GAAIA,EAAa,CACf,GAAIqrG,EAAG7yF,KAAK,EAAAxI,MAAM4B,IAAK,CAErB,GAAI5R,EAAYhB,MAAQ,EAAAL,SAAS2P,WAC/B,OAA0BtO,EAAaY,WAAW5B,MAAQ,EAAAL,SAAS4K,YACjElZ,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACf5tG,EAAY9D,OAEP,MAEF7L,KAAK4lH,oBAAoB5K,EAAIG,EAAUxrG,GAEhD,GAAIA,EAAYhB,MAAQ,EAAAL,SAAS+Q,SAAU,CACzC,IAAItK,EAAmCpF,EAAaoF,aACpD,IAAK,IAAI1U,EAAI,EAAG8N,EAAI4G,EAAa3H,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACnD,IACIsP,EADcoF,EAAa1U,GACDsP,YAC1BA,GACF3P,KAAKwmB,MACH,EAAAjb,eAAes6G,0EACfl2G,EAAY9D,OAIlB,OAAO7L,KAAK4lH,oBAAoB5K,EAAIG,EAAUxrG,GAMhD,OAJA3P,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACf5tG,EAAY9D,OAEP,KAGT,GAAI8D,EAAYhB,MAAQ,EAAAL,SAAS+Q,SAAU,CACzC,IAAItK,EAAmCpF,EAAaoF,aACpD,IAAK,IAAI1U,EAAI,EAAG8N,EAAI4G,EAAa3H,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACnD,IAAI0Q,EAAcgE,EAAa1U,GAC1B0Q,EAAYpB,cACXoB,EAAYwC,MAAQ,EAAAlR,YAAY+d,MAClCpgB,KAAKwmB,MACH,EAAAjb,eAAew9F,wCACfh4F,EAAYnQ,KAAKiL,OAETkF,EAAYrB,MACtB1P,KAAKwmB,MACH,EAAAjb,eAAeyhD,cACfj8C,EAAYnQ,KAAKiL,MAAMuzB,UAQnC,GAAI47E,EAAG14F,OAAS,EAAA3C,MAAMkH,UAAW,CAC/B,IAAItU,EAAwC,KAC5C,IAAKyoG,EAAG7yF,KAAK,EAAAxI,MAAMkH,aACjBtU,EAAYvS,KAAKulH,yBAAyBvK,IACrCzoG,GAAW,OAAO,KAGzB,GAAIyoG,EAAG14F,OAAS,EAAA3C,MAAMkH,UAAW,CAC/B,IAAIvR,EAAiC,KACrC,IAAK0lG,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAAa,CAE9B,GADA1Q,EAActV,KAAKw/G,gBAAgBxE,IAC9B1lG,EAAa,OAAO,KAEzB,IAAK0lG,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAKjB,OAJAhmB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAIX,IAAIgI,EAAY7T,KAAKs8G,eAAetB,GACpC,OAAKnnG,EAEE,EAAAnF,KAAKo3G,mBACVn2G,EACA4C,EACIA,EAAUhC,WACV,KACJ+E,EACAzB,EACAmnG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MATD,KAavBxc,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAGhB,OAAO,KAGT,oBACEmvG,EACAG,EACA3lG,GAKA,IAAIC,EAAWzV,KAAKw/G,gBAAgBxE,GACpC,IAAKvlG,EAAU,OAAO,KAEtB,IAAKulG,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAKjB,OAJAhmB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAGT,IAAIgI,EAAY7T,KAAKs8G,eAAetB,GACpC,OAAKnnG,EAEE,EAAAnF,KAAKq3G,qBACVvwG,EACAC,EACA5B,EACAmnG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAND,KAUzB,iBACEw+F,GAKA,IAAIG,EAAWH,EAAG51F,SAClB,GAAI41F,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAAY,CAC5B,IAAIxT,EAAYvS,KAAKw/G,gBAAgBxE,GACrC,IAAKzoG,EAAW,OAAO,KACvB,GAAIyoG,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAAa,CAC7B,IAAInS,EAAY7T,KAAKs8G,eAAetB,GACpC,IAAKnnG,EAAW,OAAO,KACvB,IAAImyG,EAAkC,KACtC,OAAIhL,EAAG7yF,KAAK,EAAAxI,MAAMc,QAChBulG,EAAgBhmH,KAAKs8G,eAAetB,IAC/BgL,GAAsB,KAEtB,EAAAt3G,KAAKu3G,kBACV1zG,EACAsB,EACAmyG,EACAhL,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAGxBxc,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAGhB,OAAO,KAGT,qBACEmvG,GAKA,IAAIG,EAAWH,EAAG51F,SAClB,GAAI41F,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAAY,CAC5B,IAAIxT,EAAYvS,KAAKw/G,gBAAgBxE,GACrC,IAAKzoG,EAAW,OAAO,KACvB,GAAIyoG,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAAa,CAC7B,GAAIg1F,EAAG7yF,KAAK,EAAAxI,MAAMuH,WAAY,CAC5B,IAAIg/F,EAAc,IAAIr+G,MACtB,MAAQmzG,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAAa,CACjC,IAAIg/F,EAAanmH,KAAKomH,gBAAgBpL,GACtC,IAAKmL,EAAY,OAAO,KACxBD,EAAYz4G,KAAK04G,GAEnB,IAAIp4E,EAAM,EAAAr/B,KAAK23G,sBAAsB9zG,EAAW2zG,EAAalL,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAEnF,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAEP/tC,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAGhB,OAAO,KAGT,gBACEmvG,GAGA,IACI9nG,EACAW,EAFAsnG,EAAWH,EAAG51F,SAMlB,GAAI41F,EAAG7yF,KAAK,EAAAxI,MAAMO,MAAO,CACvB,IAAI9M,EAAQpT,KAAKw/G,gBAAgBxE,GACjC,IAAK5nG,EAAO,OAAO,KACnB,GAAI4nG,EAAG7yF,KAAK,EAAAxI,MAAMiH,OAAQ,CAExB,IADA1T,EAAa,IAAIrL,MACVmzG,EAAGc,QAAU,EAAAn8F,MAAMO,MAAQ86F,EAAG31F,WAAa,EAAA1F,MAAMY,SAAWy6F,EAAG31F,WAAa,EAAA1F,MAAMwH,YAAY,CAEnG,KADAtT,EAAY7T,KAAKs8G,eAAetB,IAChB,OAAO,KACvB9nG,EAAWzF,KAAKoG,GAElB,OAAO,EAAAnF,KAAK43G,iBAAiBlzG,EAAOF,EAAY8nG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAEtExc,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAMX,GAAImvG,EAAG7yF,KAAK,EAAAxI,MAAMY,SAAU,CACjC,GAAIy6F,EAAG7yF,KAAK,EAAAxI,MAAMiH,OAAQ,CAExB,IADA1T,EAAa,IAAIrL,MACVmzG,EAAGc,QAAU,EAAAn8F,MAAMO,MAAQ86F,EAAG31F,WAAa,EAAA1F,MAAMY,SAAWy6F,EAAG31F,WAAa,EAAA1F,MAAMwH,YAAY,CAEnG,KADAtT,EAAY7T,KAAKs8G,eAAetB,IAChB,OAAO,KACvB9nG,EAAWzF,KAAKoG,GAElB,OAAO,EAAAnF,KAAK43G,iBAAiB,KAAMpzG,EAAY8nG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAErExc,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAeg7G,0BACfvL,EAAGnvG,SAGP,OAAO,KAGT,oBACEmvG,GAKA,IAAIG,EAAWH,EAAG51F,SACd7U,EAAavQ,KAAKw/G,gBAAgBxE,GACtC,IAAKzqG,EAAY,OAAO,KACxB,IAAIw9B,EAAM,EAAAr/B,KAAK83G,qBAAqBj2G,EAAYyqG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAEtE,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAGT,kBACEitE,GAQA,IACI/W,EADAkX,EAAWH,EAAG51F,SAElB,GAAI41F,EAAG7yF,KAAK,EAAAxI,MAAMuH,WAAY,CAC5B,IAAIhU,EAAa,IAAIrL,MACrB,MAAQmzG,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAAa,CAEjC,KADA88E,EAAOjkG,KAAKs8G,eAAetB,IAChB,OAAO,KAClB9nG,EAAWzF,KAAKw2F,GAElB,IAAIxtF,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAIqkG,EAAG7yF,KAAK,EAAAxI,MAAMQ,OAAQ,CACxB,IAAK66F,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAKjB,OAJA/lB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAET,IAAKmvG,EAAG8B,iBAKN,OAJA98G,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KAGT,GADA4K,EAAgB,EAAA/H,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,UACnEmvG,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAKjB,OAJAhmB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAET,IAAKmvG,EAAG7yF,KAAK,EAAAxI,MAAMuH,WAKjB,OAJAlnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAGT,IADA6K,EAAkB,IACVskG,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAAa,CAEjC,KADA88E,EAAOjkG,KAAKs8G,eAAetB,IAChB,OAAO,KAClBtkG,EAAgBjJ,KAAKw2F,IAGzB,GAAI+W,EAAG7yF,KAAK,EAAAxI,MAAMiB,SAAU,CAC1B,IAAKo6F,EAAG7yF,KAAK,EAAAxI,MAAMuH,WAKjB,OAJAlnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAGT,IADA8K,EAAoB,IACZqkG,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAAa,CAEjC,KADA88E,EAAOjkG,KAAKs8G,eAAetB,IAChB,OAAO,KAClBrkG,EAAkBlJ,KAAKw2F,IAG3B,IAAMvtF,IAAmBC,EAKvB,OAJA3W,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,SAEP,KAET,IAAIkiC,EAAM,EAAAr/B,KAAK+3G,mBACbvzG,EACAuD,EACAC,EACAC,EACAqkG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAGxB,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAOT,OALE/tC,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAGT,KAGT,qBACEmvG,EACAznG,EACAD,EACA6nG,GAKA,GAAIH,EAAG8B,iBAAkB,CACvB,IAAIl8G,EAAO,EAAA8N,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SAC/D2H,EAA6C,KACjD,GAAIwnG,EAAG7yF,KAAK,EAAAxI,MAAM6C,UAAW,CAE3B,GADAhP,EAAiBxT,KAAKkhH,oBAAoBlG,IACrCxnG,EAAgB,OAAO,KAC5BD,GAAS,EAAAlR,YAAY4wB,QAEvB,GAAI+nF,EAAG7yF,KAAK,EAAAxI,MAAMuE,QAAS,CACzB,IAAIxU,EAAO1P,KAAK89G,UAAU9C,GAC1B,IAAKtrG,EAAM,OAAO,KAClB,IAAIq+B,EAAM,EAAAr/B,KAAKojB,sBACblxB,EACA0S,EACAC,EACAC,EACA9D,EACAsrG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAGxB,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAEP/tC,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAGP,OAAO,KAGT,mBACEmvG,GAKA,IAAIG,EAAWH,EAAG51F,SACd7U,EAAavQ,KAAKw/G,gBAAgBxE,EAAI,IAC1C,IAAKzqG,EAAY,OAAO,KACxB,IAAIw9B,EAAM,EAAAr/B,KAAKg4G,oBAAoBn2G,EAAYyqG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAErE,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAGT,oBACEitE,GAKA,IAAIG,EAAWH,EAAG51F,SAClB,GAAI41F,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAAY,CAC5B,IAAIxV,EAAavQ,KAAKw/G,gBAAgBxE,GACtC,IAAKzqG,EAAY,OAAO,KACxB,GAAIyqG,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAAa,CAC7B,IAAInS,EAAY7T,KAAKs8G,eAAetB,GACpC,IAAKnnG,EAAW,OAAO,KACvB,IAAIk6B,EAAM,EAAAr/B,KAAKi4G,qBAAqBp2G,EAAYsD,EAAWmnG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAEjF,OADAw+F,EAAG7yF,KAAK,EAAAxI,MAAMkH,WACPknB,EAEP/tC,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,UAIhB7L,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAGhB,OAAO,KAKT,qBACEmvG,GAEA,IAAI14F,EAAQ04F,EAAG7iG,KAAK,EAAAyH,mBAAmB+H,QACnCwzF,EAAWH,EAAG51F,SAClB,OAAQ9C,GAGN,KAAK,EAAA3C,MAAM4C,YACX,KAAK,EAAA5C,MAAMwC,MAGX,KAAK,EAAAxC,MAAMmE,YACX,KAAK,EAAAnE,MAAMoE,MACX,KAAK,EAAApE,MAAMqD,KACX,KAAK,EAAArD,MAAMsD,MACX,KAAK,EAAAtD,MAAMqC,OACX,KAAK,EAAArC,MAAML,KACX,KAAK,EAAAK,MAAMa,OAAQ,CACjB,IAAIzN,EAAU/S,KAAKw/G,gBAAgBxE,EAAI,IACvC,OAAKjoG,EACE,EAAArE,KAAKk4G,4BAA4BtkG,EAAOvP,EAASioG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MADzD,KAGvB,KAAK,EAAAmD,MAAM2D,UACX,KAAK,EAAA3D,MAAM4D,YAAa,CACtB,IAAIxQ,EAAU/S,KAAKw/G,gBAAgBxE,EAAI,IACvC,IAAKjoG,EAAS,OAAO,KACrB,OAAQA,EAAQpE,MACd,KAAK,EAAAL,SAAS4K,WACd,KAAK,EAAA5K,SAAS6M,cACd,KAAK,EAAA7M,SAASsJ,eAAgB,MAC9B,QACE5X,KAAKwmB,MACH,EAAAjb,eAAes7G,0FACf9zG,EAAQlH,OAId,OAAO,EAAA6C,KAAKk4G,4BAA4BtkG,EAAOvP,EAASioG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAIhF,KAAK,EAAAmD,MAAMrE,IAAK,CACd,IAAK0/F,EAAG8B,iBAKN,OAJA98G,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KAET,IAAI+F,EAAW5R,KAAK+9G,cAAc/C,GAClC,IAAKppG,EAAU,OAAO,KACtB,IAAI9C,EAAmC,KACnCg4G,EAAkC,KACtC,GACE9L,EAAG7yF,KAAK,EAAAxI,MAAMoG,YAEsD,QAAnEjX,EAAgB9O,KAAK+mH,qCAAqC/L,KAG3D,GADA8L,EAAa9mH,KAAK++G,eAAe/D,IAC5B8L,EAAY,OAAO,UAExBA,EAAa,GAEf,OAAO,EAAAp4G,KAAKs4G,oBACVp1G,EACA9C,EACAg4G,EACA9L,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAK1B,KAAK,EAAAmD,MAAMnI,KAAM,OAAO,EAAA9I,KAAKu4G,qBAAqBjM,EAAGnvG,SACrD,KAAK,EAAA8T,MAAMlI,KAAM,OAAO,EAAA/I,KAAKw4G,qBAAqBlM,EAAGnvG,SACrD,KAAK,EAAA8T,MAAMjI,MAAO,OAAO,EAAAhJ,KAAKy4G,sBAAsBnM,EAAGnvG,SACvD,KAAK,EAAA8T,MAAMhE,KAAM,OAAO,EAAAjN,KAAK04G,qBAAqBpM,EAAGnvG,SACrD,KAAK,EAAA8T,MAAMzE,YAAa,OAAO,EAAAxM,KAAKo0G,4BAA4B9H,EAAGnvG,SAGnE,KAAK,EAAA8T,MAAMoG,UAAW,CAGpB,GAAIi1F,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAChB,OAAOhmB,KAAK0hH,8BACV1G,EACA,EAAAtsG,KAAK+yG,gCAAgCzG,EAAGnvG,MAAMsvG,IAC9C,GAAE,GAIN,IAAI/yF,EAAQ4yF,EAAGkB,OACXmL,GAAQ,EACZ,GACE,OAAQrM,EAAG7iG,KAAK,EAAAyH,mBAAmB+H,SAGjC,KAAK,EAAAhI,MAAM4C,YAET,OADAy4F,EAAGqB,MAAMj0F,GACFpoB,KAAKsnH,wBAAwBtM,GAGtC,KAAK,EAAAr7F,MAAMzG,WAET,OADA8hG,EAAGsC,iBACKtC,EAAG7iG,QAGT,KAAK,EAAAwH,MAAMqG,WACT,IACGg1F,EAAG7yF,KAAK,EAAAxI,MAAMiH,SACdo0F,EAAG7yF,KAAK,EAAAxI,MAAMmH,oBACf,CACAugG,GAAQ,EACR,MAKJ,KAAK,EAAA1nG,MAAMiH,MAET,OADAo0F,EAAGqB,MAAMj0F,GACFpoB,KAAKsnH,wBAAwBtM,GAGtC,KAAK,EAAAr7F,MAAMoH,SACT,GACEi0F,EAAG7yF,KAAK,EAAAxI,MAAMiH,QACdo0F,EAAG7yF,KAAK,EAAAxI,MAAM1E,QACd+/F,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAGd,OADAg1F,EAAGqB,MAAMj0F,GACFpoB,KAAKsnH,wBAAwBtM,GAEtCqM,GAAQ,EACR,MAEF,KAAK,EAAA1nG,MAAM1E,MACT,MAIF,QACEosG,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GACTrM,EAAGqB,MAAMj0F,GAGT,IAAIm/F,EAAQvnH,KAAKw/G,gBAAgBxE,GACjC,OAAKuM,EACAvM,EAAG7yF,KAAK,EAAAxI,MAAMqG,aAOnBuhG,EAAQ,EAAA74G,KAAK84G,8BAA8BD,EAAOvM,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MACjExc,KAAKynH,yBAAyBzM,EAAIuM,KAPvCvnH,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,MANU,KAYrB,KAAK,EAAA8T,MAAMqH,YAAa,CACtB,IAAI5W,EAAqB,IAAIvI,MAC7B,MAAQmzG,EAAG7yF,KAAK,EAAAxI,MAAMsH,eAAe,CACnC,IAAIumB,EACJ,GAAIwtE,EAAGc,QAAU,EAAAn8F,MAAM1E,MACrBuyB,EAAO,UAGP,GADAA,EAAOxtC,KAAKw/G,gBAAgBxE,EAAI,IAC3BxtE,EAAM,OAAO,KAGpB,GADAp9B,EAAmB3C,KAAK+/B,IACnBwtE,EAAG7yF,KAAK,EAAAxI,MAAM1E,OAAQ,CACzB,GAAI+/F,EAAG7yF,KAAK,EAAAxI,MAAMsH,cAChB,MAMA,OAJAjnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,MAIb,OAAO,EAAA6C,KAAKg5G,6BAA6Bt3G,EAAoB4qG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAGrF,KAAK,EAAAmD,MAAMuH,UAAW,CACpB,IAGItmB,EAHAu6G,EAAWH,EAAG51F,SACdrT,EAAQ,IAAIlK,MACZmK,EAAS,IAAInK,MAEjB,MAAQmzG,EAAG7yF,KAAK,EAAAxI,MAAMwH,aAAa,CACjC,GAAK6zF,EAAG8B,iBAWNl8G,EAAO,EAAA8N,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,aAXvC,CACxB,IAAKmvG,EAAG7yF,KAAK,EAAAxI,MAAMkG,eAKjB,OAJA7lB,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfvC,EAAGnvG,SAEE,KAETjL,EAAO,EAAA8N,KAAKG,2BAA2BmsG,EAAGtjE,aAAcsjE,EAAGnvG,SAC3DjL,EAAKsP,UAAW,EAKlB,GADA6B,EAAMtE,KAAK7M,GACPo6G,EAAG7yF,KAAK,EAAAxI,MAAMiH,OAAQ,CACxB,IAAItlB,EAAQtB,KAAKw/G,gBAAgBxE,EAAI,GACrC,IAAK15G,EAAO,OAAO,KACnB0Q,EAAOvE,KAAKnM,OACP,IAAKV,EAAKsP,SAOf,OAJAlQ,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KANPmG,EAAOvE,KAAK7M,GAQd,IAAKo6G,EAAG7yF,KAAK,EAAAxI,MAAM1E,OAAQ,CACzB,GAAI+/F,EAAG7yF,KAAK,EAAAxI,MAAMwH,YAChB,MAMA,OAJAnnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,MAIb,OAAO,EAAA6C,KAAKi5G,8BAA8B51G,EAAOC,EAAQgpG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAGjF,KAAK,EAAAmD,MAAM6C,SAAU,CACnB,IAAIhS,EAASxQ,KAAK89G,UAAU9C,GAC5B,IAAKxqG,EAAQ,OAAO,KACpB,IAAKwqG,EAAG7yF,KAAK,EAAAxI,MAAM8C,aAKjB,OAJAziB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAET,IAAI2hC,EAAOxtC,KAAKw/G,gBAAgBxE,EAAI,IACpC,OAAKxtE,EACE,EAAA9+B,KAAKk5G,0BACV,EAAAltG,cAAc03C,OACd5kB,EACAh9B,EACAwqG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MALN,KAQpB,KAAK,EAAAmD,MAAMzG,WAAY,CACrB,IAAI2uG,EAAiB7M,EAAGsC,iBACxB,GAAsB,QAAlBuK,EAA0B,OAAO,EAAAn5G,KAAKu4G,qBAAqBjM,EAAGnvG,SAClE,IAAIyM,EAAa,EAAA5J,KAAKG,2BAA2Bg5G,EAAgB7M,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MACvF,OAAIw+F,EAAGc,MAAK,IAAS,EAAAn8F,MAAMmH,oBAAuBk0F,EAAGz1F,mBAiB9CvlB,KAAKynH,yBAAyBzM,EAAI1iG,GAAY,GAhB5CtY,KAAK0hH,8BACV1G,EACA,EAAAtsG,KAAK+yG,gCAAgCzG,EAAGnvG,MAAMsvG,IAC9C,CACE,EAAAzsG,KAAK4wB,gBACH,EAAA1mB,cAAc2H,QACdjI,EACA,EAAA5J,KAAKqjB,kBAAkBzZ,EAAWzM,MAAMuzB,OACxC,KACA9mB,EAAWzM,QAEd,EAEDsvG,GAKN,KAAK,EAAAx7F,MAAM9H,MAAO,CACZmjG,EAAGc,QAAU,EAAAn8F,MAAMwG,KAAO60F,EAAG31F,WAAa,EAAA1F,MAAMoG,WAClD/lB,KAAKwmB,MACH,EAAAjb,eAAeu8G,6DACf9M,EAAGnvG,SAGP,IAAI2hC,EAAO,EAAA9+B,KAAKq5G,sBAAsB/M,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAC5D,OAAOxc,KAAKynH,yBAAyBzM,EAAIxtE,GAE3C,KAAK,EAAA7tB,MAAMkG,cACT,OAAO,EAAAnX,KAAKq1G,8BAA8B/I,EAAGtjE,aAAcsjE,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAEnF,KAAK,EAAAmD,MAAMgH,eACT,OAAO,EAAAjY,KAAKs5G,+BAA+BhN,EAAGiN,cAAejN,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAErF,KAAK,EAAAmD,MAAMuG,aACT,OAAO,EAAAxX,KAAKw5G,6BAA6BlN,EAAGmN,YAAanN,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAIjF,KAAK,EAAAmD,MAAMyD,MAAO,CAChB,IAAIglG,EAAgBpN,EAAGqN,oBACvB,OAAKrN,EAAG7yF,KAAK,EAAAxI,MAAMyD,OAOZ,EAAA1U,KAAK45G,8BACVF,EACApN,EAAGuN,kBACHvN,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,OATtBxc,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,MAQX,KAAK,EAAA8T,MAAMvE,SAAU,CACnB,IAAIoyB,EAAOxtC,KAAKsnH,wBAAwBtM,GACxC,OAAKxtE,EACExtC,KAAKynH,yBAAyBzM,EAAIxtE,GADvB,KAGpB,KAAK,EAAA7tB,MAAM3E,MACT,OAAOhb,KAAKwoH,qBAAqBxN,GAEnC,QAYE,OAXI14F,GAAS,EAAA3C,MAAMmI,UACjB9nB,KAAKwmB,MACH,EAAAjb,eAAeod,uBACfqyF,EAAGnvG,MAAMsvG,IAGXn7G,KAAKwmB,MACH,EAAAjb,eAAek9G,oBACfzN,EAAGnvG,SAGA,MAKb,qCACEmvG,GAKA,IAAI5yF,EAAQ4yF,EAAGkB,OACf,IAAKlB,EAAG7yF,KAAK,EAAAxI,MAAM6C,UAAW,OAAO,KACrC,IAAI3V,EAAQmuG,EAAG51F,SACXtW,EAAgB,IAAIjH,MACxB,EAAG,CACD,GAAImzG,EAAGc,SAAW,EAAAn8F,MAAM8C,YACtB,MAEF,IAAI/S,EAAO1P,KAAK89G,UAAU9C,GAAI,GAAM,GACpC,IAAKtrG,EAEH,OADAsrG,EAAGqB,MAAMj0F,GACF,KAETtZ,EAAcrB,KAAKiC,SACZsrG,EAAG7yF,KAAK,EAAAxI,MAAM1E,QACvB,GAAI+/F,EAAG7yF,KAAK,EAAAxI,MAAM8C,aAAc,CAC9B,IAAI1V,EAAMiuG,EAAGx+F,IACb,GAAIw+F,EAAG7yF,KAAK,EAAAxI,MAAMoG,WAOhB,OANKjX,EAAc1B,QACjBpN,KAAKwmB,MACH,EAAAjb,eAAem9G,mCACf1N,EAAGnvG,MAAMgB,EAAOE,IAGb+B,EAIX,OADAksG,EAAGqB,MAAMj0F,GACF,KAGT,eACE4yF,GAMA,IADA,IAAInrG,EAAO,IAAIhI,OACPmzG,EAAG7yF,KAAK,EAAAxI,MAAMqG,aAAa,CACjC,IAAIwnB,EAAOxtC,KAAKw/G,gBAAgBxE,EAAI,GACpC,IAAKxtE,EAAM,OAAO,KAElB,GADA39B,EAAKpC,KAAK+/B,IACLwtE,EAAG7yF,KAAK,EAAAxI,MAAM1E,OAAQ,CACzB,GAAI+/F,EAAG7yF,KAAK,EAAAxI,MAAMqG,YAChB,MAMA,OAJAhmB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,MAIb,OAAOgE,EAGT,gBACEmrG,EACA2N,EAAA,GAEA19G,OAAqB,GAAd09G,GACP,IAAIn7E,EAAOxtC,KAAK4oH,qBAAqB5N,GACrC,IAAKxtE,EAAM,OAAO,KAMlB,IALA,IAIIq7E,EAJA1N,EAAW3tE,EAAK3hC,MAAMgB,OAMvBg8G,EAAiBC,EAAoB9N,EAAGc,UAAY6M,GACrD,CACA,IAAIrmG,EAAQ04F,EAAG7iG,OACf,OAAQmK,GAGN,KAAK,EAAA3C,MAAMI,GACT,GAAIi7F,EAAG7yF,KAAK,EAAAxI,MAAMS,OAChBotB,EAAO,EAAA9+B,KAAKk5G,0BACV,EAAAltG,cAAc0F,MACdotB,EACA,KACAwtE,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,UAEnB,CACL,IAAIhM,EAASxQ,KAAK89G,UAAU9C,GAC5B,IAAKxqG,EAAQ,OAAO,KACpBg9B,EAAO,EAAA9+B,KAAKk5G,0BACV,EAAAltG,cAAcqF,GACdytB,EACAh9B,EACAwqG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAG1B,MAEF,KAAK,EAAAmD,MAAMmE,YACT0pB,EAAO,EAAA9+B,KAAKk5G,0BACV,EAAAltG,cAAc43C,QACd9kB,EACA,KACAwtE,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAExBgxB,EAAOxtC,KAAKynH,yBAAyBzM,EAAIxtE,GACzC,MAGF,KAAK,EAAA7tB,MAAMtE,WAAY,CACrB,IAAI5J,EAASzR,KAAK89G,UAAU9C,GAC5B,IAAKvpG,EAAQ,OAAO,KACpB+7B,EAAO,EAAA9+B,KAAKq6G,2BACVv7E,EACA/7B,EACAupG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAExB,MAGF,KAAK,EAAAmD,MAAMqH,YAAa,CACtB,IAAI7O,EAAOnY,KAAKw/G,gBAAgBxE,GAChC,IAAK7iG,EAAM,OAAO,KAClB,IAAK6iG,EAAG7yF,KAAK,EAAAxI,MAAMsH,cAKjB,OAJAjnB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAET2hC,EAAO,EAAA9+B,KAAKs6G,8BACVx7E,EACAr1B,EACA6iG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAExBgxB,EAAOxtC,KAAKynH,yBAAyBzM,EAAIxtE,GACzC,MAGF,KAAK,EAAA7tB,MAAM2D,UACX,KAAK,EAAA3D,MAAM4D,YAEPiqB,EAAK7+B,MAAQ,EAAAL,SAAS4K,YACtBs0B,EAAK7+B,MAAQ,EAAAL,SAAS6M,eACtBqyB,EAAK7+B,MAAQ,EAAAL,SAASsJ,gBAEtB5X,KAAKwmB,MACH,EAAAjb,eAAes7G,0FACfr5E,EAAK3hC,OAGT2hC,EAAO,EAAA9+B,KAAKu6G,6BACV3mG,EACAkrB,EACAwtE,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAExB,MAGF,KAAK,EAAAmD,MAAMoH,SAAU,CACnB,IAAIvU,EAASxS,KAAKw/G,gBAAgBxE,GAClC,IAAKxoG,EAAQ,OAAO,KACpB,IAAKwoG,EAAG7yF,KAAK,EAAAxI,MAAMiH,OAKjB,OAJA5mB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEP,KAET,IAAI4G,EAASzS,KAAKw/G,gBAAgBxE,EAAI2N,EAAa,EAC/C,EACA,GAEJ,IAAKl2G,EAAQ,OAAO,KACpB+6B,EAAO,EAAA9+B,KAAKw6G,wBACV17E,EACAh7B,EACAC,EACAuoG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAExB,MAGF,KAAK,EAAAmD,MAAM1E,MAAO,CAChB,IAAIkuG,EAA2B,CAAE37E,GACjC,EAAG,CAED,KADAA,EAAOxtC,KAAKw/G,gBAAgBxE,EAAI,IACrB,OAAO,KAClBmO,EAAW17G,KAAK+/B,SACTwtE,EAAG7yF,KAAK,EAAAxI,MAAM1E,QACvBuyB,EAAO,EAAA9+B,KAAK06G,sBAAsBD,EAAYnO,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MACpE,MAGF,KAAK,EAAAmD,MAAMwG,IACT,GAAI60F,EAAG8B,eAAe,EAAAl9F,mBAAmB8H,QAAS,CAChD,IAAIvP,EAAO,EAAAzJ,KAAKG,2BAA2BmsG,EAAGsC,iBAAkBtC,EAAGnvG,SACnE2hC,EAAO,EAAA9+B,KAAKmwG,+BACVrxE,EACAr1B,EACA6iG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,UAEnB,CACL,IAAIrE,EAAOnY,KAAKw/G,gBAAgBxE,EAAI6N,EAAiB,GACrD,IAAK1wG,EAAM,OAAO,KAClB,GAAIA,EAAKxJ,MAAQ,EAAAL,SAASqJ,KAQxB,OAJA3X,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACfplG,EAAKtM,OAEA,KANP,KADA2hC,EAAOxtC,KAAKqpH,iBAAiBrO,EAAIG,EAAU3tE,EAAsBr1B,IACtD,OAAO,KAStBq1B,EAAOxtC,KAAKynH,yBAAyBzM,EAAIxtE,GAAM,GAC/C,MAGF,KAAK,EAAA7tB,MAAMuE,OACX,KAAK,EAAAvE,MAAMwE,YACX,KAAK,EAAAxE,MAAMyE,aACX,KAAK,EAAAzE,MAAM2E,yBACX,KAAK,EAAA3E,MAAM0E,gBACX,KAAK,EAAA1E,MAAM4E,aACX,KAAK,EAAA5E,MAAM6E,eACX,KAAK,EAAA7E,MAAM8E,yBACX,KAAK,EAAA9E,MAAM+E,+BACX,KAAK,EAAA/E,MAAMgF,2CACX,KAAK,EAAAhF,MAAMiF,iBACX,KAAK,EAAAjF,MAAMmF,aACX,KAAK,EAAAnF,MAAMkF,WACX,KAAK,EAAAlF,MAAMuD,kBAAmB,CAC5B,IAAI/K,EAAOnY,KAAKw/G,gBAAgBxE,EAAI6N,GACpC,IAAK1wG,EAAM,OAAO,KAClBq1B,EAAO,EAAA9+B,KAAK46G,uBAAuBhnG,EAAOkrB,EAAMr1B,EAAM6iG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAC5E,MAGF,KAAK,EAAAmD,MAAM6C,SACX,KAAK,EAAA7C,MAAM8C,YACX,KAAK,EAAA9C,MAAM+C,gBACX,KAAK,EAAA/C,MAAMgD,mBACX,KAAK,EAAAhD,MAAMiD,cACX,KAAK,EAAAjD,MAAMmD,qBACX,KAAK,EAAAnD,MAAMoD,0BACX,KAAK,EAAApD,MAAMkD,mBACX,KAAK,EAAAlD,MAAMqD,KACX,KAAK,EAAArD,MAAMsD,MACX,KAAK,EAAAtD,MAAMwD,SACX,KAAK,EAAAxD,MAAMyD,MACX,KAAK,EAAAzD,MAAM0D,QACX,KAAK,EAAA1D,MAAM6D,kBACX,KAAK,EAAA7D,MAAM8D,wBACX,KAAK,EAAA9D,MAAM+D,oCACX,KAAK,EAAA/D,MAAMgE,UACX,KAAK,EAAAhE,MAAMiE,IACX,KAAK,EAAAjE,MAAMkE,MACX,KAAK,EAAAlE,MAAMqE,oBACX,KAAK,EAAArE,MAAMsE,QAAS,CAClB,IAAI9L,EAAOnY,KAAKw/G,gBAAgBxE,EAAI6N,EAAiB,GACrD,IAAK1wG,EAAM,OAAO,KAClBq1B,EAAO,EAAA9+B,KAAK46G,uBAAuBhnG,EAAOkrB,EAAMr1B,EAAM6iG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAC5E,MAEF,QAASvR,QAAO,IAGpB,OAAOuiC,EAGD,iBACNwtE,EACAG,EACA3tE,EACAhtC,GAEA,IAAI+oH,EAAS/oH,EAAK+P,WAClB,OAAQg5G,EAAO56G,MACb,KAAK,EAAAL,SAAS4K,WACZ1Y,EAAK+P,WAAa,EAAA7B,KAAKmwG,+BACrBrxE,EACsB+7E,EACtBvO,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,MAExB,MAEF,KAAK,EAAAlO,SAASqJ,KAAM,CAClB,IAAI4vG,EAAQvnH,KAAKqpH,iBAAiBrO,EAAIG,EAAU3tE,EAAsB+7E,GACtE,IAAKhC,EAAO,OAAO,KACnB/mH,EAAK+P,WAAag3G,EAClB/mH,EAAKqL,MAAQmvG,EAAGnvG,MAAMsvG,EAAUH,EAAGx+F,KACnC,MAEF,QAKE,OAJAxc,KAAKwmB,MACH,EAAAjb,eAAegyG,oBACf/8G,EAAKqL,OAEA,KAGX,OAAOrL,EAGD,yBACNw6G,EACAxtE,EACAg8E,GAA2B,GAG3B,IADA,IAAI16G,EAAmC,KAErCksG,EAAG7yF,KAAK,EAAAxI,MAAMoG,YAEdyjG,GAA0F,QAAnE16G,EAAgB9O,KAAK+mH,qCAAqC/L,KACjF,CACA,IAAInrG,EAAO7P,KAAK++G,eAAe/D,GAC/B,IAAKnrG,EAAM,MACX29B,EAAO,EAAA9+B,KAAK+6G,qBACVj8E,EACA1+B,EACAe,EACAmrG,EAAGnvG,MAAM2hC,EAAK3hC,MAAMgB,MAAOmuG,EAAGx+F,MAEhCgtG,GAAqB,EAEvB,OAAOh8E,EAIT,cAAcwtE,GAGZ,IAFAA,EAAGc,MAAK,GACJd,EAAGz1F,oBAAoBy1F,EAAG7iG,SAC3B,CACD,IAAIkN,EAAY21F,EAAGc,MAAK,GACxB,GACEz2F,GAAa,EAAA1F,MAAMmI,WACnBzC,GAAa,EAAA1F,MAAMkH,UACnB,CACAm0F,EAAG7iG,OACH,MAEF,GAAI6iG,EAAGz1F,mBAAoB,MAC3B,OAAQy1F,EAAG7iG,QACT,KAAK,EAAAwH,MAAMzG,WACT8hG,EAAGsC,iBACH,MAEF,KAAK,EAAA39F,MAAMkG,cACTm1F,EAAGtjE,aACH,MAEF,KAAK,EAAA/3B,MAAMgH,eACTq0F,EAAGiN,cACH,MAEF,KAAK,EAAAtoG,MAAMuG,aACT80F,EAAGmN,YACH,MAEF,KAAK,EAAAxoG,MAAMuH,UACTlnB,KAAK0pH,UAAU1O,KAQvB,UAAUA,GAER,IAAI2O,EAAQ,EACRtC,GAAQ,EACZ,GACE,OAAQrM,EAAG7iG,QACT,KAAK,EAAAwH,MAAMmI,UACT9nB,KAAKwmB,MACH,EAAAjb,eAAekb,YACfu0F,EAAGnvG,QAAS,KAEdw7G,GAAQ,EACR,MAEF,KAAK,EAAA1nG,MAAMuH,YACPyiG,EACF,MAEF,KAAK,EAAAhqG,MAAMwH,aACPwiG,IACUtC,GAAQ,GACpB,MAEF,KAAK,EAAA1nG,MAAMzG,WACT8hG,EAAGsC,iBACH,MAEF,KAAK,EAAA39F,MAAMkG,cACTm1F,EAAGtjE,aACH,MAEF,KAAK,EAAA/3B,MAAMgH,eACTq0F,EAAGiN,cACH,MAEF,KAAK,EAAAtoG,MAAMuG,aACT80F,EAAGmN,mBAIAd,IA+Bb,SAASyB,EAAoBn6G,GAC3B,OAAQA,GACN,KAAK,EAAAgR,MAAM1E,MAAO,OAAO,EACzB,KAAK,EAAA0E,MAAMuE,OACX,KAAK,EAAAvE,MAAMwE,YACX,KAAK,EAAAxE,MAAMyE,aACX,KAAK,EAAAzE,MAAM2E,yBACX,KAAK,EAAA3E,MAAM0E,gBACX,KAAK,EAAA1E,MAAM4E,aACX,KAAK,EAAA5E,MAAM6E,eACX,KAAK,EAAA7E,MAAM8E,yBACX,KAAK,EAAA9E,MAAM+E,+BACX,KAAK,EAAA/E,MAAMgF,2CACX,KAAK,EAAAhF,MAAMiF,iBACX,KAAK,EAAAjF,MAAMmF,aACX,KAAK,EAAAnF,MAAMkF,WAAY,OAAO,EAC9B,KAAK,EAAAlF,MAAMoH,SAAU,OAAO,EAC5B,KAAK,EAAApH,MAAMsE,QAAS,OAAO,EAC3B,KAAK,EAAAtE,MAAMqE,oBAAqB,OAAO,EACvC,KAAK,EAAArE,MAAMiE,IAAK,OAAO,EACvB,KAAK,EAAAjE,MAAMkE,MAAO,OAAO,EACzB,KAAK,EAAAlE,MAAMgE,UAAW,OAAO,GAC7B,KAAK,EAAAhE,MAAMiD,cACX,KAAK,EAAAjD,MAAMkD,mBACX,KAAK,EAAAlD,MAAMmD,qBACX,KAAK,EAAAnD,MAAMoD,0BAA2B,OAAO,GAC7C,KAAK,EAAApD,MAAMI,GACX,KAAK,EAAAJ,MAAMqB,GACX,KAAK,EAAArB,MAAMtE,WACX,KAAK,EAAAsE,MAAM6C,SACX,KAAK,EAAA7C,MAAM8C,YACX,KAAK,EAAA9C,MAAM+C,gBACX,KAAK,EAAA/C,MAAMgD,mBAAoB,OAAO,GACtC,KAAK,EAAAhD,MAAM6D,kBACX,KAAK,EAAA7D,MAAM8D,wBACX,KAAK,EAAA9D,MAAM+D,oCAAqC,OAAO,GACvD,KAAK,EAAA/D,MAAMqD,KACX,KAAK,EAAArD,MAAMsD,MAAO,OAAO,GACzB,KAAK,EAAAtD,MAAMwD,SACX,KAAK,EAAAxD,MAAMyD,MACX,KAAK,EAAAzD,MAAM0D,QAAS,OAAO,GAC3B,KAAK,EAAA1D,MAAMuD,kBAAmB,OAAO,GACrC,KAAK,EAAAvD,MAAM2D,UACX,KAAK,EAAA3D,MAAM4D,YAAa,OAAO,GAC/B,KAAK,EAAA5D,MAAMwG,IACX,KAAK,EAAAxG,MAAMrE,IACX,KAAK,EAAAqE,MAAMqH,YACX,KAAK,EAAArH,MAAMmE,YAAa,OAAO,GAEjC,OAAO,EAjoIT,WAsjIA,SAAkB8lG,GAChB,mBACA,qBACA,uBACA,qBACA,+BACA,iCACA,+BACA,iCACA,+BACA,iCACA,kCACA,4BACA,gCACA,sBACA,4BACA,wCACA,sCACA,oCACA,sCACA,oBACA,oCACA,4BAtBF,CAAkB,EAAAA,aAAA,EAAAA,WAAU,M,+HCjpI5B,aAIA,OAyBA,OAIA,OAKA,MAAsBC,EAUpB,YAAY/pF,EAAkBgqF,GAAuB,GAHrD,KAAAh8G,KAA4B,IAAI9F,IAI9BhI,KAAK8/B,QAAUA,EACf9/B,KAAK8pH,eAAiBA,EAIxB,OAEE,IAAK,IAAI1xF,EAAUC,WAAWr4B,KAAK8/B,QAAQzR,aAAchuB,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC9F,IAAI6zB,EAAOpX,UAAUsb,EAAQ/3B,IACzB6zB,EAAKznB,OAAOuP,YAAc,EAAAvN,WAAW6pB,YAAYt4B,KAAK+pH,UAAU71F,IAKxE,UAAUA,GACR,IAAIx0B,EAAUw0B,EAAKx0B,QACnB,GAAIA,EAEF,IAAK,IAAIo1B,EAAQC,SAASr1B,GAAUW,EAAI,EAAG8N,EAAI2mB,EAAM1nB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACvE,IAAIwhC,EAAa/kB,UAAUgY,EAAMz0B,IAC7Bs6B,EAAS1vB,OAAOvL,EAAQwB,IAAI2gC,IAChC7hC,KAAKgqH,aAAanoF,EAAYlH,GAGlC,IAAIF,EAAcvG,EAAKuG,YACvB,GAAIA,EACF,IAAK,IAAIp6B,EAAI,EAAG8N,EAAIssB,EAAYrtB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAClD,IAAI40B,EAAanY,UAAU2d,EAAYp6B,IACvCL,KAAK+pH,UAAU90F,IAMrB,aAAar0B,EAAc20B,GACzB,IAAIA,EAAQ8F,GAAG,EAAAh5B,YAAYof,UAAazhB,KAAK8pH,eAA7C,CACA,IAAIh8G,EAAO9N,KAAK8N,KAChB,GAAKynB,EAAQ8F,GAAG,EAAAh5B,YAAY28B,YAAalxB,EAAKE,IAAIunB,GAKlD,OADAznB,EAAKM,IAAImnB,EAAS30B,GACV20B,EAAQ5mB,MACd,KAAK,EAAAgd,YAAYpS,OACXgc,EAAQ8F,GAAG,EAAAh5B,YAAYojC,WAAWzlC,KAAKiqH,YAAYrpH,EAAc20B,GACrE,MAEF,KAAK,EAAA5J,YAAYjL,KACX6U,EAAQ8F,GAAG,EAAAh5B,YAAYojC,WAAWzlC,KAAKkqH,UAAUtpH,EAAY20B,GACjE,MAEF,KAAK,EAAA5J,YAAY8W,UAAW,MAC5B,KAAK,EAAA9W,YAAYmN,mBACf94B,KAAKmqH,uBAAuBvpH,EAAyB20B,GACrD,MAEF,KAAK,EAAA5J,YAAY0F,gBACfrxB,KAAKoqH,oBAAoBxpH,EAAsB20B,GAC/C,MAEF,KAAK,EAAA5J,YAAYmP,MAAO,CACtB,IAAIqN,EAAuB5S,EACvB4S,EAAc9M,GAAG,EAAAh5B,YAAYojC,WAAWzlC,KAAKqqH,WAAWzpH,EAAMunC,GAClE,MAEF,KAAK,EAAAxc,YAAY6N,mBAAoB,CACnC,IAAI83B,EAAuC/7B,EAASoK,SACpD,IAAK2xB,EAAkB,MACvB/7B,EAAU+7B,EAEV,MAEF,KAAK,EAAA3lC,YAAYkP,SAAU,CACzB,IAAIy2B,EAA6B/7B,EAC7BwL,EAAiBuwB,EAAiBvwB,eAClCA,GAAgB/gC,KAAKsqH,cAAc1pH,EAAMmgC,GAC7C,IAAIE,EAAiBqwB,EAAiBrwB,eAClCA,GAAgBjhC,KAAKsqH,cAAc1pH,EAAMqgC,GAC7C,MAEF,KAAK,EAAAtV,YAAYrK,WA0evB,SAASipG,EAAkBh1F,GACzB,IAAI7hB,EAAU6hB,EAAQ7hB,QACtB,GAAIA,EAEF,IAAK,IAAI0kB,EAAUC,WAAW3kB,GAAUrT,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC7E,IAAIs6B,EAAS7d,UAAUsb,EAAQ/3B,IAC/B,OAAQs6B,EAAOhsB,MACb,KAAK,EAAAgd,YAAYmN,mBAAoB,CACnC,IAAIS,EAAgCoB,EAAQpB,UAC5C,GAAIA,EAEF,IAAK,IAAInB,EAAUC,WAAWkB,GAAYpF,EAAI,EAAG7zB,EAAI83B,EAAQhrB,OAAQ+mB,EAAI7zB,IAAK6zB,EAAG,CAE/E,GADerX,UAAUsb,EAAQjE,IACpBkH,GAAG,EAAAh5B,YAAYojC,UAAW,OAAO,EAGlD,MAEF,KAAK,EAAA9Z,YAAY0F,gBAAiB,CAChC,IAAIkI,EAA6BoB,EAAQpB,UACzC,GAAIA,EAEF,IAAK,IAAInB,EAAUC,WAAWkB,GAAYpF,EAAI,EAAG7zB,EAAI83B,EAAQhrB,OAAQ+mB,EAAI7zB,IAAK6zB,EAAG,CAE/E,GADerX,UAAUsb,EAAQjE,IACpBkH,GAAG,EAAAh5B,YAAYojC,UAAW,OAAO,EAGlD,MAEF,QACE,GAAI9K,EAAOU,GAAG,EAAAh5B,YAAYojC,WAAa8kF,EAAkB5vF,GAAS,OAAO,GAMjF,OAAO,GA7gBG4vF,CAAkBh1F,IAAUv1B,KAAKwqH,eAAe5pH,EAAM20B,GAC1D,MAEF,KAAK,EAAA5J,YAAYmW,eAAgB,MACjC,QAAS72B,QAAO,QA/ChBjL,KAAKyqH,WAAW7pH,EAAM20B,EAAStqB,OAAO6C,EAAK5M,IAAIq0B,MAmD3C,uBAAuB30B,EAAc20B,GAC3C,IAAIgE,EAAYhE,EAAQgE,UACxB,GAAIA,EAEF,IAAK,IAAInB,EAAUC,WAAWkB,GAAYl5B,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC/E,IAAIs/B,EAAW7iB,UAAUsb,EAAQ/3B,IAC7Bs/B,EAAStE,GAAG,EAAAh5B,YAAYojC,WAAWzlC,KAAKsqH,cAAc1pH,EAAM++B,IAK9D,oBAAoB/+B,EAAc20B,GACxC,IAAIgE,EAAYhE,EAAQgE,UACxB,GAAIA,EAEF,IAAK,IAAInB,EAAUC,WAAWkB,GAAYl5B,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC/E,IAAIs/B,EAAW7iB,UAAUsb,EAAQ/3B,IAC7Bs/B,EAAStE,GAAG,EAAAh5B,YAAYojC,WAAWzlC,KAAK0qH,WAAW9pH,EAAM++B,KArHrE,kBAqIA,MAAagrF,UAAmBd,EAW9B,YAAY/pF,EAAkBgqF,GAAuB,GACnD/xG,MAAM+nB,EAASgqF,GALT,KAAAv8G,GAAe,GACf,KAAAq9G,YAAmB,EAL3B,aAAa9qF,GACX,OAAO,IAAI6qF,EAAW7qF,GAAS+qF,QAWjC,YAAYjqH,EAAc20B,GACxB,IAAIhoB,EAAKvN,KAAKuN,GACVu7F,EAAUvzE,EAAQ8F,GAAG,EAAAh5B,YAAYmgC,SAMrC,GALA,EAAAsoF,OAAOv9G,EAAIvN,KAAK4qH,aACZ9hB,GAASv7F,EAAGE,KAAK,UACrBF,EAAGE,KAAKzN,KAAK+qH,aAAax1F,EAAQ7lB,OAClCnC,EAAGE,KAAK,KACRF,EAAGE,KAAK7M,GACJkoG,EACF,OAAQvzE,EAAQ6M,mBACd,KAAK,EACH70B,EAAGE,KAAK,OACRF,EAAGE,KAAKquF,cAAcvmE,EAAQ8M,uBAC9B,MAEF,KAAK,EACH90B,EAAGE,KAAK,OACRF,EAAGE,KAAK8nB,EAAQgN,mBAAmB71B,YACnC,MAEF,QAASzB,QAAO,GAGpBsC,EAAGE,KAAK,OAGV,UAAU7M,EAAc20B,GACtB,IAAIhoB,EAAKvN,KAAKuN,GACd,EAAAu9G,OAAOv9G,EAAIvN,KAAK4qH,eAChBr9G,EAAGE,KAAK,cACRF,EAAGE,KAAK7M,GACR2M,EAAGE,KAAK,QACR,IAAIiG,EAAU6hB,EAAQ7hB,QACtB,GAAIA,EAAS,CAEX,IAAK,IAAIohB,EAAQC,SAASrhB,GAAUrT,EAAI,EAAG8N,EAAI2mB,EAAM1nB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACvE,IAAIwhC,EAAa/kB,UAAUgY,EAAMz0B,IAC7Bs6B,EAAS1vB,OAAOyI,EAAQxS,IAAI2gC,IAChC,GAAIlH,EAAOhsB,MAAQ,EAAAgd,YAAY8W,UAAW,CACxC,IAAIk7D,EAAuBhjE,EACvBmuE,EAAUnL,EAAUtiE,GAAG,EAAAh5B,YAAYmgC,SACvC,EAAAsoF,OAAOv9G,EAAIvN,KAAK4qH,aACZ9hB,EAASv7F,EAAGE,KAAK,UAChBF,EAAGE,KAAK,aACbF,EAAGE,KAAK,kBACRF,EAAGE,KAAKo0B,GACJinE,IACFv7F,EAAGE,KAAK,OACRxC,OAAsC,GAA/B0yF,EAAUv7D,mBACjB70B,EAAGE,KAAKmd,QAAQ+yE,EAAUt7D,sBAAsB31B,aAElDa,EAAGE,KAAK,QAIZ,IAAK,IAAI2qB,EAAUC,WAAW3kB,GAAUrT,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC7E,IAAIs6B,EAAS7d,UAAUsb,EAAQ/3B,IAC3Bs6B,EAAOhsB,MAAQ,EAAAgd,YAAY8W,WAAWziC,KAAKgqH,aAAarvF,EAAO/5B,KAAM+5B,IAG7E,EAAAmwF,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,OAGV,cAAc7M,EAAc20B,GAC1B,IAAIhoB,EAAKvN,KAAKuN,GACVoI,EAAY4f,EAAQ5f,UACxB,EAAAm1G,OAAOv9G,EAAIvN,KAAK4qH,aAChBr9G,EAAGE,KAAKzN,KAAK+qH,aAAap1G,EAAUzG,aACpC3B,EAAGE,KAAK,KACRF,EAAGE,KAAK7M,GACR2M,EAAGE,KAAK,KACR,IAAIwB,EAAa0G,EAAUmvB,eACvBmlB,EAAgBh7C,EAAW7B,OAE/B,IAAK,IAAI/M,EAAI,EAAGA,EAAI4pD,IAAiB5pD,EAC/BA,GAAGkN,EAAGE,KAAK,MAEfF,EAAGE,KAAKzN,KAAK+qH,aAAa97G,EAAW5O,KACrCkN,EAAGE,KAAK,KACRF,EAAGE,KAAKkI,EAAUsvB,iBAAiB5kC,IAErCkN,EAAGE,KAAK,QACR,IAAIiG,EAAU6hB,EAAQ7hB,QACtB,GAAgB,OAAZA,GAAoBA,EAAQi+B,KAAO,EAAG,CACxC,EAAAm5E,OAAOv9G,EAAIvN,KAAK4qH,aAChBr9G,EAAGE,KAAK,cACRF,EAAGE,KAAK8nB,EAAQ30B,MAChB2M,EAAGE,KAAK,QAER,IAAK,IAAI2qB,EAAUC,WAAW3kB,GAAUrT,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC7E,IAAIs6B,EAAS7d,UAAUsb,EAAQ/3B,IAC/BL,KAAKgqH,aAAarvF,EAAO/5B,KAAM+5B,GAEjC,EAAAmwF,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,QAIZ,WAAW7M,EAAc20B,GACvB,IAAIhoB,EAAKvN,KAAKuN,GACd,EAAAu9G,OAAOv9G,EAAIvN,KAAK4qH,eAChBr9G,EAAGE,KAAK,cACRF,EAAGE,KAAK7M,GACR2M,EAAGE,KAAK,QAER,EAAAq9G,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,OAGV,eAAe7M,EAAc20B,GAC3Bv1B,KAAK0qH,WAAW9pH,EAAM20B,GAGxB,WAAW30B,EAAc20B,IAIzB,eAAe30B,EAAc20B,GAC3B,IAAIhoB,EAAKvN,KAAKuN,GACd,EAAAu9G,OAAOv9G,EAAIvN,KAAK4qH,eAChBr9G,EAAGE,KAAK,cACRF,EAAGE,KAAK7M,GACR2M,EAAGE,KAAK,QACR,IAAIiG,EAAU6hB,EAAQ7hB,QACtB,GAAIA,EAEF,IAAK,IAAI0kB,EAAUC,WAAW3kB,GAAUrT,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC7E,IAAIs6B,EAAS7d,UAAUsb,EAAQ/3B,IAC/BL,KAAKgqH,aAAarvF,EAAO/5B,KAAM+5B,GAGnC,EAAAmwF,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,OAGV,WAAW7M,EAAc20B,EAAkBuN,IAI3C,aAAapzB,GACX,OAAQA,EAAKf,MACX,KAAK,EAAa,MAAO,OACzB,KAAK,EAAc,MAAO,QAC1B,KAAK,EAAc,MAAO,OAC1B,KAAK,EAAc,MAAO,YAC1B,KAAK,EAAgB,OAAO3O,KAAK8/B,QAAQ/R,QAAQoF,SAAW,YAAc,OAC1E,KAAK,EAAa,MAAO,QACzB,KAAK,EAAc,MAAO,iBAC1B,KAAK,EAAc,MAAO,gBAE1B,KAAK,EAAc,MAAO,qBAC1B,KAAK,EAAgB,OAAOnzB,KAAK8/B,QAAQ/R,QAAQoF,SAAW,qBAAuB,gBAEnF,KAAK,GAAe,MAAO,UAC3B,KAAK,GAAc,MAAO,qBAC1B,KAAK,GAAc,MAAO,sBAC1B,KAAK,GAAe,MAAO,OAC3B,QAEE,OADAloB,QAAO,GACA,IAKb,QACE,IAAIsC,EAAKvN,KAAKuN,GAMd,OALAA,EAAGE,KAAK,4BACNzN,KAAK4qH,YACP5qH,KAAKgrH,SACHhrH,KAAK4qH,YACPr9G,EAAGE,KAAK,OACDF,EAAGG,KAAK,KA3LnB,eAgMA,MAAau9G,UAAmBpB,EAW9B,YAAY/pF,EAAkBgqF,GAAuB,GACnD/xG,MAAM+nB,EAASgqF,GALT,KAAAv8G,GAAe,GACf,KAAAq9G,YAAmB,EAL3B,aAAa9qF,GACX,OAAO,IAAImrF,EAAWnrF,GAAS+qF,QAWjC,YAAYjqH,EAAc20B,GACxB,IAAIhoB,EAAKvN,KAAKuN,GACVu7F,EAAUvzE,EAAQ8F,GAAG,EAAAh5B,YAAYmgC,SACrC,EAAAsoF,OAAOv9G,EAAIvN,KAAK4qH,aACZr1F,EAAQ8F,GAAG,EAAAh5B,YAAYyf,QACrBgnF,EAASv7F,EAAGE,KAAK,oBAChBF,EAAGE,KAAK,WAETq7F,EAASv7F,EAAGE,KAAK,iBAChBF,EAAGE,KAAK,eAEfF,EAAGE,KAAK7M,GACR2M,EAAGE,KAAK,MACRF,EAAGE,KAAKzN,KAAK+qH,aAAax1F,EAAQ7lB,OAClCnC,EAAGE,KAAK,OACRzN,KAAKwqH,eAAe5pH,EAAM20B,GAG5B,UAAU30B,EAAc20B,GACtB,IAAIhoB,EAAKvN,KAAKuN,GACd,EAAAu9G,OAAOv9G,EAAIvN,KAAK4qH,eAChBr9G,EAAGE,KAAK,WACJ8nB,EAAQ8F,GAAG,EAAAh5B,YAAY+d,QAAQ7S,EAAGE,KAAK,UAC3CF,EAAGE,KAAK,SACRF,EAAGE,KAAK7M,GACR2M,EAAGE,KAAK,QACR,IAAIiG,EAAU6hB,EAAQ7hB,QAClBw3G,EAAmB,EACvB,GAAIx3G,EAAS,CACXw3G,EAAmBx3G,EAAQi+B,KAE3B,IAAK,IAAI7c,EAAQC,SAASrhB,GAAUrT,EAAI,EAAG8N,EAAI2mB,EAAM1nB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACvE,IAAIwhC,EAAa/kB,UAAUgY,EAAMz0B,IAC7Bs6B,EAAS1vB,OAAOyI,EAAQxS,IAAI2gC,IAChC,GAAIlH,EAAOhsB,MAAQ,EAAAgd,YAAY8W,UAAW,CACxC,IAAIk7D,EAAuBhjE,EAC3B,EAAAmwF,OAAOv9G,EAAIvN,KAAK4qH,aAChBr9G,EAAGE,KAAKo0B,GACJlH,EAAOU,GAAG,EAAAh5B,YAAYmgC,WACxBj1B,EAAGE,KAAK,OACRxC,OAAsC,GAA/B0yF,EAAUv7D,mBACjB70B,EAAGE,KAAKmd,QAAQ+yE,EAAUt7D,sBAAsB31B,aAElDa,EAAGE,KAAK,SACNy9G,IAIR,EAAAJ,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,OACJy9G,GAAkBlrH,KAAKwqH,eAAe5pH,EAAM20B,GAGlD,cAAc30B,EAAc20B,GAC1B,IAAIA,EAAQqD,MAAM,EAAAv2B,YAAYof,QAAU,EAAApf,YAAYwf,KAApD,CACA,IAAItU,EAAKvN,KAAKuN,GACVoI,EAAY4f,EAAQ5f,UAIxB,GAHA,EAAAm1G,OAAOv9G,EAAIvN,KAAK4qH,aACZr1F,EAAQ8F,GAAG,EAAAh5B,YAAYqf,YAAYnU,EAAGE,KAAK,cAC3C8nB,EAAQ8F,GAAG,EAAAh5B,YAAYyf,SAASvU,EAAGE,KAAK,WACxC8nB,EAAQ8F,GAAG,EAAAh5B,YAAYye,KAMzB,OALAvT,EAAGE,KAAK,QACRF,EAAGE,KAAK7M,GACR2M,EAAGE,KAAK,QACRF,EAAGE,KAAKzN,KAAK+qH,aAAap1G,EAAUzG,kBACpC3B,EAAGE,KAAK,OAGH8nB,EAAQqD,MAAM,EAAAv2B,YAAYyf,OAAS,EAAAzf,YAAY28B,WAAWzxB,EAAGE,KAAK,oBACvEF,EAAGE,KAAK7M,GAEV2M,EAAGE,KAAK,KACR,IAAIwB,EAAa0G,EAAUmvB,eACvBmlB,EAAgBh7C,EAAW7B,OAE/B,IAAK,IAAI/M,EAAI,EAAGA,EAAI4pD,IAAiB5pD,EAC/BA,GAAGkN,EAAGE,KAAK,MAEfF,EAAGE,KAAKkI,EAAUsvB,iBAAiB5kC,IACnCkN,EAAGE,KAAK,MACRF,EAAGE,KAAKzN,KAAK+qH,aAAa97G,EAAW5O,KAEnCk1B,EAAQqD,MAAM,EAAAv2B,YAAY6Y,YAAc,EAAA7Y,YAAYwf,KACtDtU,EAAGE,KAAK,MAERF,EAAGE,KAAK,OACRF,EAAGE,KAAKzN,KAAK+qH,aAAap1G,EAAUzG,cAEtC3B,EAAGE,KAAK,OACRzN,KAAKwqH,eAAe5pH,EAAM20B,IAG5B,WAAW30B,EAAc20B,GACvB,IAAIhoB,EAAKvN,KAAKuN,GACVu0G,EAAcvsF,EAAQ5mB,MAAQ,EAAAgd,YAAY1K,UAC9C,EAAA6pG,OAAOv9G,EAAIvN,KAAK4qH,eACZ9I,EACFv0G,EAAGE,KAAK,sBAERF,EAAGE,KAAK,WACJ8nB,EAAQ8F,GAAG,EAAAh5B,YAAYyd,WAAWvS,EAAGE,KAAK,aAC9CF,EAAGE,KAAK,WAEVF,EAAGE,KAAK7M,GACR,IAAI+/B,EAAOpL,EAAQoL,KACnB,GAAa,OAATA,GAAiBA,EAAKtF,GAAG,EAAAh5B,YAAYojC,SAAW,EAAApjC,YAAYq4B,eAAgB,CAC9EntB,EAAGE,KAAK,aACR,IAAI+oB,EAAcvrB,OAAOsqB,EAAQtzB,UAAUu0B,aAC3CjpB,EAAGE,KAAK+oB,EAAY51B,KAAK0X,WAAWpL,MAEtCK,EAAGE,KAAK,QACR,IAAIstB,EAAgBxF,EAAQtzB,UAAUyR,QACtC,GAAIqnB,EAEF,IAAK,IAAI3C,EAAUC,WAAW0C,GAAgB16B,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACnF,IAAIs6B,EAAS7d,UAAUsb,EAAQ/3B,IAC/BL,KAAKgqH,aAAarvF,EAAO/5B,KAAM+5B,GAGnC,IAAIlC,EAAkBlD,EAAQ7hB,QAC9B,GAAI+kB,EAEF,IAAK,IAAIL,EAAUC,WAAWI,GAAkBp4B,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CACrF,IAAIs6B,EAAS7d,UAAUsb,EAAQ/3B,IAC3Bs6B,EAAOvI,QAAUmD,GACnBv1B,KAAKgqH,aAAarvF,EAAO/5B,KAAM+5B,GAIrC,EAAAmwF,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,OAGV,eAAe7M,EAAc20B,GAC3Bv1B,KAAK0qH,WAAW9pH,EAAM20B,GAGxB,WAAW30B,EAAc20B,GACvB,IAAIA,EAAQ8F,GAAG,EAAAh5B,YAAYof,SAA3B,CACA,IAAIlU,EAAKvN,KAAKuN,GACd,EAAAu9G,OAAOv9G,EAAIvN,KAAK4qH,aACZr1F,EAAQ8F,GAAG,EAAAh5B,YAAYqf,YAAYnU,EAAGE,KAAK,cAC3C8nB,EAAQ8F,GAAG,EAAAh5B,YAAYyf,SAASvU,EAAGE,KAAK,WACxC8nB,EAAQ8F,GAAG,EAAAh5B,YAAYuf,WAAWrU,EAAGE,KAAK,aAC9CF,EAAGE,KAAK7M,GACR2M,EAAGE,KAAK,MACRF,EAAGE,KAAKzN,KAAK+qH,aAAax1F,EAAQ7lB,OAClCnC,EAAGE,KAAK,QAGV,eAAe7M,EAAc20B,GAC3B,IAAI7hB,EAAU6hB,EAAQ7hB,QACtB,GAAgB,OAAZA,GAAoBA,EAAQi+B,KAAO,EAAG,CACxC,IAAIpkC,EAAKvN,KAAKuN,GACd,EAAAu9G,OAAOv9G,EAAIvN,KAAK4qH,eAChBr9G,EAAGE,KAAK,qBACRF,EAAGE,KAAK7M,GACR2M,EAAGE,KAAK,QAER,IAAK,IAAI2qB,EAAUC,WAAW3kB,GAAUrT,EAAI,EAAG8N,EAAIiqB,EAAQhrB,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC7E,IAAIs6B,EAAS7d,UAAUsb,EAAQ/3B,IAC/BL,KAAKgqH,aAAarvF,EAAO/5B,KAAM+5B,GAEjC,EAAAmwF,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,QAIZ,WAAW7M,EAAc20B,EAAkBuN,GACzC,IAAIv1B,EAAKvN,KAAKuN,GACd,EAAAu9G,OAAOv9G,EAAIvN,KAAK4qH,aAChBr9G,EAAGE,KAAK,iBACRF,EAAGE,KAAK7M,GACR2M,EAAGE,KAAK,aACRF,EAAGE,KAAKq1B,GACRv1B,EAAGE,KAAK,OAGV,aAAaiC,GACX,OAAQA,EAAKf,MACX,KAAK,EAAa,MAAO,KACzB,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAgB,MAAO,QAC5B,KAAK,EAAa,MAAO,KACzB,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAc,MAAO,MAE1B,KAAK,EAAc,MAAO,MAC1B,KAAK,EAAgB,MAAO,QAE5B,KAAK,GAAe,MAAO,OAC3B,KAAK,GAAc,MAAO,MAC1B,KAAK,GAAc,MAAO,MAC1B,KAAK,GAAe,MAAO,OAC3B,KAAK,GAAe,MAAO,OAC3B,QAEE,OADA1D,QAAO,GACA,OAKb,QACE,IAAIsC,EAAKvN,KAAKuN,GACV4lB,EAAWnzB,KAAK8/B,QAAQ/R,QAAQoF,SA4BpC,OA3BA5lB,EAAGE,KAAK,+BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACJ0lB,EACF5lB,EAAGE,KAAK,4BAERF,EAAGE,KAAK,4BAEVF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACJ0lB,EACF5lB,EAAGE,KAAK,4BAERF,EAAGE,KAAK,4BAEVF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACNzN,KAAK4qH,YACP5qH,KAAKgrH,SACHhrH,KAAK4qH,YACPr9G,EAAGE,KAAK,OACRF,EAAGE,KAAK,8BACDzN,KAAKuN,GAAGG,KAAK,KAzPxB,gB,qHC/WA,MACA,MACA,MACA,MACA,O,iBCTA,YAEA,IAAIy9G,EAAgC,oBAAXlgE,QAA0BA,aAA4B,IAAX3vB,GAA0BA,GAAUv7B,KAExGorH,EAAYzlH,WAAa,EACzBylH,EAAYvlH,eAAgB,EAC5BulH,EAAYtlH,gBAAkB,EAC9BslH,EAAYplH,mBAAqB,EACjColH,EAAYnlH,iBAAmB,EAC/BmlH,EAAYC,4BAA6B,EACzCD,EAAYhlH,4BAA6B,EACzCglH,EAAY7kH,yBAA0B,EACtC6kH,EAAY5kH,kBAAmB,EAC/B4kH,EAAY3kH,qBAAsB,EAElC,IAAIiB,EAAM,IAAIwB,aAAa,GACvB5B,EAAM,IAAIyB,YAAYrB,EAAI+pB,QAoJ9B,SAAS65F,IACHniH,MAAMoiH,kBACRpiH,MAAMoiH,kBAAkBtrH,KAAMqrH,GAE9BrrH,KAAKq5D,MAAQr5D,KAAKY,KAAO,KAAOZ,KAAK4L,QAAU,MAAO,IAAI1C,OAAQmwD,MAWtE,SAASkyD,EAAe3/G,GACtB5L,KAAK4L,QAAUA,GAAW,mBACtB1C,MAAMoiH,kBACRpiH,MAAMoiH,kBAAkBtrH,KAAMurH,GAE9BvrH,KAAKq5D,MAAQr5D,KAAKY,KAAO,KAAOZ,KAAK4L,QAAU,MAAO,IAAI1C,OAAQmwD,MA6DtE,SAASmyD,EAAkBxmG,EAAGC,GAC5B,GAAID,IAAMC,EAAG,CACX,GAAU,IAAND,EAAS,OAAO,EACpBA,EAAI,EAAIA,EAAGC,EAAI,EAAIA,MACd,CACL,IAAIwmG,EAAOzmG,GAAKA,EAAG0mG,EAAOzmG,GAAKA,EAC/B,GAAIwmG,EAAOC,EAAM,OAAOD,EAAOC,EACtB,MAAL1mG,IAAWA,EAAIpd,OAAOod,IACjB,MAALC,IAAWA,EAAIrd,OAAOqd,IAE5B,OAAOD,EAAIC,EAAI,GAAK,EA7OtBlkB,OAAO4qH,iBACLR,EAAgB,GAAI,SAAY7pH,GAAS,OAAOA,GAAS,IAAM,IAC/D,CACE,UAAa,CAAEA,OAAQ,IAAKsqH,UAAU,GACtC,UAAa,CAAEtqH,MAAQ,IAAKsqH,UAAU,KAI1C7qH,OAAO4qH,iBACLR,EAAiB,IAAI,SAAa7pH,GAAS,OAAOA,GAAS,IAAM,IACjE,CACE,UAAa,CAAEA,OAAQ,MAAOsqH,UAAU,GACxC,UAAa,CAAEtqH,MAAQ,MAAOsqH,UAAU,KAI5C7qH,OAAO4qH,iBACLR,EAAiB,IAAIA,EAAmB,MAAI,SAAa7pH,GAAS,OAAe,EAARA,GACzE,CACE,UAAa,CAAEA,OAAQ,WAAYsqH,UAAU,GAC7C,UAAa,CAAEtqH,MAAQ,WAAYsqH,UAAU,KAIjD7qH,OAAO4qH,iBACLR,EAAgB,GAAI,SAAY7pH,GAAS,OAAe,IAARA,GAChD,CACE,UAAa,CAAEA,MAAS,EAAGsqH,UAAU,GACrC,UAAa,CAAEtqH,MAAO,IAAKsqH,UAAU,KAIzC7qH,OAAO4qH,iBACLR,EAAiB,IAAI,SAAa7pH,GAAS,OAAe,MAARA,GAClD,CACE,UAAa,CAAEA,MAAW,EAAGsqH,UAAU,GACvC,UAAa,CAAEtqH,MAAO,MAAOsqH,UAAU,KAI3C7qH,OAAO4qH,iBACLR,EAAiB,IAAIA,EAAmB,MAAI,SAAa7pH,GAAS,OAAOA,IAAU,GACnF,CACE,UAAa,CAAEA,MAAgB,EAAGsqH,UAAU,GAC5C,UAAa,CAAEtqH,MAAO,WAAYsqH,UAAU,KAIhD7qH,OAAO4qH,iBACLR,EAAkB,KAAI,SAAc7pH,GAAS,QAASA,GACtD,CACE,UAAa,CAAEA,OAAO,EAAOsqH,UAAU,GACvC,UAAa,CAAEtqH,OAAO,EAAOsqH,UAAU,KAI3C7qH,OAAO4qH,iBACLR,EAAiB,IAAI,SAAa7pH,GAAS,OAAO6G,KAAK0jH,OAAOvqH,IAC9D,CACE,QAAa,CAAEA,MAAO6G,KAAK0jH,OAAO,cAAgBD,UAAU,GAC5D,UAAa,CAAEtqH,MAAO6G,KAAK0jH,OAAO,cAAgBD,UAAU,GAC5D,UAAa,CAAEtqH,MAAO6G,KAAK0jH,OAAO,aAAgBD,UAAU,GAC5D,iBAAqB,CAAEtqH,MAAQ6G,KAAK0jH,OAAO,eAAiBD,UAAU,GACtE,iBAAqB,CAAEtqH,OAAQ,SAAUsqH,UAAU,GACnD,iBAAqB,CAAEtqH,MAAQ,SAAUsqH,UAAU,KAIvD7qH,OAAO4qH,iBACLR,EAAiB,IAAI,SAAa7pH,GAAS,OAAQA,GACnD,CACE,QAAa,CAAEA,MAAO,qBAAyBsqH,UAAU,GACzD,UAAa,CAAEtqH,MAAwB,OAAQsqH,UAAU,GACzD,UAAa,CAAEtqH,MAAO,sBAAyBsqH,UAAU,GACzD,iBAAqB,CAAEtqH,MAAO,uBAA0BsqH,UAAU,GAClE,iBAAqB,CAAEtqH,OAAQ,iBAAkBsqH,UAAU,GAC3D,iBAAqB,CAAEtqH,MAAQ,iBAAkBsqH,UAAU,KAI/DT,EAAiB,IAAIhjH,KAAK2jH,MAE1BX,EAAiB,IAAI,SAAa7pH,GAChC,IAAIZ,EAAIyH,KAAK2jH,MAAMxqH,GAASA,GAC5B,OAAOA,EAAQ,GAAKZ,EAAIA,GAG1ByqH,EAAoB,OAAI,SAAgB7pH,GAGtC,OAAiD,WADjDA,GAAiB,WADjBA,GAASA,IAAU,EAAI,cACSA,IAAU,EAAI,aAC3BA,IAAU,GAAM,aAA8B,IAGnE6pH,EAAkB,KAAI,SAAc7pH,EAAO8xC,GAEzC,OAAQ9xC,IADR8xC,GAAS,IACkB9xC,IAAW,GAAK8xC,GAG7C+3E,EAAkB,KAAI,SAAc7pH,EAAO8xC,GAEzC,OAAQ9xC,KADR8xC,GAAS,IACmB9xC,GAAU,GAAK8xC,GAG7C+3E,EAAiB,IAAIhjH,KAAK05D,IAE1BspD,EAAiB,IAAIhjH,KAAK6xD,IAE1BmxD,EAAiB,IAAIhjH,KAAK0yD,IAE1BswD,EAAkB,KAAIhjH,KAAK4/C,KAE3BojE,EAAmB,MAAIhjH,KAAK25D,MAG5BqpD,EAAqB,QAAI,SAAiB7pH,GACxC,MAA4C,KAAxC6G,KAAK05D,IAAIvgE,EAAQ6G,KAAKg6D,MAAM7gE,IACvB,EAAM6G,KAAK4jH,MAAc,GAARzqH,GAEnB6G,KAAK4jH,MAAMzqH,IAGpB6pH,EAAoB,OAAI,SAAgBv2G,EAAQC,EAAStC,GACvD,OAAOA,EAAYqC,EAASC,GAG9Bs2G,EAAkB,KAAIhjH,KAAK+5D,KAE3BipD,EAAmB,MAAIhjH,KAAKg6D,MAE5BgpD,EAAsB,SAAI,SAAkBa,EAAGC,GAC7C,OAAO9jH,KAAK05D,IAAImqD,GAAK7jH,KAAK+jH,KAAKD,IAGjCd,EAAmB,MAAI,SAAe7pH,GACpC,IAAI0jB,EAAI1jB,GAAS,EAAI,SACjB2jB,GAAa,SAAR3jB,IAAuB,EAIhC,OAFA0jB,GADA1jB,EAAQ0jB,EAAIC,IACC,GAAK,QAClBA,GAAa,MAAR3jB,IAAuB,KAI9B6pH,EAAqB,QAAI,SAAiB7pH,GACxC,OAASA,GAAS,EAAK,MAAYA,GAAS,EAAK,IAAmB,WAARA,GAU9D+pH,EAAiBppH,UAAYlB,OAAOY,OAAOuH,MAAMjH,WACjDopH,EAAiBppH,UAAUrB,KAAO,mBAClCyqH,EAAiBppH,UAAU2J,QAAU,cAErCu/G,EAAyB,YAAI,WAC3B,MAAM,IAAIE,GAWZE,EAAetpH,UAAYlB,OAAOY,OAAOuH,MAAMjH,WAC/CspH,EAAetpH,UAAUrB,KAAO,iBAEhCuqH,EAAoB,OAAI,SAAgBgB,EAAWvgH,GACjD,GAAIugH,EAAW,OAAOA,EACtB,MAAM,IAAIZ,EAAe3/G,IAG3Bu/G,EAAwB,WAAI,SAAoB7pH,GAC9C,OAAOA,GAGTsG,OAAsB,cAAI,SAAuB25C,GAC/C,MACMp0C,EAAMo0C,EAAIn0C,OAChB,GAAID,GAFc,KAGhB,OAAOvF,OAAOmhB,aAAaqjG,MAAMxkH,OAAQ25C,GAE3C,IAAI3e,EAAQ,EACRypF,EAAQ,GACZ,KAAOzpF,EAAQz1B,GACbk/G,GAASzkH,OAAOmhB,aAAaqjG,MAC3BxkH,OACA25C,EAAI4W,MAAMv1B,EAAOz6B,KAAK0yD,IAAIj4B,EAVZ,KAU+Bz1B,KAE/Cy1B,GAZgB,KAclB,OAAOypF,GAGTzkH,OAAuB,eAAI,SAAwB25C,GACjD,MACMp0C,EAAMo0C,EAAIn0C,OAChB,GAAID,GAFc,KAGhB,OAAOvF,OAAO0kH,cAAcF,MAAMxkH,OAAQ25C,GAE5C,IAAI3e,EAAQ,EACRypF,EAAQ,GACZ,KAAOzpF,EAAQz1B,GACbk/G,GAASzkH,OAAO0kH,cAAcF,MAC5BxkH,OACA25C,EAAI4W,MAAMv1B,EAAOz6B,KAAK0yD,IAAIj4B,EAVZ,KAU+Bz1B,KAE/Cy1B,GAZgB,KAclB,OAAOypF,GAGJzkH,OAAO3F,UAAUsqH,YACpBxrH,OAAOC,eAAe4G,OAAO3F,UAAW,aAAc,CACpDX,MAAO,SAAoBkrH,EAAQC,GACjC,IAAIC,EAAM1sH,KAAK2sH,MAAMH,GAAQ9+G,KAAK++G,GAElC,OADKD,EAAOp/G,SAAQs/G,EAAMD,EAAaC,EAAMD,GACtCC,KAkBb,MAAME,EAAY/kH,MAAM5F,UAAU4qH,KAClChlH,MAAM5F,UAAU4qH,KAAO,SAAcC,GACnC,OAAOF,EAAUpsH,KAAKR,KAAM8sH,GAActB,IAG5CL,EAAuB,UAAI4B,OAAOnsD,UAElCuqD,EAAqB,QAAI,SAAiBr/F,GACxC,MAAsB,iBAARA,GAGhBq/F,EAAwB,WAAI,SAAoBr/F,GAC9C,OAAO,GAGTq/F,EAAyB,YAAI,SAAqBr/F,GAChD,MAAsB,iBAARA,GAAmC,iBAARA,GAG3Cq/F,EAAwB,WAAI,SAAoBr/F,GAC9C,MAAsB,mBAARA,GAGhBq/F,EAAsB,SAAI,SAAkBr/F,GAC1C,MAAsB,iBAARA,GAAoBA,aAAelkB,QAGnDujH,EAAqB,QAAItjH,MAAMq5D,QAC/BiqD,EAAyB,YAAI,SAAqB39E,GAChD,OAAOA,GACc,iBAATA,GACgB,iBAAhBA,EAAKpgC,QACZogC,EAAKpgC,QAAU,GACfjF,KAAKg6D,MAAM30B,EAAKpgC,UAAYogC,EAAKpgC,QAGxC+9G,EAAuB,UAAI,SAAmB39E,GAC5C,YAAuB,IAATA,GAGhB29E,EAAwB,WAAI,SAAoB39E,GAC9C,OAAO,GAGT29E,EAAuB,UAAI,SAAmB39E,GAC5C,OAAOA,GAGT29E,EAAkB,KAAI,SAAca,EAAGC,GACrC,OAAOD,EAAIC,GAGbd,EAAmB,MAAI,SAAea,EAAGC,GACvC,OAAO9jH,KAAK0jH,OAAOG,EAAIC,IAGzBd,EAAoB,OAAIhjH,KAExBpH,OAAO4qH,iBAAiBR,EAAoB,OAAG,CAC7C6B,WAAY,CAAE1rH,MAAO,EAAKsqH,UAAU,GACpCqB,WAAY,CAAE3rH,MAAO,EAAKsqH,UAAU,GACpCsB,QAAS,CACP5rH,MAAO,SAAiB0qH,GACV,OAAZvkH,EAAI,GAAKukH,EAAUmB,QAAS9lH,EAAI,KAAO,GAAO2kH,GAAKA,KAGvDoB,OAAQ,CACN9rH,MAAO,SAAgB0qH,GACrBhsH,KAAKgtH,WAAa7kH,KAAKklH,IAAIrB,GAC3BhsH,KAAKitH,WAAa9kH,KAAKmlH,IAAItB,KAG/BuB,KAAM,CACJjsH,MAAO,SAAc0qH,GACnB,OAAO7jH,KAAKmB,IAAI,EAAG0iH,OAKzBb,EAAuB,UAAI,aAE3BA,EAAmB,MAAI,SAASv/G,EAAS9J,GACnCA,IAAG8J,GAAW/D,MAAM5F,UAAUk2D,MAAM33D,KAAKgtH,UAAW,EAAG,EAAI1rH,IAC/D2rH,QAAQjnG,MAAM,UAAY5a,IAG5B7K,OAAOC,eAAeuH,UAAW,OAAQ,CACvCjH,MAAO,SAAckwB,EAAQk8F,EAAYtgH,GACvC,OAAO,IAAI7E,UAAUipB,EAAQk8F,EAAYtgH,MAI7CrM,OAAOC,eAAe2H,WAAY,OAAQ,CACxCrH,MAAO,SAAckwB,EAAQk8F,EAAYtgH,GACvC,OAAO,IAAIzE,WAAW6oB,EAAQk8F,EAAYtgH,MAI9CrM,OAAOC,eAAe4H,kBAAmB,OAAQ,CAC/CtH,MAAO,SAAckwB,EAAQk8F,EAAYtgH,GACvC,OAAO,IAAIxE,kBAAkB4oB,EAAQk8F,EAAYtgH,MAIrDrM,OAAOC,eAAewH,WAAY,OAAQ,CACxClH,MAAO,SAAckwB,EAAQk8F,EAAYtgH,GACvC,OAAO,IAAI5E,WAAWgpB,EAAQk8F,EAAYtgH,MAI9CrM,OAAOC,eAAe6H,YAAa,OAAQ,CACzCvH,MAAO,SAAckwB,EAAQk8F,EAAYtgH,GACvC,OAAO,IAAIvE,YAAY2oB,EAAQk8F,EAAYtgH,MAI/CrM,OAAOC,eAAeyH,WAAY,OAAQ,CACxCnH,MAAO,SAAckwB,EAAQk8F,EAAYtgH,GACvC,OAAO,IAAI3E,WAAW+oB,EAAQk8F,EAAYtgH,MAI9CrM,OAAOC,eAAe8H,YAAa,OAAQ,CACzCxH,MAAO,SAAckwB,EAAQk8F,EAAYtgH,GACvC,OAAO,IAAItE,YAAY0oB,EAAQk8F,EAAYtgH,MAI/CrM,OAAOC,eAAegI,aAAc,OAAQ,CAC1C1H,MAAO,SAAckwB,EAAQk8F,EAAYtgH,GACvC,OAAO,IAAIpE,aAAawoB,EAAQk8F,EAAYtgH,MAIhDrM,OAAOC,eAAeiI,aAAc,OAAQ,CAC1C3H,MAAO,SAAckwB,EAAQk8F,EAAYtgH,GACvC,OAAO,IAAInE,aAAauoB,EAAQk8F,EAAYtgH,Q,+BC1YhDzN,EAAOD,QAAUO,G,iHCGjB,SAAkBoK,GAEhB,mBAEA,uCAEA,yCAEA,yCAEA,iCAEA,oBAEA,0BAEA,gDAEA,iCAEA,2CAEA,mCAtBF,CAAkB,EAAAA,UAAA,EAAAA,QAAO,KA0BzB,2BAAgCunF,GAC9B,OAAQA,GACN,KAAK,EAAwB,MAAO,iBACpC,KAAK,EAAyB,MAAO,kBACrC,KAAK,EAAyB,MAAO,kBACrC,KAAK,EAAqB,MAAO,cACjC,KAAK,GAAc,MAAO,OAC1B,KAAK,GAAiB,MAAO,UAC7B,KAAK,GAA4B,MAAO,qBACxC,KAAK,IAAoB,MAAO,aAChC,KAAK,IAAyB,MAAO,kBACrC,KAAK,IAAqB,MAAO,cAGnC,OADA3mF,QAAO,GACA,K,8FCxCT,SAAYV,GAEV,eAEA,uBAEA,uBANF,CAAY,EAAAA,SAAA,EAAAA,OAAM,M,idCalB,IAAaC,EAAb,oBAEE,KAAA+I,MAAK,EAEL,KAAAotB,KAAY,IAJDn2B,EAAQ,GADpBmjH,WACYnjH,GAAA,EAAAA,WAQb,SAAkBC,GAEhB,mBAEA,yCAEA,qBAEA,iCAEA,iBAEA,kBAEA,0BAEA,sCAEA,uCAEA,uCAEA,uCAEA,wCAEA,sCAEA,oCAEA,0CAEA,yCAEA,qCAEA,qCAEA,sCAEA,sCAEA,sCAEA,qCAEA,mCAEA,yCAEA,uCAlDF,CAAkB,EAAAA,gBAAA,EAAAA,cAAa,M,iBCxB/B,YAOA,MAAMhD,EAAM,IAAIwB,aAAa,GACvBzB,EAAM,IAAIwB,aAAavB,EAAI+pB,QAC3BzqB,EAAM,IAAI0B,WAAWhB,EAAI+pB,QAE/B8J,EAAOsyF,WAAa,SAAoBtsH,GAEtC,OADAkG,EAAI,GAAKlG,EACFyF,EAAI,IAGbu0B,EAAOuyF,WAAa,SAAoBvsH,GAEtC,OADAyF,EAAI,GAAKzF,EACFkG,EAAI,IAGb8zB,EAAOwyF,WAAa,SAAoBxsH,GAEtC,OADAmG,EAAI,GAAKnG,EACFmoB,QAAQ1iB,EAAI,GAAIA,EAAI,KAG7Bu0B,EAAOyyF,WAAa,SAAoBzsH,GAGtC,OAFAyF,EAAI,GAAK6jB,QAAQtpB,GACjByF,EAAI,GAAK+jB,SAASxpB,GACXmG,EAAI,M,kCC7Bb,YAOA,MAAMumH,EAAO1yF,EAAO0yF,MAAQ,EAAQ,IAEpC1yF,EAAOgH,SAAc0rF,EAAKC,KAC1B3yF,EAAO4yF,QAAcF,EAAKG,IAC1B7yF,EAAO8yF,YAAcJ,EAAKK,SAAS,GAEnC/yF,EAAO7R,QAAU,SAAiB6kG,EAAIC,GACpC,OAAOP,EAAKQ,SAASF,EAAIC,IAG3BjzF,EAAO1Q,QAAU,SAAiBtpB,GAChC,OAAOA,EAAMmtH,KAGfnzF,EAAOxQ,SAAW,SAAkBxpB,GAClC,OAAOA,EAAMotH,MAGfpzF,EAAO1R,QAAU,SAAiBjZ,EAAMC,GACtC,OAAOD,EAAKmiB,IAAIliB,IAGlB0qB,EAAOq3B,QAAU,SAAiBhiD,EAAMC,GACtC,OAAOD,EAAKg+G,IAAI/9G,IAGlB0qB,EAAOpR,QAAU,SAAiBvZ,EAAMC,GACtC,OAAOD,EAAKi+G,IAAIh+G,IAGlB0qB,EAAOuzF,QAAU,SAAiBl+G,EAAMC,GACtC,IAAIk+G,EAAUl+G,EAAM69G,IAChBM,EAAUn+G,EAAM89G,KACpB,GAAIK,GAAW,EAAG,CAChB,GAAIA,EAAU,EACZ,OAAIp+G,EAAKq+G,GAAG1zF,EAAO8yF,aACA,EAAVU,EAAcn+G,EAAOq9G,EAAKG,IAE5Bx9G,EAAKq+G,GAAGhB,EAAKG,KAAOx9G,EAAOq9G,EAAKC,KAEzC,GAAe,GAAXa,EAAc,OAAOd,EAAKG,IAC9B,GAAe,GAAXW,EAAc,OAAOn+G,EACzB,GAAe,GAAXm+G,EAAc,OAAOn+G,EAAKi+G,IAAIj+G,GAGpC,IADA,IAAI6X,EAASwlG,EAAKG,IACXW,EAAUC,GACD,EAAVD,IAAatmG,EAASA,EAAOomG,IAAIj+G,IACrCC,EAAQA,EAAMq+G,KAAK,GACnBt+G,EAAQA,EAAKi+G,IAAIj+G,GACjBm+G,EAAUl+G,EAAM69G,IAChBM,EAAUn+G,EAAM89G,KAElB,OAAOlmG,GAGT8S,EAAO4zF,QAAU,SAAiBv+G,EAAMC,GACtC,OAAOD,EAAKw+G,IAAIv+G,IAGlB0qB,EAAO8zF,UAAY,SAAmBz+G,EAAMC,GAC1C,OAAOD,EAAK0+G,aAAaF,IAAIv+G,EAAMy+G,cAAcC,YAGnDh0F,EAAOi0F,QAAU,SAAiB5+G,EAAMC,GACtC,OAAOD,EAAKlH,IAAImH,IAGlB0qB,EAAOk0F,UAAY,SAAmB7+G,EAAMC,GAC1C,OAAOD,EAAK0+G,aAAa5lH,IAAImH,EAAMy+G,cAAcC,YAGnDh0F,EAAOm0F,QAAU,SAAiB9+G,EAAMC,GACtC,OAAOD,EAAK++G,IAAI9+G,IAGlB0qB,EAAOq0F,OAAS,SAAgBh/G,EAAMC,GACpC,OAAOD,EAAKi/G,GAAGh/G,IAGjB0qB,EAAOu0F,QAAU,SAAiBl/G,EAAMC,GACtC,OAAOD,EAAKm/G,IAAIl/G,IAGlB0qB,EAAOzR,QAAU,SAAiBlZ,EAAMC,GACtC,OAAOD,EAAKo/G,IAAIn/G,IAGlB0qB,EAAO00F,QAAU,SAAiBr/G,EAAMC,GACtC,OAAOD,EAAKs/G,IAAIr/G,IAGlB0qB,EAAO0gE,UAAY,SAAmBrrF,EAAMC,GAC1C,OAAOD,EAAKs+G,KAAKr+G,IAGnB0qB,EAAO40F,QAAU,SAAiB5uH,GAChC,OAAOA,EAAM6uH,OAGf70F,EAAO80F,OAAS,SAAgBz/G,EAAMC,GACpC,OAAOD,EAAKq+G,GAAGp+G,IAGjB0qB,EAAO+0F,OAAS,SAAgB1/G,EAAMC,GACpC,OAAOD,EAAK2/G,GAAG1/G,IAGjB0qB,EAAOsgE,OAAS,SAAgBjrF,EAAMC,GACpC,OAAOD,EAAK4/G,GAAG3/G,IAGjB0qB,EAAOogE,UAAY,SAAmBp6F,EAAOuhG,GAC3C53F,OAAO43F,GAA8C,IAAhCA,EAAaA,EAAY,IAC9C,IAAI5vD,EAAO+6E,EAAKK,QAAQxrB,EAAY,GACpC,OAAOvhG,EAAMwxB,IAAImgB,GAAMy8E,IAAIz8E,EAAKk9E,QAGlC70F,EAAOu2B,UAAY,SAAmBvwD,GACpC,OAAsB,IAAfA,EAAMotH,MAAeptH,EAAMmtH,KAAO,GAAKntH,EAAMmtH,KAAOtrH,GAAGyiB,YACvC,IAAhBtkB,EAAMotH,MAAgBptH,EAAMmtH,KAAOtrH,GAAGs8D,WAAan+D,EAAMmtH,IAAM,GAGxEnzF,EAAOy2B,WAAa,SAAoBzwD,GACtC,OAAsB,IAAfA,EAAMotH,MAAeptH,EAAMmtH,KAAO,GAAKntH,EAAMmtH,KAAOrrH,IAAIwiB,YACxC,IAAhBtkB,EAAMotH,MAAgBptH,EAAMmtH,KAAOrrH,IAAIq8D,WAAan+D,EAAMmtH,IAAM,GAGzEnzF,EAAO22B,WAAa,SAAoB3wD,GACtC,OAAuB,IAAfA,EAAMotH,MAAcptH,EAAMmtH,KAAO,IACjB,IAAhBntH,EAAMotH,MAAeptH,EAAMmtH,IAAM,GAG3CnzF,EAAOw2B,UAAY,SAAmBxwD,GACpC,OAAsB,IAAfA,EAAMotH,MAAeptH,EAAMmtH,MAAQ,GAAMjrH,GAAGoiB,WAGrD0V,EAAO02B,WAAa,SAAoB1wD,GACtC,OAAsB,IAAfA,EAAMotH,MAAeptH,EAAMmtH,MAAQ,GAAMhrH,IAAImiB,WAGtD0V,EAAO42B,WAAa,SAAoB5wD,GACtC,OAAsB,IAAfA,EAAMotH,MAGfpzF,EAAO62B,YAAc,SAAqB7wD,GACxC,OAA2C,IAAnCA,EAAMotH,MAAoB,EAAZptH,EAAMmtH,MAG9B,MAAM+B,EAAaxC,EAAKyC,WAAW3sH,IAAI4sH,kBACjCC,EAAa3C,EAAKyC,WAAW3sH,IAAI8sH,kBAEvCt1F,EAAOu1F,WAAa,SAAoBvvH,GACtC,OAAOA,EAAMwvH,IAAIN,IAAelvH,EAAMyvH,IAAIJ,IAG5C,MAAMK,EAAahD,EAAKyC,WAAW1sH,IAAI2sH,kBACjCO,EAAajD,EAAKyC,WAAW1sH,IAAI6sH,kBAEvCt1F,EAAO41F,WAAa,SAAoB5vH,GACtC,OAAOA,EAAMwvH,IAAIE,IAAe1vH,EAAMyvH,IAAIE,IAG5C31F,EAAOg7E,WAAa,SAAoBh1G,GACtC,OAAOg6B,EAAOnzB,KAAK0jH,OAAOvqH,EAAM6vH,aAGlC71F,EAAOi7E,WAAa,SAAoBj1G,GACtC,OAAOA,EAAM6vH,YAGf71F,EAAOwgE,cAAgB,SAAuBx6F,EAAO8vH,GACnD,OAAOA,EAAW9vH,EAAM+tH,aAAa3iH,WAAapL,EAAMoL,c,+BClL1D/M,EAAOD,QAAUsuH,EAKjB,IAAIqD,EAAO,KAEX,IACEA,EAAO,IAAIC,YAAYC,SAAS,IAAID,YAAYtlF,OAAO,IAAIrjC,WAAW,CACpE,EAAG,GAAI,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IA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AAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBjuH,EAAWksH,GACrC,GAAIlsH,EAAOksH,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIkC,EACAC,EAHA1L,EAAK,EACLC,EAAKsJ,EAAIzqH,OAINkhH,EAAK,EAAIC,GAAI,CAIlB,GAHAwL,EAAMzL,GAAOC,EAAKD,GAAO,IAEzB0L,EAASnC,EADTkC,GAAc,EAANA,KAEMpuH,GAAQA,GAAQksH,EAAIkC,EAAM,GACtC,OAAO,EAELpuH,EAAOquH,EACTzL,EAAKwL,EAELzL,EAAKyL,EAAM,EAGf,OAAO,EAkBT,kBAAuBxsH,EAAcypC,GACnC,KAAOA,GAAS,GACdzpC,EAAGE,KALU,YAMbupC,GAAS,EAEPA,GAAS,IACXzpC,EAAGE,KAVU,QAWbupC,GAAS,GAEPA,GACFzpC,EAAGE,KAfU,Q,kGC7XjB,aAkFA,OAIA,OAKA,OAKA,MAAawsH,EAAb,cASU,KAAA1sH,GAAe,GACf,KAAAq9G,YAAmB,EAP3B,aAAat/D,GACX,IAAIonD,EAAU,IAAIunB,EAElB,OADAvnB,EAAQwnB,UAAU5uE,GACXonD,EAAQqmB,SAMjB,UAAUztE,GACR,OAAQA,EAAK38C,MACX,KAAK,EAAAL,SAAS2N,OACZjc,KAAKm6H,YAAoB7uE,GACzB,MAKF,KAAK,EAAAh9C,SAAS2J,UACZjY,KAAKo6H,mBAAkC9uE,GACvC,MAEF,KAAK,EAAAh9C,SAASiK,aACZvY,KAAKq6H,sBAAwC/uE,GAC7C,MAEF,KAAK,EAAAh9C,SAASqK,cACZ3Y,KAAKs6H,mBAAsChvE,GAC3C,MAKF,KAAK,EAAAh9C,SAASoJ,MACd,KAAK,EAAApJ,SAASkJ,KACd,KAAK,EAAAlJ,SAASuJ,MACd,KAAK,EAAAvJ,SAASqN,KACd,KAAK,EAAArN,SAASmJ,KACd,KAAK,EAAAnJ,SAAS4M,YACd,KAAK,EAAA5M,SAAS4K,WACZlZ,KAAKu6H,0BAAgDjvE,GACrD,MAEF,KAAK,EAAAh9C,SAASqM,UACZ3a,KAAKw6H,yBAA8ClvE,GACnD,MAEF,KAAK,EAAAh9C,SAASsM,OACZ5a,KAAKy6H,sBAAwCnvE,GAC7C,MAEF,KAAK,EAAAh9C,SAASqJ,KACZ3X,KAAK06H,oBAAoCpvE,GACzC,MAEF,KAAK,EAAAh9C,SAAS0M,MACZhb,KAAK26H,qBAAsCrvE,GAC3C,MAEF,KAAK,EAAAh9C,SAAS2M,MACZjb,KAAK46H,qBAAsCtvE,GAC3C,MAEF,KAAK,EAAAh9C,SAAS6M,cACZnb,KAAK66H,6BAAsDvvE,GAC3D,MAEF,KAAK,EAAAh9C,SAAS8M,SACZpb,KAAK86H,wBAA4CxvE,GACjD,MAEF,KAAK,EAAAh9C,SAAS+M,WACZrb,KAAK+6H,0BAAgDzvE,GACrD,MAEF,KAAK,EAAAh9C,SAAS6I,QACZnX,KAAKg7H,uBAA0C1vE,GAC/C,MAEF,KAAK,EAAAh9C,SAASgN,IACZtb,KAAKi7H,mBAAkC3vE,GACvC,MAEF,KAAK,EAAAh9C,SAASkN,cACZxb,KAAKk7H,6BAAsD5vE,GAC3D,MAEF,KAAK,EAAAh9C,SAASsJ,eACZ5X,KAAKm7H,8BAAwD7vE,GAC7D,MAEF,KAAK,EAAAh9C,SAASoN,QACZ1b,KAAKo7H,uBAA0C9vE,GAC/C,MAEF,KAAK,EAAAh9C,SAASuN,aACZ7b,KAAKq7H,4BAAoD/vE,GACzD,MAEF,KAAK,EAAAh9C,SAASwN,YACZ9b,KAAKs7H,2BAAkDhwE,GACvD,MAKF,KAAK,EAAAh9C,SAAS4O,MACZld,KAAKu7H,oBAAoCjwE,GACzC,MAEF,KAAK,EAAAh9C,SAAS6O,MACZnd,KAAKw7H,oBAAoClwE,GACzC,MAEF,KAAK,EAAAh9C,SAASgP,SACZtd,KAAKy7H,uBAA0CnwE,GAC/C,MAEF,KAAK,EAAAh9C,SAASiP,GACZvd,KAAK07H,iBAA8BpwE,GACnC,MAEF,KAAK,EAAAh9C,SAASpL,MACZlD,KAAK27H,oBAAoCrwE,GACzC,MAEF,KAAK,EAAAh9C,SAASsP,OACZ5d,KAAK47H,qBAAsCtwE,GAC3C,MAEF,KAAK,EAAAh9C,SAAS0P,cACZhe,KAAK67H,4BAAoDvwE,GACzD,MAEF,KAAK,EAAAh9C,SAASoP,aACZ1d,KAAK87H,2BAAkDxwE,GACvD,MAEF,KAAK,EAAAh9C,SAAS2P,WACZje,KAAK+7H,yBAA8CzwE,GACnD,MAEF,KAAK,EAAAh9C,SAAS8P,IACZpe,KAAKg8H,kBAAgC1wE,GACrC,MAEF,KAAK,EAAAh9C,SAAS+P,MACZre,KAAKi8H,oBAAoC3wE,GACzC,MAEF,KAAK,EAAAh9C,SAASkQ,GACZxe,KAAKk8H,iBAA8B5wE,GACnC,MAEF,KAAK,EAAAh9C,SAASoQ,OACZ1e,KAAKm8H,qBAAsC7wE,GAC3C,MAEF,KAAK,EAAAh9C,SAASwQ,OACZ9e,KAAKo8H,qBAAsC9wE,GAC3C,MAEF,KAAK,EAAAh9C,SAAS0Q,OACZhf,KAAKq8H,qBAAsC/wE,GAC3C,MAEF,KAAK,EAAAh9C,SAAS2Q,MACZjf,KAAKs8H,oBAAoChxE,GACzC,MAEF,KAAK,EAAAh9C,SAAS4Q,IACZlf,KAAKu8H,kBAAgCjxE,GACrC,MAEF,KAAK,EAAAh9C,SAAS+Q,SACZrf,KAAKw8H,uBAA0ClxE,GAC/C,MAEF,KAAK,EAAAh9C,SAASiR,MACZvf,KAAKy8H,oBAAoCnxE,GACzC,MAKF,KAAK,EAAAh9C,SAAS8O,iBACZpd,KAAK08H,sBAAwCpxE,GAC7C,MAEF,KAAK,EAAAh9C,SAASkP,gBACZxd,KAAK28H,qBAAsCrxE,GAC3C,MAEF,KAAK,EAAAh9C,SAASmP,qBACZzd,KAAK48H,0BAAgDtxE,GACrD,MAEF,KAAK,EAAAh9C,SAAS6P,iBACZne,KAAK68H,sBAAwCvxE,GAC7C,MAEF,KAAK,EAAAh9C,SAASiQ,oBACZve,KAAK88H,yBAA8CxxE,GACnD,MAEF,KAAK,EAAAh9C,SAASmQ,kBACZze,KAAK+8H,uBAA0CzxE,GAC/C,MAEF,KAAK,EAAAh9C,SAASqQ,qBACZ3e,KAAKg9H,0BAAgD1xE,GACrD,MAEF,KAAK,EAAAh9C,SAASsQ,kBACZ5e,KAAKi9H,uBAA0C3xE,GAC/C,MAEF,KAAK,EAAAh9C,SAASuQ,qBACZ7e,KAAKk9H,0BAAgD5xE,GACrD,MAEF,KAAK,EAAAh9C,SAAS6Q,gBACZnf,KAAKm9H,qBAAsC7xE,GAC3C,MAEF,KAAK,EAAAh9C,SAAS8Q,oBACZpf,KAAKo9H,yBAA8C9xE,GACnD,MAKF,KAAK,EAAAh9C,SAAS8L,UACZpa,KAAKq9H,mBAAkC/xE,GACvC,MAEF,KAAK,EAAAh9C,SAASqP,aACZ3d,KAAKs9H,kBAAgChyE,GACrC,MAEF,KAAK,EAAAh9C,SAASuK,UACZ7Y,KAAKu9H,mBAAkCjyE,GACvC,MAEF,KAAK,EAAAh9C,SAASyQ,WACZ/e,KAAKw9H,gBAA4BlyE,GACjC,MAEF,KAAK,EAAAh9C,SAAS0O,eACZhd,KAAKy9H,oBAAwCnyE,GAC7C,MAEF,QAASrgD,QAAO,IAIpB,YAAYwB,GACV,IAAIyG,EAAazG,EAAOyG,WACxB,IAAK,IAAI7S,EAAI,EAAG8N,EAAI+E,EAAW9F,OAAQ/M,EAAI8N,IAAK9N,EAC9CL,KAAK09H,sBAAsBxqH,EAAW7S,IAM1C,cAAcirD,GACZ,OAAQA,EAAK38C,MACX,KAAK,EAAAL,SAAS2J,UACZjY,KAAKo6H,mBAAkC9uE,GACvC,MAEF,KAAK,EAAAh9C,SAASiK,aACZvY,KAAKq6H,sBAAwC/uE,GAC7C,MAEF,QAASrgD,QAAO,IAIpB,cAAcqgD,GACZtrD,KAAKu6H,0BAA0BjvE,EAAKhzC,YAGpC,IAFA,IAAI/K,EAAKvN,KAAKuN,GACV0yB,EAAUqrB,EAAKnzC,KACZ8nB,GACL1yB,EAAGE,KAAK,KACRzN,KAAKu6H,0BAA0Bt6F,EAAQ3nB,YACvC2nB,EAAUA,EAAQ9nB,KAItB,mBAAmBmzC,GACjBtrD,KAAK29H,cAAcryE,EAAK1qD,MACxB,IAAIkO,EAAgBw8C,EAAKx8C,cACzB,GAAIA,EAAe,CACjB,IAAI+L,EAAmB/L,EAAc1B,OACjCG,EAAKvN,KAAKuN,GACd,GAAIsN,EAAkB,CACpBtN,EAAGE,KAAK,KACRzN,KAAK49H,cAAc9uH,EAAc,IACjC,IAAK,IAAIzO,EAAI,EAAGA,EAAIwa,IAAoBxa,EACtCkN,EAAGE,KAAK,MACRzN,KAAK49H,cAAc9uH,EAAczO,IAEnCkN,EAAGE,KAAK,KAEN69C,EAAKv8C,YAAYxB,EAAGE,KAAK,YAIjC,sBAAsB69C,GACpB,IAAIv8C,EAAau8C,EAAKv8C,WAClBxB,EAAKvN,KAAKuN,GACdA,EAAGE,KAAKsB,EAAa,KAAO,KAC5B,IAAII,EAAmBm8C,EAAKn8C,iBACxBA,IACF5B,EAAGE,KAAK,UACRzN,KAAK49H,cAAczuH,IAErB,IAAIF,EAAaq8C,EAAKr8C,WAClBg7C,EAAgBh7C,EAAW7B,OAC/B,GAAI68C,EAAe,CACb96C,GAAkB5B,EAAGE,KAAK,MAC9BzN,KAAKu9H,mBAAmBtuH,EAAW,IACnC,IAAK,IAAI5O,EAAI,EAAGA,EAAI4pD,IAAiB5pD,EACnCkN,EAAGE,KAAK,MACRzN,KAAKu9H,mBAAmBtuH,EAAW5O,IAGvC,IAAI6O,EAAao8C,EAAKp8C,WAClBA,GACF3B,EAAGE,KAAK,SACRzN,KAAK49H,cAAc1uH,IAEnB3B,EAAGE,KAAK,aAENsB,GAAYxB,EAAGE,KAAK,YAG1B,mBAAmB69C,GACjBtrD,KAAKu6H,0BAA0BjvE,EAAK1qD,MACpC,IAAI0O,EAAcg8C,EAAKh8C,YACnBA,IACFtP,KAAKuN,GAAGE,KAAK,aACbzN,KAAK49H,cAActuH,IAErB,IAAIC,EAAc+7C,EAAK/7C,YACnBA,IACFvP,KAAKuN,GAAGE,KAAK,KACbzN,KAAK49H,cAAcruH,IAMvB,0BAA0B+7C,GACpBA,EAAKp7C,SAAUlQ,KAAK69H,mBAAmBvyE,EAAKp+C,MAC3ClN,KAAKuN,GAAGE,KAAK69C,EAAKp+C,MAGzB,4BAA4Bo+C,GAC1B,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,KACR,IAAIquB,EAAWwvB,EAAKl7C,mBAChBijF,EAAcv3D,EAAS1uB,OAC3B,GAAIimF,EAAa,CACf,IAAI99D,EAAUuG,EAAS,GACnBvG,GAASv1B,KAAKk6H,UAAU3kG,GAC5B,IAAK,IAAIl1B,EAAI,EAAGA,EAAIgzF,IAAehzF,EACjCk1B,EAAUuG,EAASz7B,GACnBkN,EAAGE,KAAK,MACJ8nB,GAASv1B,KAAKk6H,UAAU3kG,GAGhChoB,EAAGE,KAAK,KAGV,6BAA6B69C,GAC3B,IAAI/9C,EAAKvN,KAAKuN,GACVwE,EAAQu5C,EAAKv5C,MACbC,EAASs5C,EAAKt5C,OACdqhF,EAActhF,EAAM3E,OAExB,GADAnC,OAAOooF,GAAerhF,EAAO5E,QACzBimF,EAAa,CACf9lF,EAAGE,KAAK,OACR,EAAAq9G,OAAOv9G,IAAMvN,KAAK4qH,aAClB5qH,KAAKk6H,UAAUnoH,EAAM,IACrBxE,EAAGE,KAAK,MACRzN,KAAKk6H,UAAUloH,EAAO,IACtB,IAAK,IAAI3R,EAAI,EAAGA,EAAIgzF,IAAehzF,EAAG,CACpCkN,EAAGE,KAAK,OACR,EAAAq9G,OAAOv9G,EAAIvN,KAAK4qH,aAChB,IAAIhqH,EAAOmR,EAAM1R,GACbiB,EAAQ0Q,EAAO3R,GACfO,IAASU,EACXtB,KAAKk6H,UAAUt5H,IAEfZ,KAAKk6H,UAAUt5H,GACf2M,EAAGE,KAAK,MACRzN,KAAKk6H,UAAU54H,IAGnBiM,EAAGE,KAAK,MACR,EAAAq9G,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,UAERF,EAAGE,KAAK,MAIZ,yBAAyB69C,GACvB,IAAI/9C,EAAKvN,KAAKuN,GACd,OAAQ+9C,EAAKh7C,eACX,KAAK,EAAAoK,cAAc03C,OACjB7kD,EAAGE,KAAK,KACRzN,KAAK49H,cAAc3yH,OAAOqgD,EAAK96C,SAC/BjD,EAAGE,KAAK,KACRzN,KAAKk6H,UAAU5uE,EAAK/6C,YACpB,MAEF,KAAK,EAAAmK,cAAcqF,GACjB/f,KAAKk6H,UAAU5uE,EAAK/6C,YACpBhD,EAAGE,KAAK,QACRzN,KAAK49H,cAAc3yH,OAAOqgD,EAAK96C,SAC/B,MAEF,KAAK,EAAAkK,cAAc43C,QACjBtyD,KAAKk6H,UAAU5uE,EAAK/6C,YACpBhD,EAAGE,KAAK,KACR,MAEF,KAAK,EAAAiN,cAAc0F,MACjBpgB,KAAKk6H,UAAU5uE,EAAK/6C,YACpBhD,EAAGE,KAAK,aACR,MAEF,QAASxC,QAAO,IAIpB,sBAAsBqgD,GACpB,IAAI/9C,EAAKvN,KAAKuN,GACdvN,KAAKk6H,UAAU5uE,EAAK36C,MACpBpD,EAAGE,KAAK,KACRF,EAAGE,KAAK,EAAAglD,sBAAsBnH,EAAK56C,WACnCnD,EAAGE,KAAK,KACRzN,KAAKk6H,UAAU5uE,EAAK16C,OAGtB,oBAAoB06C,GAClBtrD,KAAKk6H,UAAU5uE,EAAK/6C,YACpBvQ,KAAK89H,eAAexyE,EAAKx8C,cAAew8C,EAAKz7C,MAGvC,eAAef,EAAkCe,GACvD,IAAItC,EAAKvN,KAAKuN,GACd,GAAIuB,EAAe,CACjB,IAAI+L,EAAmB/L,EAAc1B,OACrC,GAAIyN,EAAkB,CACpBtN,EAAGE,KAAK,KACRzN,KAAK49H,cAAc9uH,EAAc,IACjC,IAAK,IAAIzO,EAAI,EAAGA,EAAIwa,IAAoBxa,EACtCkN,EAAGE,KAAK,MACRzN,KAAK49H,cAAc9uH,EAAczO,IAEnCkN,EAAGE,KAAK,YAGVF,EAAGE,KAAK,KAEV,IAAIgwB,EAAU5tB,EAAKzC,OACnB,GAAIqwB,EAAS,CACXz9B,KAAKk6H,UAAUrqH,EAAK,IACpB,IAAK,IAAIxP,EAAI,EAAGA,EAAIo9B,IAAWp9B,EAC7BkN,EAAGE,KAAK,MACRzN,KAAKk6H,UAAUrqH,EAAKxP,IAGxBkN,EAAGE,KAAK,KAGV,qBAAqB69C,GACnB,IAAIv6C,EAAcu6C,EAAKv6C,YACvB/Q,KAAK08H,sBAAsB3rH,GAG7B,qBAAqBu6C,GACnB,IAAIr6C,EAAcq6C,EAAKr6C,YACnB8jG,EAAiB9pG,OAAOgG,EAAY7D,QACxCpN,KAAKk6H,UAAUjpH,EAAY,IAC3B,IAAI1D,EAAKvN,KAAKuN,GACd,IAAK,IAAIlN,EAAI,EAAGA,EAAI00G,IAAkB10G,EACpCkN,EAAGE,KAAK,KACRzN,KAAKk6H,UAAUjpH,EAAY5Q,IAI/B,6BAA6BirD,GAC3B,IAAI/9C,EAAKvN,KAAKuN,GACdvN,KAAKk6H,UAAU5uE,EAAK/6C,YACpBhD,EAAGE,KAAK,KACRzN,KAAKk6H,UAAU5uE,EAAKl6C,mBACpB7D,EAAGE,KAAK,KAGV,wBAAwB69C,GACtB,IAAIv6C,EAAcu6C,EAAKv6C,YAClBA,EAAY8E,UAOf5K,OAAuC,GAAhC8F,EAAYnQ,KAAKsM,KAAKE,QANzB2D,EAAYnQ,KAAKsM,KAAKE,OACxBpN,KAAKuN,GAAGE,KAAK,aAEbzN,KAAKuN,GAAGE,KAAK,YAKjBzN,KAAK+9H,oBAAoBhtH,GAG3B,uBAAuBu6C,GACrB,OAAQA,EAAKp0C,aACX,KAAK,EAAA1I,YAAY6I,MACfrX,KAAKg+H,4BAAoD1yE,GACzD,MAEF,KAAK,EAAA98C,YAAY8I,QACftX,KAAKi+H,8BAAwD3yE,GAC7D,MAEF,KAAK,EAAA98C,YAAY+I,OACfvX,KAAKk+H,6BAAsD5yE,GAC3D,MAEF,KAAK,EAAA98C,YAAYiN,OACfzb,KAAKm+H,6BAAsD7yE,GAC3D,MAEF,KAAK,EAAA98C,YAAYiM,MACfza,KAAKo+H,4BAAoD9yE,GACzD,MAEF,KAAK,EAAA98C,YAAY+M,OACfvb,KAAKq+H,6BAAsD/yE,GAC3D,MAEF,QACErgD,QAAO,IAMb,4BAA4BqgD,GAC1BtrD,KAAKuN,GAAGE,KAAK69C,EAAKhqD,MAAMoL,YAG1B,0BAA0B4+C,GACxBtrD,KAAKk6H,UAAU5uE,EAAK/6C,YACpBvQ,KAAKuN,GAAGE,KAAK,gBACbzN,KAAK49H,cAActyE,EAAK75C,QAG1B,8BAA8B65C,GAC5BtrD,KAAKuN,GAAGE,KAAKquF,cAAcxwC,EAAKhqD,QAGlC,mBAAmBu4C,EAAaykF,GAAqB,GACnD,IAAI/wH,EAAKvN,KAAKuN,GACVsP,EAAM,EACN0L,EAAQ+1G,EAAe,IAAM,IACjC/wH,EAAGE,KAAK8a,GACR,IAAIloB,EAAI,EACR,IAAK,IAAI8N,EAAI0rC,EAAIzsC,OAAQ/M,EAAI8N,GAC3B,OAAQ0rC,EAAIvsC,WAAWjN,IACrB,KAAK,EACCA,EAAIwc,GAAKtP,EAAGE,KAAKosC,EAAIrsC,UAAUqP,EAAKA,EAAMxc,EAAI,IAClDkN,EAAGE,KAAK,OACRoP,IAAQxc,EACR,MAEF,KAAK,EACCA,EAAIwc,GAAKtP,EAAGE,KAAKosC,EAAIrsC,UAAUqP,EAAKxc,IACxCwc,IAAQxc,EACRkN,EAAGE,KAAK,OACR,MAEF,KAAK,EACCpN,EAAIwc,GAAKtP,EAAGE,KAAKosC,EAAIrsC,UAAUqP,EAAKxc,IACxCwc,IAAQxc,EACRkN,EAAGE,KAAK,OACR,MAEF,KAAK,GACCpN,EAAIwc,GAAKtP,EAAGE,KAAKosC,EAAIrsC,UAAUqP,EAAKxc,IACxCwc,IAAQxc,EACRkN,EAAGE,KAAK,OACR,MAEF,KAAK,GACCpN,EAAIwc,GAAKtP,EAAGE,KAAKosC,EAAIrsC,UAAUqP,EAAKxc,IACxCwc,IAAQxc,EACRkN,EAAGE,KAAK,OACR,MAEF,KAAK,GACCpN,EAAIwc,GAAKtP,EAAGE,KAAKosC,EAAIrsC,UAAUqP,EAAKxc,IACxCwc,IAAQxc,EACRkN,EAAGE,KAAK,OACR,MAEF,KAAK,GACCpN,EAAIwc,GAAKtP,EAAGE,KAAKosC,EAAIrsC,UAAUqP,EAAKxc,IACxCkN,EAAGE,KAAK,OACRoP,IAAQxc,EACR,MAEF,KAAK,GACEi+H,IAKDj+H,GAJEA,EAAIwc,GAAKtP,EAAGE,KAAKosC,EAAIrsC,UAAUqP,EAAKxc,IACxCkN,EAAGE,KAAK,OACRoP,IAAQxc,GAIV,MAEF,KAAK,GACCi+H,GACEj+H,EAAIwc,GAAKtP,EAAGE,KAAKosC,EAAIrsC,UAAUqP,EAAKxc,IACxCkN,EAAGE,KAAK,OACRoP,IAAQxc,KAENA,EAEJ,MAEF,KAAK,GACCA,EAAIwc,GAAKtP,EAAGE,KAAKosC,EAAIrsC,UAAUqP,EAAKxc,IACxCkN,EAAGE,KAAK,QACRoP,IAAQxc,EACR,MAEF,UACIA,EAKJA,EAAIwc,GAAKtP,EAAGE,KAAKosC,EAAIrsC,UAAUqP,EAAKxc,IACxCkN,EAAGE,KAAK8a,GAGV,6BAA6B+iC,GAC3BtrD,KAAK69H,mBAAmBvyE,EAAKhqD,OAG/B,6BAA6BgqD,GAC3B,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,KACRF,EAAGE,KAAK69C,EAAKl5C,SACb7E,EAAGE,KAAK,KACRF,EAAGE,KAAK69C,EAAKj5C,cAGf,mBAAmBi5C,GACjBtrD,KAAKuN,GAAGE,KAAK,QACbzN,KAAK29H,cAAcryE,EAAK15C,UACxB5R,KAAK89H,eAAexyE,EAAKx8C,cAAew8C,EAAKz7C,MAG/C,6BAA6By7C,GAC3B,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,KACRzN,KAAKk6H,UAAU5uE,EAAK/6C,YACpBhD,EAAGE,KAAK,KAGV,8BAA8B69C,GAC5BtrD,KAAKk6H,UAAU5uE,EAAK/6C,YACpBvQ,KAAKuN,GAAGE,KAAK,KACbzN,KAAKu6H,0BAA0BjvE,EAAKtpD,UAGtC,uBAAuBspD,GACrB,IAAI/9C,EAAKvN,KAAKuN,GACdvN,KAAKk6H,UAAU5uE,EAAK/4C,WACpBhF,EAAGE,KAAK,OACRzN,KAAKk6H,UAAU5uE,EAAK94C,QACpBjF,EAAGE,KAAK,OACRzN,KAAKk6H,UAAU5uE,EAAK74C,QAGtB,qBAAqB64C,GACnB,OAAQA,EAAK38C,MACX,KAAK,EAAAL,SAASuN,aACZ7b,KAAKq7H,4BAAoD/vE,GACzD,MAEF,KAAK,EAAAh9C,SAASwN,YACZ9b,KAAKs7H,2BAAkDhwE,GACvD,MAEF,QAASrgD,QAAO,IAIpB,4BAA4BqgD,GAC1BtrD,KAAKk6H,UAAU5uE,EAAKv4C,SACpB/S,KAAKuN,GAAGE,KAAK,EAAAglD,sBAAsBnH,EAAK56C,WAG1C,2BAA2B46C,GACzBtrD,KAAKuN,GAAGE,KAAK,EAAAglD,sBAAsBnH,EAAK56C,WACxC1Q,KAAKk6H,UAAU5uE,EAAKv4C,SAKtB,sBAAsBu4C,GACpBtrD,KAAKk6H,UAAU5uE,GACf,IAAI/9C,EAAKvN,KAAKuN,GACd,GACGA,EAAGH,QACJk+C,EAAK38C,MAAQ,EAAAL,SAAS+Q,UACtBisC,EAAK38C,MAAQ,EAAAL,SAAS2P,WAGjB,CACL,IAAI8hD,EAAOxyD,EAAGA,EAAGH,OAAS,GACtBmxH,EAAcx+D,EAAK3yD,OAAS,EAC5BmxH,GAAe,IACe,KAAhCx+D,EAAKzyD,WAAWixH,IACgB,IAAhCx+D,EAAKzyD,WAAWixH,IAEhBhxH,EAAGE,KAAK,MAERF,EAAGE,KAAK,YAVVF,EAAGE,KAAK,OAeZ,oBAAoB69C,GAClB,IAAI/9C,EAAKvN,KAAKuN,GACV2F,EAAao4C,EAAKp4C,WAClBoyF,EAAgBpyF,EAAW9F,OAC/B,GAAIk4F,EAAe,CACjB/3F,EAAGE,KAAK,OACR,IAAIm9G,IAAgB5qH,KAAK4qH,YACzB,IAAK,IAAIvqH,EAAI,EAAGA,EAAIilG,IAAiBjlG,EACnC,EAAAyqH,OAAOv9G,EAAIq9G,GACX5qH,KAAK09H,sBAAsBxqH,EAAW7S,IAExC,EAAAyqH,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,UAERF,EAAGE,KAAK,MAIZ,oBAAoB69C,GAClB,IAAIl4C,EAAQk4C,EAAKl4C,MACbA,GACFpT,KAAKuN,GAAGE,KAAK,UACbzN,KAAKu6H,0BAA0BnnH,IAE/BpT,KAAKuN,GAAGE,KAAK,SAIjB,uBAAuB69C,GACrB,IAAIl4C,EAAQk4C,EAAKl4C,MACbA,GACFpT,KAAKuN,GAAGE,KAAK,aACbzN,KAAKu6H,0BAA0BnnH,IAE/BpT,KAAKuN,GAAGE,KAAK,YAIjB,sBAAsB69C,EAAwBkzE,GAAkB,GAC9D,IAAIlrH,EAAag4C,EAAKh4C,WACtB,GAAIA,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAC9CL,KAAKq9H,mBAAmB/pH,EAAWjT,IAGvC,IAAIkN,EAAKvN,KAAKuN,GACVixH,EACFjxH,EAAGE,KAAK,mBAERzN,KAAKy+H,2BAA2BnzE,GAE9BA,EAAKjwB,GAAG,EAAAh5B,YAAYyd,WAAWvS,EAAGE,KAAK,aACvC69C,EAAK1qD,KAAKsM,KAAKE,QACjBG,EAAGE,KAAK,UACRzN,KAAKu6H,0BAA0BjvE,EAAK1qD,OAEpC2M,EAAGE,KAAK,SAEV,IAAI+F,EAAiB83C,EAAK93C,eAC1B,GAAsB,MAAlBA,GAA0BA,EAAepG,OAAS,EAAG,CACvDG,EAAGE,KAAK,KACRzN,KAAKs6H,mBAAmB9mH,EAAe,IACvC,IAAK,IAAInT,EAAI,EAAG8N,EAAIqF,EAAepG,OAAQ/M,EAAI8N,IAAK9N,EAClDkN,EAAGE,KAAK,MACRzN,KAAKs6H,mBAAmB9mH,EAAenT,IAEzCkN,EAAGE,KAAK,KAEV,IAAI6B,EAAcg8C,EAAKh8C,YACnBA,IACF/B,EAAGE,KAAK,aACRzN,KAAK49H,cAActuH,IAErB,IAAImE,EAAkB63C,EAAK73C,gBAC3B,GAAIA,EAAiB,CACnB,IAAIgpB,EAAqBhpB,EAAgBrG,OACzC,GAAIqvB,EAAoB,CACtBlvB,EAAGE,KAAK,gBACRzN,KAAK49H,cAAcnqH,EAAgB,IACnC,IAAK,IAAIpT,EAAI,EAAGA,EAAIo8B,IAAsBp8B,EACxCkN,EAAGE,KAAK,MACRzN,KAAK49H,cAAcnqH,EAAgBpT,KAIzC,IAAIgd,EAAiBiuC,EAAKjuC,eACtB3J,EAAU43C,EAAK53C,QACfgrH,EAAahrH,EAAQtG,OACzB,GAAuB,OAAnBiQ,GAA2BqhH,EAAY,CACzCnxH,EAAGE,KAAK,QACR,IAAIm9G,IAAgB5qH,KAAK4qH,YACrBvtG,IACF,EAAAytG,OAAOv9G,EAAIq9G,GACX5qH,KAAK09H,sBAAsBrgH,IAE7B,IAAK,IAAIhd,EAAI,EAAG8N,EAAIuF,EAAQtG,OAAQ/M,EAAI8N,IAAK9N,EAAG,CAC9C,IAAIs6B,EAASjnB,EAAQrT,IACjBs6B,EAAOhsB,MAAQ,EAAAL,SAAS6P,kBAAuCwc,EAAQzc,eAAiB,KAC1F,EAAA4sG,OAAOv9G,EAAIq9G,GACX5qH,KAAK09H,sBAAsB/iG,IAG/B,EAAAmwF,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,UAERF,EAAGE,KAAK,OAIZ,iBAAiB69C,GACf,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,OACRzN,KAAKk6H,UAAU5uE,EAAKz3C,WAChBy3C,EAAKz3C,UAAUlF,MAAQ,EAAAL,SAAS4O,MAClC3P,EAAGE,KAAK,aAERF,EAAGE,KAAK,OACR,EAAAq9G,OAAOv9G,EAAIvN,KAAK4qH,aAChBr9G,EAAGE,KAAK,YAEVzN,KAAKk6H,UAAU5uE,EAAK/4C,WACpBhF,EAAGE,KAAK,KAGV,oBAAoB69C,IAIpB,qBAAqBA,EAAuBkzE,GAAkB,GAC5D,IAAIjxH,EAAKvN,KAAKuN,GACVixH,EACFjxH,EAAGE,KAAK,mBAERzN,KAAKy+H,2BAA2BnzE,GAE9BA,EAAKjwB,GAAG,EAAAh5B,YAAY+d,QAAQ7S,EAAGE,KAAK,UACxCF,EAAGE,KAAK,SACRzN,KAAKu6H,0BAA0BjvE,EAAK1qD,MACpC,IACIkhD,EADSwJ,EAAKt5C,OACK5E,OACvB,GAAI00C,EAAW,CACbv0C,EAAGE,KAAK,QACR,IAAIm9G,IAAgB5qH,KAAK4qH,YACzB,EAAAE,OAAOv9G,EAAIq9G,GACX5qH,KAAK48H,0BAA0BtxE,EAAKt5C,OAAO,IAC3C,IAAK,IAAI3R,EAAI,EAAGA,EAAIyhD,IAAazhD,EAC/BkN,EAAGE,KAAK,OACR,EAAAq9G,OAAOv9G,EAAIq9G,GACX5qH,KAAK48H,0BAA0BtxE,EAAKt5C,OAAO3R,IAE7CkN,EAAGE,KAAK,MACR,EAAAq9G,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,UAERF,EAAGE,KAAK,OAIZ,0BAA0B69C,GACxBtrD,KAAKu6H,0BAA0BjvE,EAAK1qD,MACpC,IAAI+O,EAAc27C,EAAK37C,YACnBA,IACF3P,KAAKuN,GAAGE,KAAK,OACbzN,KAAKk6H,UAAUvqH,IAInB,2BAA2B27C,GACzB,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,kBACRzN,KAAKu6H,0BAA0BjvE,EAAKh3C,cACpC/G,EAAGE,KAAK,OACRzN,KAAKu6H,0BAA0BjvE,EAAK1qD,MAGtC,kBAAkB0qD,GAChBtrD,KAAKu6H,0BAA0BjvE,EAAK92C,WAChC82C,EAAK72C,aAAavH,MAAQo+C,EAAK92C,UAAUtH,OAC3ClN,KAAKuN,GAAGE,KAAK,QACbzN,KAAKu6H,0BAA0BjvE,EAAK72C,eAIxC,qBAAqB62C,GACnB,IAAI/9C,EAAKvN,KAAKuN,GACV+9C,EAAKn3C,WACP5G,EAAGE,KAAK,YAEV,IAAIiG,EAAU43C,EAAK53C,QACnB,GAAe,MAAXA,GAAmBA,EAAQtG,OAAS,EAAG,CACzC,IAAIsxH,EAAahrH,EAAQtG,OACzBG,EAAGE,KAAK,cACR,IAAIm9G,IAAgB5qH,KAAK4qH,YACzB,EAAAE,OAAOv9G,EAAIq9G,GACX5qH,KAAKs9H,kBAAkB5pH,EAAQ,IAC/B,IAAK,IAAIrT,EAAI,EAAGA,EAAIq+H,IAAcr+H,EAChCkN,EAAGE,KAAK,OACR,EAAAq9G,OAAOv9G,EAAIq9G,GACX5qH,KAAKs9H,kBAAkB5pH,EAAQrT,MAE/BL,KAAK4qH,YACPr9G,EAAGE,KAAK,YAERF,EAAGE,KAAK,aAEV,IAAIyG,EAAOo3C,EAAKp3C,KACZA,IACF3G,EAAGE,KAAK,UACRzN,KAAKk+H,6BAA6BhqH,IAEpC3G,EAAGE,KAAK,KAGV,4BAA4B69C,GAC1B,IAAIv6C,EAAcu6C,EAAKv6C,YACvB,OAAQA,EAAYpC,MAClB,KAAK,EAAAL,SAASkP,gBACZxd,KAAK28H,qBAAsC5rH,GAAa,GACxD,MAEF,KAAK,EAAAzC,SAASiQ,oBACZve,KAAK88H,yBAA8C/rH,GAAa,GAChE,MAEF,KAAK,EAAAzC,SAAS8O,iBACZpd,KAAK08H,sBAAwC3rH,GAAa,GAC1D,MAEF,KAAK,EAAAzC,SAASqQ,qBACZ3e,KAAKg9H,0BAAgDjsH,GAAa,GAClE,MAEF,KAAK,EAAAzC,SAASuQ,qBACZ7e,KAAKk9H,0BAAgDnsH,GAAa,GAClE,MAEF,QAAS9F,QAAO,IAIpB,yBAAyBqgD,GACvBtrD,KAAKk6H,UAAU5uE,EAAK/6C,YAGtB,sBAAsB+6C,GACpB,IAAIh4C,EAAag4C,EAAKh4C,WACtB,GAAIA,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAC9CL,KAAKq9H,mBAAmB/pH,EAAWjT,IAGvCL,KAAK2+H,yBAAyBrzE,GAC9BtrD,KAAKu6H,0BAA0BjvE,EAAK1qD,MACpC,IAAI2M,EAAKvN,KAAKuN,GACV+9C,EAAK/3C,MAAQ,EAAAlR,YAAYi9G,qBAC3B/xG,EAAGE,KAAK,KAEV,IAAIiC,EAAO47C,EAAK57C,KACZA,IACFnC,EAAGE,KAAK,MACRzN,KAAK49H,cAAcluH,IAErB,IAAIC,EAAc27C,EAAK37C,YACnBA,IACFpC,EAAGE,KAAK,OACRzN,KAAKk6H,UAAUvqH,IAInB,kBAAkB27C,GAChB,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,SACR,IAAIkC,EAAc27C,EAAK37C,YACnBA,GACF3P,KAAKk6H,UAAUvqH,GAEjB,IAAI4C,EAAY+4C,EAAK/4C,UACjBA,GACFhF,EAAGE,KAAK,MACRzN,KAAKk6H,UAAU3nH,IAEfhF,EAAGE,KAAK,KAEV,IAAI6H,EAAcg2C,EAAKh2C,YACnBA,GACF/H,EAAGE,KAAK,MACRzN,KAAKk6H,UAAU5kH,IAEf/H,EAAGE,KAAK,KAEVF,EAAGE,KAAK,MACRzN,KAAKk6H,UAAU5uE,EAAKz3C,WAGtB,oBAAoBy3C,GAClB,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,SACRzN,KAAKk6H,UAAU5uE,EAAK91C,UACpBjI,EAAGE,KAAK,QACRzN,KAAKk6H,UAAU5uE,EAAK71C,UACpBlI,EAAGE,KAAK,MACRzN,KAAKk6H,UAAU5uE,EAAKz3C,WAGtB,yBAAyBy3C,EAA2BkzE,GAAkB,GACpE,IAAIjxH,EAAKvN,KAAKuN,GACV+F,EAAag4C,EAAKh4C,WACtB,GAAIA,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAC9CL,KAAKq9H,mBAAmB/pH,EAAWjT,IAGnCm+H,EACFjxH,EAAGE,KAAK,oBAERzN,KAAKy+H,2BAA2BnzE,GAChCtrD,KAAK2+H,yBAAyBrzE,IAE5BA,EAAK1qD,KAAKsM,KAAKE,OACjBG,EAAGE,KAAK,aAERF,EAAGE,KAAK,YAEVzN,KAAK+9H,oBAAoBzyE,GAG3B,oBAAoBA,GAClB,IAAI/9C,EAAKvN,KAAKuN,GACdvN,KAAKu6H,0BAA0BjvE,EAAK1qD,MACpC,IAAI+U,EAAY21C,EAAK31C,UACjBnC,EAAiB83C,EAAK93C,eAC1B,GAAIA,EAAgB,CAClB,IAAIu6C,EAAoBv6C,EAAepG,OACvC,GAAI2gD,EAAmB,CACrBxgD,EAAGE,KAAK,KACRzN,KAAKs6H,mBAAmB9mH,EAAe,IACvC,IAAK,IAAInT,EAAI,EAAGA,EAAI0tD,IAAqB1tD,EACvCkN,EAAGE,KAAK,MACRzN,KAAKs6H,mBAAmB9mH,EAAenT,IAEzCkN,EAAGE,KAAK,MAGZ,GAAsB,GAAlB69C,EAAKz1C,UAAqC,CAC5C,IAAI5G,EAAa0G,EAAU1G,WAC3BhE,OAA4B,GAArBgE,EAAW7B,QAClBnC,QAAQ0K,EAAUxG,kBAClBnP,KAAKu9H,mBAAmBtuH,EAAW,QAC9B,CACL1B,EAAGE,KAAK,KACR,IAAIwB,EAAa0G,EAAU1G,WACvBg7C,EAAgBh7C,EAAW7B,OAC3B+B,EAAmBwG,EAAUxG,iBAKjC,GAJIA,IACF5B,EAAGE,KAAK,UACRzN,KAAK49H,cAAczuH,IAEjB86C,EAAe,CACb96C,GAAkB5B,EAAGE,KAAK,MAC9BzN,KAAKu9H,mBAAmBtuH,EAAW,IACnC,IAAK,IAAI5O,EAAI,EAAGA,EAAI4pD,IAAiB5pD,EACnCkN,EAAGE,KAAK,MACRzN,KAAKu9H,mBAAmBtuH,EAAW5O,KAIzC,IAAIuV,EAAO01C,EAAK11C,KACZ1G,EAAayG,EAAUzG,WACvBo8C,EAAKz1C,UACHD,GACoB,GAAlB01C,EAAKz1C,UACP5K,OAAO,EAAA8hD,cAAc79C,IAEjB,EAAA69C,cAAc79C,GAChB3B,EAAGE,KAAK,MAERF,EAAGE,KAAK,OACRzN,KAAK49H,cAAc1uH,IAGvB3B,EAAGE,KAAK,QACRzN,KAAKk6H,UAAUtkH,KAEf3K,QAAQ,EAAA8hD,cAAc79C,IACtB3B,EAAGE,KAAK,QACRzN,KAAK49H,cAAc1uH,KAIlB,EAAA69C,cAAc79C,IACdo8C,EAAK1yB,MAAM,EAAAv2B,YAAY6Y,YAAc,EAAA7Y,YAAYwf,KAKlDtU,EAAGE,KAAK,MAHRF,EAAGE,KAAK,OACRzN,KAAK49H,cAAc1uH,IAIjB0G,IACFrI,EAAGE,KAAK,KACRzN,KAAKk6H,UAAUtkH,KAKrB,iBAAiB01C,GACf,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,QACRzN,KAAKk6H,UAAU5uE,EAAK/4C,WACpBhF,EAAGE,KAAK,MACR,IAAImH,EAAS02C,EAAK12C,OAClB5U,KAAKk6H,UAAUtlH,GACXA,EAAOjG,MAAQ,EAAAL,SAAS4O,OAC1B3P,EAAGE,KAAK,OAEV,IAAIoH,EAAUy2C,EAAKz2C,QACfA,IACED,EAAOjG,MAAQ,EAAAL,SAAS4O,MAC1B3P,EAAGE,KAAK,UAERF,EAAGE,KAAK,SAEVzN,KAAKk6H,UAAUrlH,IAInB,uBAAuBy2C,GACrB,IAAIh3C,EAAeg3C,EAAKp2C,YACpBtU,EAAO0qD,EAAK1qD,KAChBZ,KAAKu6H,0BAA0BjmH,GAC3BA,EAAapH,MAAQtM,EAAKsM,OAC5BlN,KAAKuN,GAAGE,KAAK,QACbzN,KAAKu6H,0BAA0B35H,IAInC,qBAAqB0qD,GACnB,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,WACR,IAAIsH,EAAeu2C,EAAKv2C,aACpBE,EAAgBq2C,EAAKr2C,cACzB,GAAIF,EAAc,CAChB,IAAIyzF,EAAkBzzF,EAAa3H,OACnC,GAAIo7F,EAAiB,CACnBj7F,EAAGE,KAAK,OACR,IAAIm9G,IAAgB5qH,KAAK4qH,YACzB,EAAAE,OAAOv9G,EAAIq9G,GACX5qH,KAAK+8H,uBAAuBhoH,EAAa,IACzC,IAAK,IAAI1U,EAAI,EAAGA,EAAImoG,IAAmBnoG,EACrCkN,EAAGE,KAAK,OACR,EAAAq9G,OAAOv9G,EAAIq9G,GACX5qH,KAAK+8H,uBAAuBhoH,EAAa1U,MAEzCL,KAAK4qH,YACPr9G,EAAGE,KAAK,kBAERF,EAAGE,KAAK,iBAEDwH,IACT1H,EAAGE,KAAK,SACRzN,KAAKu6H,0BAA0BtlH,GAC/B1H,EAAGE,KAAK,WAEVzN,KAAKk+H,6BAA6B5yE,EAAKp3C,MAGzC,oBAAoBo3C,GAClB,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,UACRzN,KAAK49H,cAActyE,EAAKv1C,SACxBxI,EAAGE,KAAK,OACRzN,KAAK49H,cAActyE,EAAKt1C,WAG1B,0BAA0Bs1C,EAA4BkzE,GAAkB,GACtE,IAAIlrH,EAAag4C,EAAKh4C,WACtB,GAAIA,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAC9CL,KAAKq9H,mBAAmB/pH,EAAWjT,IAGvC,IAAIkN,EAAKvN,KAAKuN,GACVixH,EACFjxH,EAAGE,KAAK,mBAERzN,KAAKy+H,2BAA2BnzE,GAElC/9C,EAAGE,KAAK,cACRzN,KAAKu6H,0BAA0BjvE,EAAK1qD,MACpC,IAAI4S,EAAiB83C,EAAK93C,eAC1B,GAAsB,MAAlBA,GAA0BA,EAAepG,OAAS,EAAG,CACvDG,EAAGE,KAAK,KACRzN,KAAKs6H,mBAAmB9mH,EAAe,IACvC,IAAK,IAAInT,EAAI,EAAG8N,EAAIqF,EAAepG,OAAQ/M,EAAI8N,IAAK9N,EAClDkN,EAAGE,KAAK,MACRzN,KAAKs6H,mBAAmB9mH,EAAenT,IAEzCkN,EAAGE,KAAK,KAEV,IAAI6B,EAAcg8C,EAAKh8C,YACnBA,IACF/B,EAAGE,KAAK,aACRzN,KAAK49H,cAActuH,IAGrB/B,EAAGE,KAAK,QACR,IAAIm9G,IAAgB5qH,KAAK4qH,YACrBl3G,EAAU43C,EAAK53C,QACnB,IAAK,IAAIrT,EAAI,EAAG8N,EAAIuF,EAAQtG,OAAQ/M,EAAI8N,IAAK9N,EAC3C,EAAAyqH,OAAOv9G,EAAIq9G,GACX5qH,KAAK09H,sBAAsBhqH,EAAQrT,MAEnCL,KAAK4qH,YACPr9G,EAAGE,KAAK,KAGV,uBAAuB69C,GACrB,IAAIh4C,EAAag4C,EAAKh4C,WACtB,GAAIA,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAC9CL,KAAKq9H,mBAAmB/pH,EAAWjT,IAGvCL,KAAK2+H,yBAAyBrzE,GAC1BA,EAAKjwB,GAAG,EAAAh5B,YAAYye,KACtB9gB,KAAKuN,GAAGE,KAAK,QACJ69C,EAAKjwB,GAAG,EAAAh5B,YAAYwf,MAC7B7hB,KAAKuN,GAAGE,KAAK,QAEfzN,KAAK+9H,oBAAoBzyE,GAG3B,0BAA0BA,EAA4BkzE,GAAkB,GACtE,IAAIlrH,EAAag4C,EAAKh4C,WACtB,GAAIA,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAC9CL,KAAKq9H,mBAAmB/pH,EAAWjT,IAGvC,IAAIkN,EAAKvN,KAAKuN,GACVixH,EACFjxH,EAAGE,KAAK,mBAERzN,KAAKy+H,2BAA2BnzE,GAElC/9C,EAAGE,KAAK,cACRzN,KAAKu6H,0BAA0BjvE,EAAK1qD,MACpC,IAAI8S,EAAU43C,EAAK53C,QAEnB,GADiBA,EAAQtG,OACT,CACdG,EAAGE,KAAK,QACR,IAAIm9G,IAAgB5qH,KAAK4qH,YACzB,IAAK,IAAIvqH,EAAI,EAAG8N,EAAIuF,EAAQtG,OAAQ/M,EAAI8N,IAAK9N,EAC3C,EAAAyqH,OAAOv9G,EAAIq9G,GACX5qH,KAAK09H,sBAAsBhqH,EAAQrT,IAErC,EAAAyqH,OAAOv9G,IAAMvN,KAAK4qH,aAClBr9G,EAAGE,KAAK,UAERF,EAAGE,KAAK,OAIZ,qBAAqB69C,GACnB,IAAIhqD,EAAQgqD,EAAKhqD,MACbA,GACFtB,KAAKuN,GAAGE,KAAK,WACbzN,KAAKk6H,UAAU54H,IAEftB,KAAKuN,GAAGE,KAAK,UAIjB,gBAAgB69C,GACd,IAAI/9C,EAAKvN,KAAKuN,GACV6F,EAAQk4C,EAAKl4C,MACbA,GACF7F,EAAGE,KAAK,SACRzN,KAAKk6H,UAAU9mH,GACf7F,EAAGE,KAAK,QAERF,EAAGE,KAAK,cAEV,IAAIyF,EAAao4C,EAAKp4C,WAClBoyF,EAAgBpyF,EAAW9F,OAC/B,GAAIk4F,EAAe,CACjB,IAAIslB,IAAgB5qH,KAAK4qH,YACzB,EAAAE,OAAOv9G,EAAIq9G,GACX5qH,KAAK09H,sBAAsBxqH,EAAW,IACtC,IAAK,IAAI7S,EAAI,EAAGA,EAAIilG,IAAiBjlG,EACnC,EAAAyqH,OAAOv9G,EAAIq9G,GACX5qH,KAAK09H,sBAAsBxqH,EAAW7S,MAEtCL,KAAK4qH,aAIX,qBAAqBt/D,GACnB,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,YACRzN,KAAKk6H,UAAU5uE,EAAK/4C,WACpBhF,EAAGE,KAAK,SACR,IAAIm9G,IAAgB5qH,KAAK4qH,YACrBv0G,EAAQi1C,EAAKj1C,MACjB,IAAK,IAAIhW,EAAI,EAAG8N,EAAIkI,EAAMjJ,OAAQ/M,EAAI8N,IAAK9N,EACzC,EAAAyqH,OAAOv9G,EAAIq9G,GACX5qH,KAAKw9H,gBAAgBnnH,EAAMhW,IAC3BkN,EAAGE,KAAK,QAERzN,KAAK4qH,YACPr9G,EAAGE,KAAK,KAGV,oBAAoB69C,GAClBtrD,KAAKuN,GAAGE,KAAK,UACbzN,KAAKk6H,UAAU5uE,EAAKhqD,OAGtB,kBAAkBgqD,GAChB,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,WACR,IAAIm9G,IAAgB5qH,KAAK4qH,YACrB13G,EAAao4C,EAAKp4C,WACtB,IAAK,IAAI7S,EAAI,EAAG8N,EAAI+E,EAAW9F,OAAQ/M,EAAI8N,IAAK9N,EAC9C,EAAAyqH,OAAOv9G,EAAIq9G,GACX5qH,KAAK09H,sBAAsBxqH,EAAW7S,IAExC,IAAIoW,EAAgB60C,EAAK70C,cACzB,GAAIA,EAAe,CACjB,EAAAq0G,OAAOv9G,EAAIq9G,EAAc,GACzBr9G,EAAGE,KAAK,aACRzN,KAAKu6H,0BAA0B9jH,GAC/BlJ,EAAGE,KAAK,SACR,IAAIiJ,EAAkB40C,EAAK50C,gBAC3B,GAAIA,EACF,IAAK,IAAIrW,EAAI,EAAG8N,EAAIuI,EAAgBtJ,OAAQ/M,EAAI8N,IAAK9N,EACnD,EAAAyqH,OAAOv9G,EAAIq9G,GACX5qH,KAAK09H,sBAAsBhnH,EAAgBrW,IAIjD,IAAIsW,EAAoB20C,EAAK30C,kBAC7B,GAAIA,EAAmB,CACrB,EAAAm0G,OAAOv9G,EAAIq9G,EAAc,GACzBr9G,EAAGE,KAAK,iBACR,IAAK,IAAIpN,EAAI,EAAG8N,EAAIwI,EAAkBvJ,OAAQ/M,EAAI8N,IAAK9N,EACrD,EAAAyqH,OAAOv9G,EAAIq9G,GACX5qH,KAAK09H,sBAAsB/mH,EAAkBtW,IAGjD,EAAAyqH,OAAOv9G,EAAIq9G,EAAc,GACzBr9G,EAAGE,KAAK,KAGV,qBAAqB69C,GACnB,IAAIh4C,EAAag4C,EAAKh4C,WACtB,GAAIA,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAC9CL,KAAKq9H,mBAAmB/pH,EAAWjT,IAGvC,IAAIkN,EAAKvN,KAAKuN,GACdvN,KAAKy+H,2BAA2BnzE,GAChC/9C,EAAGE,KAAK,SACRzN,KAAKu6H,0BAA0BjvE,EAAK1qD,MACpC,IAAI4S,EAAiB83C,EAAK93C,eAC1B,GAAIA,EAAgB,CAClB,IAAIu6C,EAAoBv6C,EAAepG,OACvC,GAAI2gD,EAAmB,CACrBxgD,EAAGE,KAAK,KACR,IAAK,IAAIpN,EAAI,EAAGA,EAAI0tD,IAAqB1tD,EACvCL,KAAKs6H,mBAAmB9mH,EAAenT,IAEzCkN,EAAGE,KAAK,MAGZF,EAAGE,KAAK,OACRzN,KAAK49H,cAActyE,EAAK57C,MAG1B,yBAAyB47C,GACvBtrD,KAAKu6H,0BAA0BjvE,EAAK1qD,MACpC,IAAI8O,EAAO47C,EAAK57C,KACZnC,EAAKvN,KAAKuN,GACV+9C,EAAK/3C,MAAQ,EAAAlR,YAAYi9G,qBAC3B/xG,EAAGE,KAAK,KAENiC,IACFnC,EAAGE,KAAK,MACRzN,KAAK49H,cAAcluH,IAErB,IAAIC,EAAc27C,EAAK37C,YACnBA,IACFpC,EAAGE,KAAK,OACRzN,KAAKk6H,UAAUvqH,IAInB,uBAAuB27C,GACrB,IAAIh4C,EAAag4C,EAAKh4C,WACtB,GAAIA,EACF,IAAK,IAAIjT,EAAI,EAAG8N,EAAImF,EAAWlG,OAAQ/M,EAAI8N,IAAK9N,EAC9CL,KAAKq9H,mBAAmB/pH,EAAWjT,IAGvC,IAAIkN,EAAKvN,KAAKuN,GACVwH,EAAeu2C,EAAKv2C,aACpByzF,EAAkBv9F,OAAO8J,EAAa3H,QACtCi5B,EAAmBtxB,EAAa,GACpC/U,KAAKy+H,2BAA2Bp4F,GAChC94B,EAAGE,KAAK44B,EAAiBhL,GAAG,EAAAh5B,YAAY+d,OAAS,SAAWimB,EAAiBhL,GAAG,EAAAh5B,YAAY+e,KAAO,OAAS,QAC5GphB,KAAKo9H,yBAAyB9xE,EAAKv2C,aAAa,IAChD,IAAK,IAAI1U,EAAI,EAAGA,EAAImoG,IAAmBnoG,EACrCkN,EAAGE,KAAK,MACRzN,KAAKo9H,yBAAyB9xE,EAAKv2C,aAAa1U,IAIpD,oBAAoBirD,GAClB,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,WACRzN,KAAKk6H,UAAU5uE,EAAK/4C,WACJ+4C,EAAKz3C,UACPlF,MAAQ,EAAAL,SAASpL,MAC7BqK,EAAGE,KAAK,MAERF,EAAGE,KAAK,MACRzN,KAAKk6H,UAAU5uE,EAAKz3C,YAMxB,mBAAmBy3C,GACjB,IAAI/9C,EAAKvN,KAAKuN,GACdA,EAAGE,KAAK,KACRzN,KAAKk6H,UAAU5uE,EAAK1qD,MACpB,IAAIiP,EAAOy7C,EAAKz7C,KAChB,GAAIA,EAAM,CACRtC,EAAGE,KAAK,KACR,IAAIgwB,EAAU5tB,EAAKzC,OACnB,GAAIqwB,EAAS,CACXz9B,KAAKk6H,UAAUrqH,EAAK,IACpB,IAAK,IAAIxP,EAAI,EAAGA,EAAIo9B,IAAWp9B,EAC7BkN,EAAGE,KAAK,MACRzN,KAAKk6H,UAAUrqH,EAAKxP,IAGxBkN,EAAGE,KAAK,YAERF,EAAGE,KAAK,MAEV,EAAAq9G,OAAOv9G,EAAIvN,KAAK4qH,aAGlB,mBAAmBt/D,GACjB,IAAI/9C,EAAKvN,KAAKuN,GACVoB,EAAO28C,EAAK77C,cACZqJ,EAA2BwyC,EAAKxyC,yBAChCA,GACF9Y,KAAK2+H,yBAAyB7lH,GAE5BnK,GAAQ,EAAAiK,cAAci0C,MACxBt/C,EAAGE,KAAK,OAEVzN,KAAKu6H,0BAA0BjvE,EAAK1qD,MACpC,IAAI8O,EAAO47C,EAAK57C,KACZC,EAAc27C,EAAK37C,YACnBD,IACEf,GAAQ,EAAAiK,cAAc+lG,UAAUpxG,EAAGE,KAAK,KACvC,EAAAs/C,cAAcr9C,KACjBnC,EAAGE,KAAK,MACRzN,KAAK49H,cAAcluH,KAGnBC,IACFpC,EAAGE,KAAK,OACRzN,KAAKk6H,UAAUvqH,IAInB,2BAA2B27C,GACzB,IAAI/9C,EAAKvN,KAAKuN,GACV+9C,EAAKjwB,GAAG,EAAAh5B,YAAYub,QACtBrQ,EAAGE,KAAK,WACC69C,EAAKjwB,GAAG,EAAAh5B,YAAYqc,QAC7BnR,EAAGE,KAAK,WACC69C,EAAKjwB,GAAG,EAAAh5B,YAAYie,UAC7B/S,EAAGE,KAAK,YAIZ,yBAAyB69C,GACvB,IAAI/9C,EAAKvN,KAAKuN,GACV+9C,EAAKjwB,GAAG,EAAAh5B,YAAYsf,QACtBpU,EAAGE,KAAK,WACC69C,EAAKjwB,GAAG,EAAAh5B,YAAYof,SAC7BlU,EAAGE,KAAK,YACC69C,EAAKjwB,GAAG,EAAAh5B,YAAYqf,YAC7BnU,EAAGE,KAAK,cAEN69C,EAAKjwB,GAAG,EAAAh5B,YAAYyf,QACtBvU,EAAGE,KAAK,WACC69C,EAAKjwB,GAAG,EAAAh5B,YAAYyd,WAC7BvS,EAAGE,KAAK,aAEN69C,EAAKjwB,GAAG,EAAAh5B,YAAYuf,WACtBrU,EAAGE,KAAK,aAIZ,SACE,IAAIsgC,EAAM/tC,KAAKuN,GAAGG,KAAK,IAEvB,OADA1N,KAAKuN,GAAK,GACHwgC,GAphDX","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Did error. */\n  ERRORED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a stub. */\n  STUB = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 28,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const ipow32 = \"ipow32\";\n  export const ipow64 = \"ipow64\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \"(\" +\n        source.lineAt(range.start).toString() +\n        \",\" +\n        source.columnAt().toString() +\n        \"+\" +\n        (range.end - range.start).toString() +\n        \")\"\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    if (!diagnostics) diagnostics = new Array();\n    this.diagnostics = diagnostics;\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  INDEXSIGNATURE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  constructor(\n    /** Kind of this node. */\n    public kind: NodeKind,\n    /** Source range. */\n    public range: Range\n  ) {}\n\n  // types\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(name, typeArguments, isNullable, range);\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    return new TypeParameterNode(name, extendsType, defaultType, range);\n  }\n\n  static createParameter(\n    parameterKind: ParameterKind,\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    range: Range\n  ): ParameterNode {\n    return new ParameterNode(parameterKind, name, type, initializer, range);\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n  }\n\n  static createComment(\n    commentKind: CommentKind,\n    text: string,\n    range: Range\n  ): CommentNode {\n    return new CommentNode(commentKind, text, range);\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    text: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    return new IdentifierExpression(text, isQuoted, range);\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    return new IdentifierExpression(\"\", false, range);\n  }\n\n  static createArrayLiteralExpression(\n    elementExpressions: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    return new ArrayLiteralExpression(elementExpressions, range);\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    return new AssertionExpression(assertionKind, expression, toType, range);\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    return new BinaryExpression(operator, left, right, range);\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    return new CallExpression(expression, typeArguments, args, range);\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    return new ClassExpression(declaration);\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    return new CommaExpression(expressions, range);\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    return new ConstructorExpression(range);\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    elementExpression: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    return new ElementAccessExpression(expression, elementExpression, range);\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    return new FalseExpression(range);\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    return new FloatLiteralExpression(value, range);\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    return new FunctionExpression(declaration);\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    return new InstanceOfExpression(expression, isType, range);\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    return new IntegerLiteralExpression(value, range);\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    return new NewExpression(typeName, typeArguments, args, range);\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    return new NullExpression(range);\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    return new ObjectLiteralExpression(names, values, range);\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    return new ParenthesizedExpression(expression, range);\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    return new PropertyAccessExpression(expression, property, range);\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    patternFlags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    return new RegexpLiteralExpression(pattern, patternFlags, range);\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    return new TernaryExpression(condition, ifThen, ifElse, range);\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    return new StringLiteralExpression(value, range);\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    return new SuperExpression(range);\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    return new ThisExpression(range);\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    return new TrueExpression(range);\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    return new UnaryPostfixExpression(operator, operand, range);\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    return new UnaryPrefixExpression(operator, operand, range);\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    return new BlockStatement(statements, range);\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    return new BreakStatement(label, range);\n  }\n\n  static createClassDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): ClassDeclaration {\n    return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    return new ContinueStatement(label, range);\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    return new DoStatement(statement, condition, range);\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    return new EmptyStatement(range);\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    values: EnumValueDeclaration[],\n    range: Range\n  ): EnumDeclaration {\n    return new EnumDeclaration(name, decorators, flags, values, range);\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    flags: CommonFlags,\n    initializer: Expression | null,\n    range: Range\n  ): EnumValueDeclaration {\n    return new EnumValueDeclaration(name, flags, initializer, range);\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    return new ExportStatement(members, path, isDeclare, range);\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    return new ExportDefaultStatement(declaration, range);\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    return new ExportImportStatement(name, externalName, range);\n  }\n\n  static createExportMember(\n    localName: IdentifierExpression,\n    exportedName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    if (!exportedName) exportedName = localName;\n    return new ExportMember(localName, exportedName, range);\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    return new ExpressionStatement(expression);\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    return new IfStatement(condition, ifTrue, ifFalse, range);\n  }\n\n  static createImportStatement(\n    declarations: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(declarations, null, path, range);\n  }\n\n  static createWildcardImportStatement(\n    namespaceName: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(null, namespaceName, path, range);\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    if (!name) name = foreignName;\n    return new ImportDeclaration(name, foreignName, range);\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): InterfaceDeclaration {\n    return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): FieldDeclaration {\n    return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    return new ForStatement(initializer, condition, incrementor, statement, range);\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    return new ForOfStatement(variable, iterable, statement, range);\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n  }\n\n  static createIndexSignature(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureNode {\n    return new IndexSignatureNode(keyType, valueType, flags, range);\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    range: Range\n  ): MethodDeclaration {\n    return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    members: Statement[],\n    range: Range\n  ): NamespaceDeclaration {\n    return new NamespaceDeclaration(name, decorators, flags, members, range);\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    return new ReturnStatement(value, range);\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    return new SwitchStatement(condition, cases, range);\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    return new SwitchCase(label, statements, range);\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    return new ThrowStatement(value, range);\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    type: TypeNode,\n    range: Range\n  ): TypeDeclaration {\n    return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n  }\n\n  static createVariableStatement(\n    decorators: DecoratorNode[] | null,\n    declarations: VariableDeclaration[],\n    range: Range\n  ): VariableStatement {\n    return new VariableStatement(decorators, declarations, range);\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): VariableDeclaration {\n    return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    return new VoidStatement(expression, range);\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    return new WhileStatement(condition, statement, range);\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  /** Checks if this is a call calling a method on super. */\n  get isCallOnSuper(): bool {\n    if (this.kind != NodeKind.CALL) return false;\n    var expression = changetype<CallExpression>(this).expression;\n    if (expression.kind != NodeKind.PROPERTYACCESS) return false;\n    var target = (<PropertyAccessExpression>expression).expression;\n    if (target.kind == NodeKind.SUPER) return true;\n    return false;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  constructor(\n    /** Kind of the type node. */\n    kind: NodeKind,\n    /** Whether nullable or not. */\n    public isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  constructor(\n    /** Identifier of this part. */\n    public identifier: IdentifierExpression,\n    /** Next part of the type name or `null` if this is the last part. */\n    public next: TypeName | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPENAME, range);\n  }\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  constructor(\n    /** Type name. */\n    public name: TypeName,\n    /** Type argument references. */\n    public typeArguments: TypeNode[] | null,\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMEDTYPE, isNullable, range);\n  }\n\n  /** Checks if this type node has type arguments. */\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  constructor(\n    /** Function parameters. */\n    public parameters: ParameterNode[],\n    /** Return type. */\n    public returnType: TypeNode,\n    /** Explicitly provided this type, if any. */\n    public explicitThisType: NamedTypeNode | null, // can't be a function\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONTYPE, isNullable, range);\n  }\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  constructor(\n    /** Identifier reference. */\n    public name: IdentifierExpression,\n    /** Extended type reference, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Default type if omitted, if any. */\n    public defaultType: NamedTypeNode | null, // can't be a function\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEPARAMETER, range);\n  }\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  constructor(\n    /** Parameter kind. */\n    public parameterKind: ParameterKind,\n    /** Parameter name. */\n    public name: IdentifierExpression,\n    /** Parameter type. */\n    public type: TypeNode,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARAMETER, range);\n  }\n\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  constructor(\n    /** Built-in decorator kind, or custom. */\n    public decoratorKind: DecoratorKind,\n    /** Name expression. */\n    public name: Expression,\n    /** Argument expressions. */\n    public args: Expression[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DECORATOR, range);\n  }\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash line comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  constructor(\n    /** Comment kind. */\n    public commentKind: CommentKind,\n    /** Comment text. */\n    public text: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMENT, range);\n  }\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  constructor(\n    /** Textual name. */\n    public text: string,\n    /** Whether quoted or not. */\n    public isQuoted: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IDENTIFIER, range);\n  }\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  constructor(\n    /** Specific literal kind. */\n    public literalKind: LiteralKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.LITERAL, range);\n  }\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Nested element expressions. */\n    public elementExpressions: (Expression | null)[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.ARRAY, range);\n  }\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  /** A prefix assertion, i.e. `<T>expr`. */\n  PREFIX,\n  /** An as assertion, i.e. `expr as T`. */\n  AS,\n  /** A non-null assertion, i.e. `!expr`. */\n  NONNULL,\n  /** A const assertion, i.e. `expr as const`. */\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  constructor(\n    /** Specific kind of this assertion. */\n    public assertionKind: AssertionKind,\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Target type, if applicable. */\n    public toType: TypeNode | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ASSERTION, range);\n  }\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  constructor(\n    /** Operator token. */\n    public operator: Token,\n    /** Left-hand side expression */\n    public left: Expression,\n    /** Right-hand side expression. */\n    public right: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BINARY, range);\n  }\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    public expression: Expression,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CALL, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  constructor(\n    /** Inline class declaration. */\n    public declaration: ClassDeclaration\n  ) {\n    super(NodeKind.CLASS, declaration.range);\n  }\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  constructor(\n    /** Sequential expressions. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMA, range);\n  }\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"constructor\", false, range);\n    this.kind = NodeKind.CONSTRUCTOR;\n  }\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Element of the expression being accessed. */\n    public elementExpression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ELEMENTACCESS, range);\n  }\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Float value. */\n    public value: f64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.FLOAT, range);\n  }\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  constructor(\n    /** Inline function declaration. */\n    public declaration: FunctionDeclaration\n  ) {\n    super(NodeKind.FUNCTION, declaration.range);\n  }\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  constructor(\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Type to test for. */\n    public isType: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INSTANCEOF, range);\n  }\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Integer value. */\n    public value: i64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.INTEGER, range);\n  }\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  constructor(\n    /** Type being constructed. */\n    public typeName: TypeName,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NEW, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"null\", false, range);\n    this.kind = NodeKind.NULL;\n  }\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Field names. */\n    public names: IdentifierExpression[],\n    /** Field values. */\n    public values: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.OBJECT, range);\n  }\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  constructor(\n    /** Expression in parenthesis. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARENTHESIZED, range);\n  }\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Property of the expression being accessed. */\n    public property: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PROPERTYACCESS, range);\n  }\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Regular expression pattern. */\n    public pattern: string,\n    /** Regular expression flags. */\n    public patternFlags: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.REGEXP, range);\n  }\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Expression executed when condition is `true`. */\n    public ifThen: Expression,\n    /** Expression executed when condition is `false`. */\n    public ifElse: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TERNARY, range);\n  }\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  constructor(\n    /** String value without quotes. */\n    public value: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.STRING, range);\n  }\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"super\", false, range);\n    this.kind = NodeKind.SUPER;\n  }\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"this\", false, range);\n    this.kind = NodeKind.THIS;\n  }\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"true\", false, range);\n    this.kind = NodeKind.TRUE;\n  }\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"false\", false, range);\n    this.kind = NodeKind.FALSE;\n  }\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  constructor(\n    /** Unary expression kind. */\n    kind: NodeKind,\n    /** Operator token. */\n    public operator: Token,\n    /** Operand expression. */\n    public operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n  }\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPREFIX, operator, operand, range);\n  }\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  constructor(\n    /** Source kind. */\n    public sourceKind: SourceKind,\n    /** Normalized path with file extension. */\n    public normalizedPath: string,\n    /** Full source text. */\n    public text: string\n  ) {\n    super(NodeKind.SOURCE, changetype<Range>(0)); // ¯\\(ツ)/¯\n    this.range = new Range(this, 0, text.length);\n    var internalPath = mangleInternalPath(normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n  }\n\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[] = new Array();\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Rememberd column number. */\n  private lineColumn: i32 = 0;\n\n  /** Determines the line number at the specified position. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  constructor(\n    /** Declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    public name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    public decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature. */\nexport class IndexSignatureNode extends Node {\n  constructor(\n    /** Key type. */\n    public keyType: NamedTypeNode,\n    /** Value type. */\n    public valueType: TypeNode,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INDEXSIGNATURE, range);\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  constructor(\n    /** Variable-like declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    public type: TypeNode | null,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, name, decorators, flags, range);\n  }\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BLOCK, range);\n  }\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  constructor(\n    /** Target label, if any. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BREAK, range);\n  }\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    public implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    public members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Index signature, if present. */\n  indexSignature: IndexSignatureNode | null = null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  constructor(\n    /** Target label, if applicable. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CONTINUE, range);\n  }\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  constructor(\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Condition when to repeat. */\n    public condition: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DO, range);\n  }\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EMPTY, range);\n  }\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Enum value declarations. */\n    public values: EnumValueDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n  }\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  constructor(\n    /** Identifier being imported. */\n    public name: IdentifierExpression,\n    /** Identifier being exported. */\n    public externalName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTIMPORT, range);\n  }\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  constructor(\n    /** Local identifier. */\n    public localName: IdentifierExpression,\n    /** Exported identifier. */\n    public exportedName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTMEMBER, range);\n  }\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    public members: ExportMember[] | null,\n    /** Path being exported from, if applicable. */\n    public path: StringLiteralExpression | null,\n    /** Whether this is a declared export. */\n    public isDeclare: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORT, range);\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      this.internalPath = normalizedPath;\n    } else {\n      this.internalPath = null;\n    }\n  }\n\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  constructor(\n    /** Declaration being exported as default. */\n    public declaration: DeclarationStatement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTDEFAULT, range);\n  }\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  constructor(\n    /** Expression being used as a statement.*/\n    public expression: Expression\n  ) {\n    super(NodeKind.EXPRESSION, expression.range);\n  }\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    public parameterIndex: i32,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    public initializer: Statement | null,\n    /** Condition expression, if present. */\n    public condition: Expression | null,\n    /** Incrementor expression, if present. */\n    public incrementor: Expression | null,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOR, range);\n  }\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    public variable: Statement,\n    /** Iterable expression being iterated. */\n    public iterable: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOROF, range);\n  }\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    public signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    public body: Statement | null,\n    /** Arrow function kind, if applicable. */\n    public arrowKind: ArrowKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Gets if this function is generic. */\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return new FunctionDeclaration(\n      this.name,\n      this.decorators,\n      this.flags,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  constructor(\n    /** Condition. */\n    public condition: Expression,\n    /** Statement executed when condition is `true`. */\n    public ifTrue: Statement,\n    /** Statement executed when condition is `false`. */\n    public ifFalse: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IF, range);\n  }\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Identifier being imported. */\n    public foreignName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORTDECLARATION, name, null, CommonFlags.NONE, range);\n  }\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    public declarations: ImportDeclaration[] | null,\n    /** Name of the local namespace, if an asterisk import. */\n    public namespaceName: IdentifierExpression | null,\n    /** Path being imported from. */\n    public path: StringLiteralExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORT, range);\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    this.internalPath = normalizedPath;\n  }\n\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    this.kind = NodeKind.INTERFACEDECLARATION;\n  }\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    body: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, signature, body, ArrowKind.NONE, range);\n    this.kind = NodeKind.METHODDECLARATION;\n  }\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Array of namespace members. */\n    public members: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  constructor(\n    /** Value expression being returned, if present. */\n    public value: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.RETURN, range);\n  }\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  constructor(\n    /** Label expression. `null` indicates the default case. */\n    public label: Expression | null,\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCHCASE, range);\n  }\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Contained cases. */\n    public cases: SwitchCase[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCH, range);\n  }\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  constructor(\n    /** Value expression being thrown. */\n    public value: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.THROW, range);\n  }\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Exception variable name, if a `catch` clause is present. */\n    public catchVariable: IdentifierExpression | null,\n    /** Statements being executed on catch, if a `catch` clause is present. */\n    public catchStatements: Statement[] | null,\n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    public finallyStatements: Statement[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TRY, range);\n  }\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Type being aliased. */\n    public type: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  constructor(\n    /** Array of decorators. */\n    public decorators: DecoratorNode[] | null,\n    /** Array of member declarations. */\n    public declarations: VariableDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLE, range);\n  }\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  constructor(\n    /** Expression being dropped. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VOID, range);\n  }\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.WHILE, range);\n  }\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n  debugInfoRef: usize = 0;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  equals(other: Range): bool {\n    return this.source == other.source && this.start == other.start && this.end == other.end;\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          let start = this.pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && this.pos < this.end &&\n            ((text.charCodeAt(this.pos)) & 0xFC00) == 0xDC00\n          ) ++this.pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, this.pos)\n          );\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) {\n      reusableState = null;\n      state.pos = this.pos;\n      state.token = this.token;\n      state.tokenPos = this.tokenPos;\n    } else {\n      state = new State(this.pos, this.token, this.tokenPos);\n    }\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  constructor(\n    /** Current position. */\n    public pos: i32,\n    /** Current token. */\n    public token: Token,\n    /** Current token's position. */\n    public tokenPos: i32\n  ) {}\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// ├─File                     File, analogous to Source in the AST\n// └─FunctionTarget           Indirectly called function helper (typed)\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    public options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(SourceKind.LIBRARY_ENTRY, LIBRARY_SUBST + \".wasm\", \"[native code]\");\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  // Lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // Standard library\n\n  /** Gets the standard `ArrayBufferView` instance. */\n  get arrayBufferViewInstance(): Class {\n    var cached = this._arrayBufferViewInstance;\n    if (!cached) this._arrayBufferViewInstance = cached = this.requireClass(CommonNames.ArrayBufferView);\n    return cached;\n  }\n  private _arrayBufferViewInstance: Class | null = null;\n\n  /** Gets the standard `ArrayBuffer` instance. */\n  get arrayBufferInstance(): Class {\n    var cached = this._arrayBufferInstance;\n    if (!cached) this._arrayBufferInstance = cached = this.requireClass(CommonNames.ArrayBuffer);\n    return cached;\n  }\n  private _arrayBufferInstance: Class | null = null;\n\n  /** Gets the standard `Array` prototype. */\n  get arrayPrototype(): ClassPrototype {\n    var cached = this._arrayPrototype;\n    if (!cached) this._arrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _arrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `StaticArray` prototype. */\n  get staticArrayPrototype(): ClassPrototype {\n    var cached = this._staticArrayPrototype;\n    if (!cached) this._staticArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _staticArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Set` prototype. */\n  get setPrototype(): ClassPrototype {\n    var cached = this._setPrototype;\n    if (!cached) this._setPrototype = cached = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _setPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Map` prototype. */\n  get mapPrototype(): ClassPrototype {\n    var cached = this._mapPrototype;\n    if (!cached) this._mapPrototype = cached = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _mapPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int8Array` prototype. */\n  get int8ArrayPrototype(): ClassPrototype {\n    var cached = this._int8ArrayPrototype;\n    if (!cached) this._int8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int16Array` prototype. */\n  get int16ArrayPrototype(): ClassPrototype {\n    var cached = this._int16ArrayPrototype;\n    if (!cached) this._int16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int32Array` prototype. */\n  get int32ArrayPrototype(): ClassPrototype {\n    var cached = this._int32ArrayPrototype;\n    if (!cached) this._int32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int64Array` prototype. */\n  get int64ArrayPrototype(): ClassPrototype {\n    var cached = this._int64ArrayPrototype;\n    if (!cached) this._int64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8Array` prototype. */\n  get uint8ArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ArrayPrototype;\n    if (!cached) this._uint8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8ClampedArray` prototype. */\n  get uint8ClampedArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ClampedArrayPrototype;\n    if (!cached) this._uint8ClampedArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ClampedArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint16Array` prototype. */\n  get uint16ArrayPrototype(): ClassPrototype {\n    var cached = this._uint16ArrayPrototype;\n    if (!cached) this._uint16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint32Array` prototype. */\n  get uint32ArrayPrototype(): ClassPrototype {\n    var cached = this._uint32ArrayPrototype;\n    if (!cached) this._uint32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint64Array` prototype. */\n  get uint64ArrayPrototype(): ClassPrototype {\n    var cached = this._uint64ArrayPrototype;\n    if (!cached) this._uint64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float32Array` prototype. */\n  get float32ArrayPrototype(): ClassPrototype {\n    var cached = this._float32ArrayPrototype;\n    if (!cached) this._float32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float64Array` prototype. */\n  get float64ArrayPrototype(): ClassPrototype {\n    var cached = this._float64ArrayPrototype;\n    if (!cached) this._float64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `String` instance. */\n  get stringInstance(): Class {\n    var cached = this._stringInstance;\n    if (!cached) this._stringInstance = cached = this.requireClass(CommonNames.String);\n    return cached;\n  }\n  private _stringInstance: Class | null = null;\n\n  /** Gets the standard `abort` instance, if not explicitly disabled. */\n  get abortInstance(): Function | null {\n    return this.lookupFunction(CommonNames.abort);\n  }\n\n  // Runtime interface\n\n  /** Gets the runtime `__alloc(size: usize, id: u32): usize` instance. */\n  get allocInstance(): Function {\n    var cached = this._allocInstance;\n    if (!cached) this._allocInstance = cached = this.requireFunction(CommonNames.alloc);\n    return cached;\n  }\n  private _allocInstance: Function | null = null;\n\n  /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n  get reallocInstance(): Function {\n    var cached = this._reallocInstance;\n    if (!cached) this._reallocInstance = cached = this.requireFunction(CommonNames.realloc);\n    return cached;\n  }\n  private _reallocInstance: Function | null = null;\n\n  /** Gets the runtime `__free(ptr: usize): void` instance. */\n  get freeInstance(): Function {\n    var cached = this._freeInstance;\n    if (!cached) this._freeInstance = cached = this.requireFunction(CommonNames.free);\n    return cached;\n  }\n  private _freeInstance: Function | null = null;\n\n  /** Gets the runtime `__retain(ptr: usize): usize` instance. */\n  get retainInstance(): Function {\n    var cached = this._retainInstance;\n    if (!cached) this._retainInstance = cached = this.requireFunction(CommonNames.retain);\n    return cached;\n  }\n  private _retainInstance: Function | null = null;\n\n  /** Gets the runtime `__release(ptr: usize): void` instance. */\n  get releaseInstance(): Function {\n    var cached = this._releaseInstance;\n    if (!cached) this._releaseInstance = cached = this.requireFunction(CommonNames.release);\n    return cached;\n  }\n  private _releaseInstance: Function | null = null;\n\n  /** Gets the runtime `__collect(): void` instance. */\n  get collectInstance(): Function {\n    var cached = this._collectInstance;\n    if (!cached) this._collectInstance = cached = this.requireFunction(CommonNames.collect);\n    return cached;\n  }\n  private _collectInstance: Function | null = null;\n\n  /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n  get visitInstance(): Function {\n    var cached = this._visitInstance;\n    if (!cached) this._visitInstance = cached = this.requireFunction(CommonNames.visit);\n    return cached;\n  }\n  private _visitInstance: Function | null = null;\n\n  /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n  get typeinfoInstance(): Function {\n    var cached = this._typeinfoInstance;\n    if (!cached) this._typeinfoInstance = cached = this.requireFunction(CommonNames.typeinfo);\n    return cached;\n  }\n  private _typeinfoInstance: Function | null = null;\n\n  /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n  get instanceofInstance(): Function {\n    var cached = this._instanceofInstance;\n    if (!cached) this._instanceofInstance = cached = this.requireFunction(CommonNames.instanceof_);\n    return cached;\n  }\n  private _instanceofInstance: Function | null = null;\n\n  /** Gets the runtime `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n  get allocBufferInstance(): Function {\n    var cached = this._allocBufferInstance;\n    if (!cached) this._allocBufferInstance = cached = this.requireFunction(CommonNames.allocBuffer);\n    return cached;\n  }\n  private _allocBufferInstance: Function | null = null;\n\n  /** Gets the runtime `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n  get allocArrayInstance(): Function {\n    var cached = this._allocArrayInstance;\n    if (!cached) this._allocArrayInstance = cached = this.requireFunction(CommonNames.allocArray);\n    return cached;\n  }\n  private _allocArrayInstance: Function | null = null;\n\n  // Utility\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, id: u32, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, null, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null, flags, null,\n      Node.createOmittedType(range),\n      range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, signature, null, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, [], range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let localIdentifier = queuedImport.localIdentifier;\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            localIdentifier.text,\n            element,\n            localIdentifier // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.arrayBufferInstance.id == 0);\n    assert(this.stringInstance.id == 1);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          thisPrototype.basePrototype = basePrototype;\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          thisPrototype.basePrototype = <InterfacePrototype>baseElement;\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        assert(!interfacePrototypes);\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        assert(!basePrototype);\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) {\n          this.elementsByName.delete(alias);\n          continue;\n        }\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              } else {\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  thisMember.identifierNode.range,\n                  baseMember.identifierNode.range\n                );\n              }\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"Missing standard library component: \" + name);\n    if (element.kind != kind) throw Error(\"Invalid standard library component: \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"Invalid standard library class: \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"Invalid standard library function: \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n      ? assert(filesByName.get(foreignPath))\n      : filesByName.has(foreignPathAlt)\n        ? assert(filesByName.get(foreignPathAlt))\n        : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATURE: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.args;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.args)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                declaration.name,\n                typeNode,\n                null,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature, /* sameSize */ true);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element, localIdentifier: IdentifierExpression): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64 = i64_zero;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64 = 0;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Original name of the (temporary) local. */\n  private originalName: string;\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.originalName = name;\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n\n  /** Sets the temporary name of this local. */\n  setTemporaryName(name: string): void {\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n\n  /** Resets the temporary name of this local. */\n  resetTemporaryName(): void {\n    var name = this.originalName;\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS ||\n           parent.kind == ElementKind.PROPERTY_PROTOTYPE && (\n             parent.parent.kind == ElementKind.CLASS ||\n             parent.parent.kind == ElementKind.INTERFACE\n           );\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.createParent(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt()\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        null, null,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      switch (fieldInstance.type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.float32ArrayPrototype) return Type.f32;\n        if (prototype == program.float64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.int8ArrayPrototype) return Type.i8;\n        if (prototype == program.int16ArrayPrototype) return Type.i16;\n        if (prototype == program.int32ArrayPrototype) return Type.i32;\n        if (prototype == program.int64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.uint8ArrayPrototype) return Type.u8;\n        if (prototype == program.uint8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.uint16ArrayPrototype) return Type.u16;\n        if (prototype == program.uint32ArrayPrototype) return Type.u32;\n        if (prototype == program.uint64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.is(TypeFlags.REFERENCE)) {\n            if ((current = fieldType.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers !== null && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport type NativeType = usize;\nexport namespace NativeType {\n  export const None: NativeType = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: NativeType = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: NativeType = 2 /* _BinaryenTypeInt32 */;\n  export const I64: NativeType = 3 /* _BinaryenTypeInt64 */;\n  export const F32: NativeType = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: NativeType = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: NativeType = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: NativeType = 7 /* _BinaryenTypeFuncref */;\n  export const Anyref: NativeType = 8 /* _BinaryenTypeAnyref */;\n  export const Nullref: NativeType = 9 /* _BinaryenTypeNullref */;\n  export const Exnref: NativeType = 10 /* _BinaryenTypeExnref */;\n  export const Auto: NativeType = -1 /* _BinaryenTypeAuto */;\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  All = 1023 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Pop = 38 /* _BinaryenPopId */,\n  RefNull = 39 /* _BinaryenRefNullId */,\n  RefIsNull = 40 /* _BinaryenRefIsNullId */,\n  RefFunc = 41 /* _BinaryenRefFuncId */,\n  Try = 42 /* _BinaryenTryId */,\n  Throw = 43 /* _BinaryenThrowId */,\n  Rethrow = 44 /* _BinaryenRethrowId */,\n  BrOnExn = 45 /* _BinaryenBrOnExnId */,\n  TupleMake = 46 /* _BinaryenTupleMakeId */,\n  TupleExtract = 47 /* _BinaryenTupleExtractId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  AbsI8x16 = 67 /* __BinaryenAbsVecI8x16 */,\n  NegI8x16 = 68 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 69 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  BitmaskI8x16 = 71 /* __BinaryenBitmaskVecI8x16 */,\n  AbsI16x8 = 72 /* __BinaryenAbsVecI16x8 */,\n  NegI16x8 = 73 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 74 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 79 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 80 /* _BinaryenAllTrueVecI32x4 */,\n  BitmaskI32x4 = 81 /* _BinaryenBitmaskVecI32x4 */,\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 83 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 84 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  CeilF32x4 = 88 /* _BinaryenCeilVecF32x4 */,\n  FloorF32x4 = 89 /* _BinaryenFloorVecF32x4 */,\n  TruncF32x4 = 90 /* BinaryenTruncVecF32x4 */,\n  NearestF32x4 = 91 /* BinaryenNearestVecF32x4 */,\n  AbsF64x2 = 92 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 93 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 94 /* _BinaryenSqrtVecF64x2 */,\n  CeilF64x2 = 95 /* _BinaryenCeilVecF64x2 */,\n  FloorF64x2 = 96 /* _BinaryenFloorVecF64x2 */,\n  TruncF64x2 = 97 /* BinaryenTruncVecF64x2 */,\n  NearestF64x2 = 98 /* BinaryenNearestVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 99 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 100 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 101 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 102 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 103 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 104 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 105 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 106 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 107 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 108 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 109 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 110 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 111 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 112 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 113 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 114 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n\n  AddF32x4 = 157 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 158 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 159 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 160 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 161 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 162 /* _BinaryenMaxVecF32x4 */,\n  PminF32x4 = 163 /* _BinaryenPMinVecF32x4 */,\n  PmaxF32x4 = 164 /* _BinaryenPMaxVecF32x4 */,\n  AddF64x2 = 165 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 166 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 167 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 168 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 169 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 170 /* _BinaryenMaxVecF64x2 */,\n  PminF64x2 = 171 /* _BinaryenPMinVecF64x2 */,\n  PmaxF64x2 = 172 /* _BinaryenPMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 173 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 174 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 175 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 176 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 177 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n  constructor(\n    /** Segment data. */\n    public buffer: Uint8Array,\n    /** Segment offset. */\n    public offset: i64\n  ) {}\n}\n\nexport class Module {\n  constructor(\n    /** Binaryen module reference. */\n    public ref: ModuleRef\n  ) {\n    this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n  }\n\n  private lit: usize;\n\n  static create(): Module {\n    return new Module(binaryen._BinaryenModuleCreate());\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length));\n    binaryen._free(changetype<usize>(cArr));\n    return module;\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) {\n      binaryen.__i32_store8(out + i, bytes[i]);\n    }\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(\n      this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        )\n      : binaryen._BinaryenCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(\n          this.ref, index, cArr, operands ? operands.length : 0, params, results\n        )\n      : binaryen._BinaryenCallIndirect(\n          this.ref, index, cArr, operands ? operands.length : 0, params, results\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // multi value (pseudo instructions)\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(\n      this.ref,\n      cStr,\n      params,\n      results,\n      cArr,\n      varTypes ? varTypes.length : 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(\n    result: NativeType,\n    paramTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(\n      this.ref, cStr1, cStr2, cStr3, attribute, params, results\n    );\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let segment = segments[i];\n      let buffer = segment.buffer;\n      let offset = segment.offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(\n      this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared\n    );\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) {\n      binaryen._free(segs[i]);\n    }\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(\n      this.ref, initial, maximum, cArr, numNames, offset\n    );\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPass(pass: string, func: FunctionRef = 0): void {\n    var cStr = allocString(pass);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cStr, 1);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cStr, 1);\n    }\n    binaryen._free(cStr);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(optimizeLevel: i32, shrinkLevel: i32, debugInfo: bool = false, usesARC: bool = true): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    binaryen._BinaryenSetOptimizeLevel(optimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(shrinkLevel);\n    binaryen._BinaryenSetDebugInfo(debugInfo);\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel === 0) {\n      binaryen._BinaryenSetAlwaysInlineMaxSize(12);\n      binaryen._BinaryenSetFlexibleInlineMaxSize(70);\n      binaryen._BinaryenSetOneCallerInlineMaxSize(200);\n    } else {\n      binaryen._BinaryenSetAlwaysInlineMaxSize(\n        optimizeLevel == 0 && shrinkLevel >= 0\n          ? 2\n          : 4\n      );\n      binaryen._BinaryenSetFlexibleInlineMaxSize(65);\n      binaryen._BinaryenSetOneCallerInlineMaxSize(80);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"ssa-nomerge\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"flatten\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"vacuum\");\n        passes.push(\"code-folding\");\n        passes.push(\"flatten\");\n        passes.push(\"local-cse\");\n        passes.push(\"reorder-locals\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n      // FIXME: see issue #1288\n      // if (usesARC) {\n      //   if (optimizeLevel < 3) {\n      //     passes.push(\"flatten\");\n      //   }\n      //   passes.push(\"post-assemblyscript\");\n      // }\n      passes.push(\"optimize-instructions\");\n      passes.push(\"inlining\");\n      passes.push(\"dce\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"inlining-optimizing\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 3 && shrinkLevel <= 1) {\n        passes.push(\"licm\");\n      }\n      passes.push(\"simplify-locals-nostructure\");\n      passes.push(\"vacuum\");\n      passes.push(\"reorder-locals\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"vacuum\");\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n      }\n      passes.push(\"vacuum\");\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (binaryen._BinaryenGetLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (usesARC) {\n        // works best after inlining to cover most retains/releases\n        passes.push(\"post-assemblyscript-finalize\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals-nostructure\");\n          passes.push(\"vacuum\");\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"precompute-propagate\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-nonfunction-module-elements\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var binary = new BinaryModule(readBuffer(binaryPtr, binaryLen), readString(sourceMapPtr));\n    if (cStr) binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return binary;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case <u32>NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(\n          this.ref, globalName, binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenUnary(\n          this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1\n        );\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenBinary(\n          this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2\n        );\n      }\n    }\n    return 0;\n  }\n\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(\n    expr: ExpressionRef,\n    flags: ExpressionRunnerFlags,\n    maxDepth: i32 = 50,\n    maxLoopIterations: i32 = 1\n  ): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n  constructor(\n    /** Module this relooper belongs to. */\n    public module: Module,\n    /** Binaryen relooper reference. */\n    public ref: RelooperRef\n  ) {}\n\n  static create(module: Module): Relooper {\n    return new Relooper(module, binaryen._RelooperCreate(module.ref));\n  }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      labels[i] = \"case\" + i.toString() + labelPostfix;\n    }\n    entry[0] = module.local_set(localIndex, this.condition);\n    for (let i = 0; i < numValues; ++i) {\n      let index = indexes[i];\n      entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, NativeType.I32),\n          module.i32(values[i])\n        )\n      );\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = \"default\" + labelPostfix;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(labels[i], block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  DanglingPop = 2048 /* _BinaryenSideEffectDanglingPop */,\n  Any = 4095 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var len = u8s.length;\n  var ptr = binaryen._malloc(len);\n  for (let i = 0; i < len; ++i) {\n    binaryen.__i32_store8(ptr + i, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var len = i32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var len = u32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var len = ptrs.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0, k = len; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      len += 1;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else {\n      len += 4;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1) >>> 0;\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      assert(u < 0x200000, \"Invalid Unicode code point during allocString\");\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, len: i32): Uint8Array {\n  var ret = new Uint8Array(len);\n  for (let i = 0; i < len; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        assert(false, \"Invalid UTF8 sequence during readString\");\n      }\n    }\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >>> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  constructor(\n    /** WebAssembly binary. */\n    public output: Uint8Array,\n    /** Source map, if generated. */\n    public sourceMap: string | null\n  ) {}\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) {\n    return false;\n  }\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: {\n      return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    }\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return (\n          numChildren > 0 &&\n          needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1))\n        );\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(\n  expr:  ExpressionRef,\n  data:  T,\n  visit: (expr: ExpressionRef, data: T) => void\n): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i: Index = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      for (let i: Index = 0, n = binaryen._BinaryenTupleMakeGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenTupleMakeGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is a host type. */\n  HOST = 1 << 11\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    var cachedNullableType = this.cachedNullableType;\n    if (!cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      cachedNullableType.nonNullableType = this;\n      cachedNullableType.classReference = this.classReference;       // either a class reference\n      cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return cachedNullableType;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.is(TypeFlags.REFERENCE)) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.is(TypeFlags.NULLABLE) == other.is(TypeFlags.NULLABLE)\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.HOST       |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    program.uniqueSignatures.push(this);\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames !== null && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType !== null) {\n      if (otherThisType === null || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      if (!thisParameterTypes[i].equals(otherParameterTypes[i])) return false;\n    }\n\n    // check return type\n    return this.returnType.equals(other.returnType);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature, requireSameSize: bool = false): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      cloneParameterTypes[i] = parameterTypes[i];\n    }\n    var clone = new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n    var parameterNames = this.parameterNames;\n    if (parameterNames) {\n      let numParameterNames = parameterNames.length;\n      let cloneParameterNames = new Array<string>(numParameterNames);\n      for (let i = 0; i < numParameterNames; ++i) {\n        cloneParameterNames[i] = parameterNames[i];\n      }\n      clone.parameterNames = cloneParameterNames;\n    }\n    return clone;\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.args;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) {\n      return (<FunctionTarget>element).type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return assert(wrapperClasses.get(type));\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, variableLikeElement.type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = assert(wrapperClasses.get(type));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = assert(wrapperClasses.get(returnType));\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            let member = assert(members.get(propertyName));\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      while (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          node.range,\n          \"Const assertion\"\n        );\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is common type of LHS and RHS, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return assert(wrapperClasses.get(intType));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return assert(wrapperClasses.get(fltType));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.classReference;\n        if (ctxType.is(TypeFlags.REFERENCE) && classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.is(TypeFlags.REFERENCE) &&\n          !elementType.is(TypeFlags.HOST) // TODO: anyref isn't nullable as-is\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.args.length > 0\n        ) {\n          return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let varType = (<VariableLikeElement>target).type;\n        let varElement = this.getElementOfType(varType);\n        if (!varElement || varElement.kind != ElementKind.FUNCTION_TARGET) {\n          break;\n        }\n        target = varElement;\n        // fall-through\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        return (<FunctionTarget>target).signature.returnType;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return assert(wrapperClasses.get(Type.bool));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      if (parameterType == Type.void) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParamters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          makeMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n              if (fieldType == Type.void) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldTypeNode.range\n                  );\n                }\n                break;\n              }\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n        if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base === instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface === instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        makeMap<string,Type>(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        makeMap<string,Type>(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Creates the parent flow of the specified function. */\n  static createParent(parentFunction: Function): Flow {\n    return new Flow(parentFunction);\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    return flow;\n  }\n\n  private constructor(\n    /** Function this flow belongs to. */\n    public parentFunction: Function\n  ) {\n    /* nop */\n  }\n\n  /** Parent flow. */\n  parent: Flow | null = null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags = FlowFlags.NONE;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null = null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null = null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[] = [];\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null = null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null = null;\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Gets the current return type. */\n  get returnType(): Type {\n    return this.actualFunction.signature.returnType;\n  }\n\n  /** Gets the current contextual type arguments. */\n  get contextualTypeArguments(): Map<string,Type> | null {\n    return this.actualFunction.contextualTypeArguments;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow(this.parentFunction);\n    branch.parent = this;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toNativeType()) {\n      case <u32>NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case <u32>NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    local.resetTemporaryName();\n    switch (<u32>local.type.toNativeType()) {\n      case <u32>NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    scopedLocal.setTemporaryName(name);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped dummy local of the specified name. */\n  addScopedDummyLocal(name: string, type: Type): Local {\n    var scopedDummy = new Local(name, -1, type, this.parentFunction);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedDummy.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedDummy);\n    return scopedDummy;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else {\n      let existingLocal = scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees a single scoped local by its name. */\n  freeScopedDummyLocal(name: string): void {\n    var scopedLocals = assert(this.scopedLocals);\n    assert(scopedLocals.has(name));\n    let local = assert(scopedLocals.get(name));\n    assert(local.index == -1);\n    scopedLocals.delete(name);\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.is(TypeFlags.REFERENCE)) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperand(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) &&\n                !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>NativeType.I32: { value = getConstValueI32(expr); break; }\n          case <u32>NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_ceil = \"~lib/builtins/v128.ceil\";\n  export const v128_floor = \"~lib/builtins/v128.floor\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n  export const v128_nearest = \"~lib/builtins/v128.nearest\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_ceil = \"~lib/builtins/f32x4.ceil\";\n  export const f32x4_floor = \"~lib/builtins/f32x4.floor\";\n  export const f32x4_trunc = \"~lib/builtins/f32x4.trunc\";\n  export const f32x4_nearest = \"~lib/builtins/f32x4.nearest\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_ceil = \"~lib/builtins/f64x2.ceil\";\n  export const f64x2_floor = \"~lib/builtins/f64x2.floor\";\n  export const f64x2_trunc = \"~lib/builtins/f64x2.trunc\";\n  export const f64x2_nearest = \"~lib/builtins/f64x2.nearest\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  constructor(\n    /** Compiler reference. */\n    public compiler: Compiler,\n    /** Prototype being called. */\n    public prototype: FunctionPrototype,\n    /** Provided type arguments. */\n    public typeArguments: Type[] | null,\n    /** Provided operands. */\n    public operands: Expression[],\n    /** Contextual type. */\n    public contextualType: Type,\n    /** Respective call expression. */\n    public reportNode: CallExpression,\n    /** Whether originating from inline assembly. */\n    public contextIsExact: bool\n  ) {}\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.FLOAT) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type == Type.bool ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.SIGNED) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.REFERENCE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      let stringInstance = compiler.program.stringInstance;\n      if (stringInstance !== null && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let classReference = type.classReference;\n    if (classReference) {\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n  }\n  return module.i32(0);\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.signatureReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classType = type.classReference;\n  if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classType.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classType.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classType.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.is(TypeFlags.REFERENCE)) {\n    let classReference = resultType.classReference;\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      let signatureReference = resultType.signatureReference;\n      if (signatureReference) {\n        value = \"Function\";\n      } else {\n        value = \"Anyref\";\n      }\n    }\n  } else {\n    switch (resultType.kind) {\n      case TypeKind.BOOL: { value = \"bool\"; break; }\n      case TypeKind.I8: { value = \"i8\"; break; }\n      case TypeKind.U8: { value = \"u8\"; break; }\n      case TypeKind.I16: { value = \"i16\"; break; }\n      case TypeKind.U16: { value = \"u16\"; break; }\n      case TypeKind.I32: { value = \"i32\"; break; }\n      case TypeKind.U32: { value = \"u32\"; break; }\n      case TypeKind.F32: { value = \"f32\"; break; }\n      case TypeKind.I64: { value = \"i64\"; break; }\n      case TypeKind.U64: { value = \"u64\"; break; }\n      case TypeKind.F64: { value = \"f64\"; break; }\n      case TypeKind.ISIZE: { value = \"isize\"; break; }\n      case TypeKind.USIZE: { value = \"usize\"; break; }\n      case TypeKind.V128: { value = \"v128\"; break; }\n      case TypeKind.ANYREF: { value = \"anyref\"; break; }\n      default: assert(false);\n      case TypeKind.VOID: { value = \"void\"; break; }\n    }\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  if (type.is(TypeFlags.REFERENCE)) {\n    let signatureReference = type.signatureReference;\n    if (signatureReference) {\n      return module.i32(signatureReference.id);\n    }\n    let classReference = type.classReference;\n    if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      return module.i32(classReference.id);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotlI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotrI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.is(TypeFlags.INTEGER) &&\n    contextualType.is(TypeFlags.INTEGER) &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.is(TypeFlags.INTEGER)\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.is(TypeFlags.INTEGER) &&\n    (\n      !inType.is(TypeFlags.INTEGER) || // float to int\n      inType.size < type.size          // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    arg2 = compiler.convertExpression(arg2,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[2]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType // ^\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.host(HostOp.MemorySize);\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  return module.host(HostOp.MemoryGrow, null, [\n    compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n  ]);\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.is(TypeFlags.VALUE)) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = compiler.compileExpression(expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>NativeType.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"assert\", compiler.currentType.toString()\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.classReference;\n  if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (!type.is(TypeFlags.REFERENCE)) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.ceil<T!>(a: v128) -> v128\nfunction builtin_v128_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ceil, builtin_v128_ceil);\n\n// v128.floor<T!>(a: v128) -> v128\nfunction builtin_v128_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_floor, builtin_v128_floor);\n\n// v128.trunc<T!>(a: v128) -> v128\nfunction builtin_v128_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc, builtin_v128_trunc);\n\n// v128.nearest<T!>(a: v128) -> v128\nfunction builtin_v128_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_nearest, builtin_v128_nearest);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (!type.is(TypeFlags.REFERENCE)) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.ceil -> v128.ceil<f32>\nfunction builtin_f32x4_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ceil, builtin_f32x4_ceil);\n\n// f32x4.floor -> v128.floor<f32>\nfunction builtin_f32x4_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_floor, builtin_f32x4_floor);\n\n// f32x4.trunc -> v128.trunc<f32>\nfunction builtin_f32x4_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_trunc, builtin_f32x4_trunc);\n\n// f32x4.nearest -> v128.nearest<f32>\nfunction builtin_f32x4_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_nearest, builtin_f32x4_nearest);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.ceil -> v128.ceil<f64>\nfunction builtin_f64x2_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ceil, builtin_f64x2_ceil);\n\n// f64x2.floor -> v128.floor<f64>\nfunction builtin_f64x2_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_floor, builtin_f64x2_floor);\n\n// f64x2.trunc -> v128.trunc<f64>\nfunction builtin_f64x2_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_trunc, builtin_f64x2_trunc);\n\n// f64x2.nearest -> v128.nearest<f64>\nfunction builtin_f64x2_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_nearest, builtin_f64x2_nearest);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.is(TypeFlags.INTEGER | TypeFlags.VALUE)) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function toText() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 4\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled library functions. */\n  lazyLibraryFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n  /** Elements currently undergoing compilation. */\n  pendingElements: Set<Element> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create();\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    module.setFeatures(featureFlags);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = new Array<ExpressionRef>();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // obtain the main start function\n    var startFunctionInstance = this.currentFlow.actualFunction;\n    assert(startFunctionInstance.internalName == BuiltinNames.start);\n    var startFunctionBody = this.currentBody;\n    assert(startFunctionBody.length == 0);\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy library functions\n    var lazyLibraryFunctions = this.lazyLibraryFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyLibraryFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyLibraryFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyLibraryFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    var functionTable = this.functionTable;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // incl. varargs\n        this.finalizeVirtualStub(instance);\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualCalls = this.virtualCalls;\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.finalizeVirtualStub(instance);\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var initialPages: u32 = 0;\n    if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n    var isSharedMemory = false;\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      this.memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.memory : null,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n        module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>element;\n        let functionInstances = functionPrototype.instances;\n        if (functionInstances !== null && functionInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (functionPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            functionPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classPrototype = <ClassPrototype>element;\n        let classInstances = classPrototype.instances;\n        if (classInstances !== null && classInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (classPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            classPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (propertyInstance) this.ensureModuleExport(name, propertyInstance, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.ensureArgumentsLength();\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.ensureModuleExport(GETTER_PREFIX + name, getterInstance, prefix);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.ensureModuleExport(SETTER_PREFIX + name, setterInstance, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (functionInstance) this.compileFunction(functionInstance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let classInstance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (classInstance) this.compileClass(classInstance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n        if (propertyInstance) this.compileProperty(propertyInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return !global.is(CommonFlags.ERRORED);\n    global.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(global);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) {\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        global.set(CommonFlags.ERRORED);\n        pendingElements.delete(global);\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      pendingElements.delete(global);\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        pendingElements.delete(global);\n        return true;\n      }\n\n      // Importing mutable globals is not supported in the MVP\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        global.declaration.range, \"mutable-globals\"\n      );\n      global.set(CommonFlags.ERRORED);\n      pendingElements.delete(global);\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n          if (this.skippedAutoreleases.has(initExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              global.set(CommonFlags.ERRORED);\n              pendingElements.delete(global);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, type);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    pendingElements.delete(global);\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return !element.is(CommonFlags.ERRORED);\n    element.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(element);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, Type.i32, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    pendingElements.delete(element);\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return !instance.is(CommonFlags.ERRORED);\n\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyLibraryFunctions.add(instance);\n        return true;\n      }\n    }\n\n    instance.set(CommonFlags.COMPILED);\n    var pendingElements = this.pendingElements;\n    pendingElements.add(instance);\n\n    var previousType = this.currentType;\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // In normal instance functions, `this` is effectively a constant\n        // retained elsewhere so does not need to be retained.\n        if (instance.is(CommonFlags.CONSTRUCTOR)) {\n          // Constructors, however, can allocate their own memory, and as such\n          // must refcount the allocation in case something else is `return`ed.\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType()),\n                type\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      let body: ExpressionRef;\n      if (this.compileFunctionBody(instance, stmts)) {\n        if (!flow.is(FlowFlags.TERMINATES)) {\n          this.performAutoreleases(flow, stmts);\n          this.finishAutoreleases(flow, stmts);\n        }\n        body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      } else {\n        body = module.unreachable();\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n      instance.set(CommonFlags.ERRORED);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    pendingElements.delete(instance);\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.is(CommonFlags.INSTANCE)\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          module.if(\n            module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n              module.local_get(thisLocal.index, nativeSizeType)\n            ),\n            module.local_set(thisLocal.index,\n              this.makeRetain(\n                this.makeAllocation(classInstance),\n                classInstance.type\n              )\n            )\n          )\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n        if (flow.isInline) {\n          let firstStmt = stmts[0]; // `this` alias assignment\n          assert(getExpressionId(firstStmt) == ExpressionId.LocalSet);\n          assert(getLocalSetIndex(firstStmt) == thisLocal.index);\n          allocStmts.unshift(firstStmt);\n          stmts[0] = module.flatten(allocStmts, NativeType.None);\n        } else {\n          stmts.unshift(\n            module.flatten(allocStmts, NativeType.None)\n          );\n        }\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n              instance.identifierNode.range\n            );\n          }\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        assert(flow.isAnyLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED));\n        flow.unsetLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED); // undo\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr, type);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType), type)\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType), type)\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance.id, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var nativeType = elementType.toNativeType();\n    switch (<u32>nativeType) {\n      case <u32>NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, id, byteLength);\n    assert(this.writeStaticBuffer(buf, runtimeHeaderSize, elementType, values) == buf.length);\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.nextMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance.id, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(instance: Function): i32 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var index = instance.functionTableIndex;\n    if (index >= 0) return index;\n    var functionTable = this.functionTable;\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    index = tableBase + functionTable.length;\n    functionTable.push(instance);\n    instance.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATURE:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          statement.range,\n          \"Inner type alias\"\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        labelNode.range,\n        \"Break label\"\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        label.range,\n        \"Continue label\"\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Iterators\"\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n      ? \"case\" + defaultIndex.toString()\n      : \"break\"\n    ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).args;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    // generates dead code (after unreachable) but still updates state\n    var dropped = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, dropped);\n    this.finishAutoreleases(flow, dropped);\n    flow.freeScopedLocals();\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Exceptions\"\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          let pendingElements = this.pendingElements;\n          let dummy = flow.addScopedDummyLocal(name, type); // pending dummy\n          pendingElements.add(dummy);\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n          pendingElements.delete(dummy);\n          flow.freeScopedDummyLocal(name);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let pendingElements = this.pendingElements;\n        let temp = flow.addScopedDummyLocal(name, Type.auto); // pending dummy\n        pendingElements.add(temp);\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        pendingElements.delete(temp);\n        flow.freeScopedDummyLocal(name);\n\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp;\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = assert(scopedLocals.get(name));\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr, type)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr, returnType);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.is(TypeFlags.REFERENCE) || toType.is(TypeFlags.REFERENCE)) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.is(TypeFlags.NULLABLE) && !toType.is(TypeFlags.NULLABLE)) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.is(TypeFlags.POINTER) && !toType.is(TypeFlags.POINTER)) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          makeMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Const assertion\"\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n  private i32PowInstance: Function | null = null;\n  private i64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        leftExpr = this.convertExpression(leftExpr,\n          leftType, leftType = commonType,\n          false, true, // !\n          left\n        );\n        rightExpr = this.convertExpression(rightExpr,\n          rightType, rightType = commonType,\n          false, true, // !\n          right\n        );\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented_0,\n              expression.range,\n              \"ref.eq instruction\"\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented_0,\n              expression.range,\n              \"ref.eq instruction\"\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"**\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n\n        let instance: Function | null;\n        switch (commonType.kind) {\n          case TypeKind.BOOL: {\n            expr = module.select(\n              module.i32(1),\n              module.binary(BinaryOp.EqI32, rightExpr, module.i32(0)),\n              leftExpr\n            );\n            break;\n          }\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            instance = this.i32PowInstance;\n            if (!instance) {\n              let prototype = this.program.lookupGlobal(CommonNames.ipow32);\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"ipow32\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.i32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n              if (commonType.size != 32) {\n                expr = this.ensureSmallIntegerWrap(expr, commonType);\n              }\n            }\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            instance = this.i64PowInstance;\n            if (!instance) {\n              let prototype = this.program.lookupGlobal(CommonNames.ipow64);\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"ipow64\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.i64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let isWasm64 = this.options.isWasm64;\n            instance = isWasm64 ? this.i64PowInstance : this.i32PowInstance;\n            if (!instance) {\n              let prototype = this.program.lookupGlobal(isWasm64 ? CommonNames.ipow64 : CommonNames.ipow32);\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, isWasm64 ? \"ipow64\" : \"ipow32\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n              if (isWasm64) {\n                this.i64PowInstance = instance;\n              } else {\n                this.i32PowInstance = instance;\n              }\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F32: {\n            instance = this.f32PowInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.pow\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.pow));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          // Math.pow otherwise (result is f64)\n          case TypeKind.F64: {\n            instance = this.f64PowInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.pow\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.pow));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.mod));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.mod));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        if (this.pendingElements.has(target)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            target.internalName\n          );\n          return this.module.unreachable();\n        }\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        if (\n          fieldInstance.is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode !== null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, fieldInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          valueType,\n          this.compileExpression(\n            assert(thisExpression),\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, nativeReturnType)\n            ], valueExpression)\n          ], nativeReturnType);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toNativeType());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), classInstance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (!valueType.is(TypeFlags.NULLABLE) || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          valueType,\n          module.local_get(localIndex, type.toNativeType()),\n          type,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr, valueType);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          valueType,\n          module.global_get(global.internalName, nativeType),\n          type,\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              valueType,\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              fieldType,\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            valueType,\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED),\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            fieldType,\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      let superCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.args,\n        expression,\n        module.local_get(thisLocal.index, nativeSizeType),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(superCall)); // guaranteed\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.args,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          indexArg = module.load(4, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT\n            ),\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        let functionTarget = <FunctionTarget>target;\n        signature = functionTarget.signature;\n        indexArg = this.compileExpression(expression.expression, functionTarget.type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT\n          );\n        }\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: bootstrap can't see this yet\n      indexArg,\n      expression.args,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(new BuiltinContext(\n        this,\n        prototype,\n        typeArguments,\n        expression.args,\n        contextualType,\n        expression,\n        false\n      ));\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        reportNode.range,\n        \"Rest parameters\"\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE) && (!instance.is(CommonFlags.VIRTUAL) || reportNode.isCallOnSuper)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr, paramType);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // In normal instance functions, `this` is effectively a constant\n      // retained elsewhere so does not need to be retained.\n      if (instance.is(CommonFlags.CONSTRUCTOR)) {\n        // Constructors, however, can allocate their own memory, and as such\n        // must refcount the allocation in case something else is `return`ed.\n        flow.setLocalFlag(thisLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, initType);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n    }\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(original.internalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      typesToNativeTypes(stub.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      null,\n      module.unreachable()\n    );\n    this.virtualCalls.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    // Wouldn't be here if there wasn't at least one overload\n    var overloadPrototypes = assert(instance.prototype.overloads);\n\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, nativeSizeType),\n          nativeSizeType == NativeType.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        NativeType.I32\n      )\n    );\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved and compiled as\n    // we are going to call them conditionally based on this's class id.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (classInstances) {\n        for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n          let classInstance = _values[j];\n          let overloadInstance: Function | null;\n          if (isProperty) {\n            let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n            assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n            let boundPropertyInstance = this.resolver.resolveProperty(<PropertyPrototype>boundProperty);\n            if (!boundPropertyInstance) continue;\n            if (instance.is(CommonFlags.GET)) {\n              overloadInstance = boundPropertyInstance.getterInstance;\n            } else {\n              assert(instance.is(CommonFlags.SET));\n              overloadInstance = boundPropertyInstance.setterInstance;\n            }\n          } else {\n            let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n            assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            overloadInstance = this.resolver.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n          }\n          if (!overloadInstance || !this.compileFunction(overloadInstance)) continue;\n          let overloadType = overloadInstance.type;\n          let originalType = instance.type;\n          if (!overloadType.isAssignableTo(originalType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n            );\n            continue;\n          }\n          // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n          let overloadSignature = overloadInstance.signature;\n          let overloadParameterTypes = overloadSignature.parameterTypes;\n          let overloadNumParameters = overloadParameterTypes.length;\n          let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n          paramExprs[0] = module.local_get(0, nativeSizeType); // this\n          for (let n = 0; n < numParameters; ++n) {\n            paramExprs[1 + n] = module.local_get(1 + n, parameterTypes[n].toNativeType());\n          }\n          let needsVarargsStub = false;\n          for (let n = numParameters; n < overloadNumParameters; ++n) {\n            // TODO: inline constant initializers and skip varargs stub\n            paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n]);\n            needsVarargsStub = true;\n          }\n          let calledName = needsVarargsStub\n            ? this.ensureVarargsStub(overloadInstance).internalName\n            : overloadInstance.internalName;\n          let nativeReturnType = overloadSignature.returnType.toNativeType();\n          let stmts = new Array<ExpressionRef>();\n          if (needsVarargsStub) {\n            this.ensureArgumentsLength();\n            // Safe to prepend since paramExprs are local.get's\n            stmts.push(module.global_set(BuiltinNames.argumentsLength, module.i32(numParameters)));\n          }\n          if (returnType == Type.void) {\n            stmts.push(\n              module.call(calledName, paramExprs, nativeReturnType)\n            );\n            stmts.push(\n              module.return()\n            );\n          } else {\n            stmts.push(\n              module.return(\n                module.call(calledName, paramExprs, nativeReturnType)\n              )\n            );\n          }\n          builder.addCase(classInstance.id, stmts);\n          // Also alias each extendee inheriting this exact overload\n          let extendees = classInstance.getAllExtendees(\n            isProperty\n              ? unboundOverloadParent.name\n              : instance.prototype.name\n          );\n          for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n            let extendee = _values[a];\n            builder.addCase(extendee.id, stmts);\n          }\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, nativeSizeType); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toNativeType());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toNativeType());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      [ NativeType.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef, type: Type): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef, type: Type): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** The type of the new expression. */\n    newType: Type,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** The type of the old expression. */\n    oldType: Type,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr, oldType),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType), newType)\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType), oldType)\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr, type), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType()),\n                local.type\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType()),\n          local.type\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          let returnType = this.currentType;\n          if (returnType.isManaged) {\n            if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!instance.is(CommonFlags.MODULE_IMPORT)) {\n          let original = instance;\n          instance = this.ensureVarargsStub(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          // We know the last operand is optional and omitted, so inject setting\n          // ~argumentsLength into that operand, which is always safe.\n          let lastOperand = operands[maxOperands - 1];\n          assert(!(getSideEffects(lastOperand) & SideEffects.WritesGlobal));\n          let lastOperandType = parameterTypes[maxArguments - 1];\n          operands[maxOperands - 1] = module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            lastOperand\n          ], lastOperandType.toNativeType());\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr, returnType);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureArgumentsLength();\n          return expr;\n        }\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isCallOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    if (this.options.isWasm64) {\n      indexArg = module.unary(UnaryOp.WrapI64, indexArg);\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    this.ensureArgumentsLength();\n    if (getSideEffects(indexArg) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(Type.i32, findUsedLocals(indexArg));\n      indexArg = module.block(null, [\n        module.local_set(temp.index, indexArg),\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, NativeType.I32)\n      ], NativeType.I32);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      indexArg = module.block(null, [\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        indexArg\n      ], NativeType.I32);\n    }\n    var expr = module.call_indirect(\n      indexArg,\n      operands,\n      signature.nativeParams,\n      signature.nativeResults\n    );\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            if (!isUnchecked && this.options.pedantic) {\n              this.pedantic(\n                DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n                expression.range\n              );\n            }\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          return module.ref_null();\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n          let thisType = assert(actualFunction.signature.thisType);\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          flow.set(FlowFlags.ACCESSES_THIS);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (this.pendingElements.has(local)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            local.internalName\n          );\n          this.currentType = localType;\n          return module.unreachable();\n        }\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"Closures\"\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.is(TypeFlags.HOST | TypeFlags.REFERENCE)) {\n          this.currentType = Type.anyref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let index = this.ensureFunctionTableEntry(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return module.i32(index);\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      makeMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.classReference;\n    if (actualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.is(TypeFlags.NULLABLE)) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      case LiteralKind.REGEXP: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Regular expressions\"\n        );\n        this.currentType = contextualType;\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    if (contextualType.is(TypeFlags.REFERENCE)) {\n      let classReference = contextualType.classReference;\n      if (classReference !== null && classReference.extends(program.staticArrayPrototype)) {\n        return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n      }\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = this.compileExpression(<Expression>expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr, arrayType);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression),\n          arrayType\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    assert(contextualType.is(TypeFlags.REFERENCE));\n    var arrayInstance = assert(contextualType.classReference);\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype)![0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      if (expression) {\n        let expr = this.compileExpression(expression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression),\n          program.arrayBufferInstance.type\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression),\n          program.arrayBufferInstance.type\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.classReference;\n    if (!contextualType.is(TypeFlags.REFERENCE) || !classReference || classReference.kind != ElementKind.CLASS) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = isManaged\n      ? flow.getAutoreleaseLocal(classType)\n      : flow.getTempLocal(classType);\n    var nativeClassType = classType.toNativeType();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member: DeclaredElement;\n      if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n      if (fieldType.isManaged && !this.skippedAutoreleases.has(expr)) {\n        expr = this.makeRetain(expr, fieldType);\n      }\n      exprs.push(\n        module.store( // TODO: handle setters as well\n          fieldType.byteSize,\n          module.local_get(tempLocal.index, nativeClassType),\n          expr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        )\n      );\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by default ctor\n      }\n\n      if (fieldType.is(TypeFlags.REFERENCE) && fieldType.classReference !== null) {\n        // TODO: Check if it is a class, with a default value (constructor with no params).\n        if (!fieldType.is(TypeFlags.NULLABLE)) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.store( // TODO: handle setters as well\n              fieldType.byteSize,\n              module.local_get(tempLocal.index, nativeClassType),\n              this.makeZero(fieldType),\n              fieldType.toNativeType(),\n              fieldInstance.memoryOffset\n            )\n          );\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(classReference, [], Constraints.WILL_RETAIN, expression)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, nativeClassType)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, nativeClassType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.args, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    var contextualTypeArguments = makeMap(classInstance.contextualTypeArguments);\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        null,\n        baseCtor.signature,\n        contextualTypeArguments\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonNames.constructor,\n        new FunctionPrototype(\n          CommonNames.constructor,\n          classInstance, // bound\n          this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        null,\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        contextualTypeArguments\n      );\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    var classType = classInstance.type;\n    if (classType.isManaged) allocExpr = this.makeRetain(allocExpr, classType);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitializationInConstructor(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (classInstance.type.isUnmanaged || ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT\n        );\n        let thisType = this.currentType;\n        if (thisType.is(TypeFlags.NULLABLE)) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        return module.load(\n          fieldType.byteSize,\n          fieldType.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.is(CommonFlags.STATIC)) {\n          let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n          if (!functionInstance) return module.unreachable();\n          if (!this.compileFunction(functionInstance)) return module.unreachable();\n          this.currentType = functionInstance.type;\n          return module.i32(this.ensureFunctionTableEntry(functionInstance));\n        }\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, functionPrototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, false, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.ANYREF: return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n    }\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      while (classReference) {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (!this.checkTypeSupported(parameterTypes[i], reportNode.parameters[i])) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.ANYREF: return module.ref_null();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ANYREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr, fieldType);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr, fieldType);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var stringInstance = program.stringInstance;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type);\n    }\n\n    var filenameArg = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageArg,\n          filenameArg,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(type.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.is(TypeFlags.REFERENCE) && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeAbort(null, reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    return expr;\n  }\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.args;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented_0 = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Exported_generic_function_or_class_has_no_concrete_instances = 232,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  Variable_0_used_before_its_declaration = 2448,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented: {0}\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 232: return \"Exported generic function or class has no concrete instances.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2448: return \"Variable '{0}' used before its declaration.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureNode,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Represents a dependee. */\nclass Dependee {\n  constructor(\n    public source: Source,\n    public reportNode: Node\n  ) {}\n}\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source | null = null;\n  /** Map of dependees being depended upon by a source, by path. */\n  dependees: Map<string, Dependee> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file, or `null` to indicate not found. */\n    text: string | null,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(path);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // check if this is an error\n    if (text === null) {\n      let dependees = this.dependees;\n      let dependee: Dependee | null = null;\n      if (dependees.has(internalPath)) dependee = assert(dependees.get(internalPath));\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        dependee\n          ? dependee.reportNode.range\n          : null,\n        path\n      );\n      return;\n    }\n\n    // create the source element\n    var source = new Source(\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER,\n      normalizedPath,\n      text\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) {\n        statements.push(statement);\n      } else {\n        this.skipStatement(tn);\n      }\n    }\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the path of the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var dependees = this.dependees;\n    if (dependees.has(dependent)) {\n      let dependee = assert(dependees.get(dependent));\n      return dependee.source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'null'\n    } else if (token == Token.NULL) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"null\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, false, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... | null\n    while (tn.skip(Token.BAR)) {\n      if (tn.skip(Token.NULL)) {\n        type.isNullable = true;\n      } else {\n        let notNullStart = tn.pos;\n        let notNull = this.parseType(tn, false, true);\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            notNull ? notNull.range : tn.range(notNullStart), \"null\"\n          );\n        }\n        return null;\n      }\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let paramStart: i32 = -1;\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          paramStart = tn.tokenPos;\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = Node.createParameter(kind, name, Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = Node.createParameter(\n            firstParamKind,\n            firstParamNameNoType,\n            Node.createOmittedType(firstParamNameNoType.range.atEnd),\n            null,\n            firstParamNameNoType.range\n          );\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var declarations = new Array<VariableDeclaration>();\n    do {\n      let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!declaration) return null;\n      declarations.push(declaration);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && initializer !== null) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      parentDecorators,\n      flags,\n      type,\n      initializer,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      decorators,\n      flags,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      parentFlags,\n      value,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        identifier,\n        type,\n        initializer,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      decorators,\n      flags,\n      typeParameters,\n      signature,\n      body,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n      // or at '(' of arrow function:\n      //  Parameters (':' Type)?\n      //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      signature,\n      body,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        null,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(member instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      null,\n      null,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(declaration instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): Node | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators !== null && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignature(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.type,\n              null, // initialized via parameter\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT)) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        decorators,\n        flags,\n        typeParameters,\n        signature,\n        body,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) != 0 && ((flags & CommonFlags.STATIC) != 0 || isInterface || initializer !== null)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        decorators,\n        flags,\n        type,\n        initializer,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignature(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureNode | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignature(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          decorators,\n          flags,\n          members,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    var currentSource = assert(this.currentSource);\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      if (path !== null) {\n        let internalPath = assert(ret.internalPath);\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(currentSource, path));\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, new Dependee(currentSource, path));\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(),\n          \"Mixed default and named imports\"\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(assert(this.currentSource), path));\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n      // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          decorators,\n          flags,\n          typeParameters,\n          type,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments = new Array<TypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments.length) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n} from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate = includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n  {\n    \"MIN_VALUE\": { value: -128, writable: false },\n    \"MAX_VALUE\": { value:  127, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n  {\n    \"MIN_VALUE\": { value: -32768, writable: false },\n    \"MAX_VALUE\": { value:  32767, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n  {\n    \"MIN_VALUE\": { value: -2147483648, writable: false },\n    \"MAX_VALUE\": { value:  2147483647, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n  {\n    \"MIN_VALUE\": { value:   0, writable: false },\n    \"MAX_VALUE\": { value: 255, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n  {\n    \"MIN_VALUE\": { value:     0, writable: false },\n    \"MAX_VALUE\": { value: 65535, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n  {\n    \"MIN_VALUE\": { value:          0, writable: false },\n    \"MAX_VALUE\": { value: 4294967295, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; },\n  {\n    \"MIN_VALUE\": { value: false, writable: false },\n    \"MAX_VALUE\": { value: true,  writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n  {\n    \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n    \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n    \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; },\n  {\n    \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n    \"MIN_VALUE\": { value:                  5e-324, writable: false },\n    \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n  }\n);\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCharCode.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCharCode.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCodePoint.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCodePoint.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n};\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n};\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() { /* nop */ };\n\nglobalScope[\"trace\"] = function(message, n) {\n  if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n  console.error(\"trace: \" + message);\n};\n\nObject.defineProperty(Int8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8ClampedArray, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8ClampedArray(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float64Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float64Array(buffer, byteOffset, length);\n  }\n});\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9 // see: https://github.com/WebAssembly/multi-value\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** Portable. */\n  JS = 0,\n  /** WebAssembly with 32-bit pointers. */\n  WASM32 = 1,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64 = 2,\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function f32_as_i32(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function i32_as_f32(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function f64_as_i64(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function i64_as_f64(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero    = Long.ZERO;\nglobal.i64_one     = Long.ONE;\nglobal.i64_neg_one = Long.fromInt(-1);\n\nglobal.i64_new = function i64_new(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function i64_low(value) {\n  return value.low;\n};\n\nglobal.i64_high = function i64_high(value) {\n  return value.high;\n};\n\nglobal.i64_add = function i64_add(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function i64_sub(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function i64_mul(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_pow = function i64_pow(left, right) {\n  var rightLo = right.low;\n  var rightHi = right.high;\n  if (rightHi <= 0) {\n    if (rightHi < 0) {\n      if (left.eq(global.i64_neg_one)) {\n        return rightLo & 1 ? left : Long.ONE;\n      }\n      return left.eq(Long.ONE) ? left : Long.ZERO;\n    }\n    if (rightLo == 0) return Long.ONE;\n    if (rightLo == 1) return left;\n    if (rightLo == 2) return left.mul(left);\n  }\n  var result = Long.ONE;\n  while (rightLo | rightHi) {\n    if (rightLo & 1) result = result.mul(left);\n    right = right.shru(1);\n    left  = left.mul(left);\n    rightLo = right.low;\n    rightHi = right.high;\n  }\n  return result;\n};\n\nglobal.i64_div = function i64_div(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function i64_div_u(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function i64_rem(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function i64_rem_u(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function i64_and(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function i64_or(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function i64_xor(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function i64_shl(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function i64_shr(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function i64_shr_u(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function i64_not(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function i64_eq(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function i64_ne(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function i64_gt(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function i64_align(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function i64_is_i8(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function i64_is_i16(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function i64_is_i32(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function i64_is_u8(value) {\n  return value.high === 0 && (value.low >>> 0) <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function i64_is_u16(value) {\n  return value.high === 0 && (value.low >>> 0) <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function i64_is_u32(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function i64_is_bool(value) {\n  return (value.high | (value.low & ~1)) === 0;\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function i64_is_f32(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function i64_is_f64(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function i64_to_f32(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function i64_to_f64(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function i64_to_string(value, unsigned) {\n  return unsigned ? value.toUnsigned().toString() : value.toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function Map_keys(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function Map_values(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function Set_values(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file, or `null` to indicate not found. */\n  text: string | null,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\nexport function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    // TODO: for (let v of original) {\n    for (let _values = Set_values(original), i = 0, k = _values.length; i < k; ++i) {\n      let v = unchecked(_values[i]);\n      cloned.add(v);\n    }\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  DeclarationStatement,\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  IndexSignatureNode,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATURE: {\n        this.visitIndexSignature(<IndexSignatureNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string, singleQuoted: bool = false): void {\n    var sb = this.sb;\n    var off = 0;\n    var quote = singleQuoted ? \"'\" : \"\\\"\";\n    sb.push(quote);\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (!singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n    sb.push(quote);\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(node: Node): void {\n    this.visitNode(node);\n    var sb = this.sb;\n    if (\n      !sb.length ||                     // leading EmptyStatement\n      node.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      node.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var indexSignature = node.indexSignature;\n    var members = node.members;\n    var numMembers = members.length;\n    if (indexSignature !== null || numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      if (indexSignature) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(indexSignature);\n      }\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n    /* nop */\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members != null && members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITE_ASSIGNMENT) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignature(node: IndexSignatureNode): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITE_ASSIGNMENT) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.args;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n"],"sourceRoot":""}